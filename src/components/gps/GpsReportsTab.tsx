'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { Upload, BarChart3, Activity, MapPin, Clock, Users, Trash2, Share2, Copy, Check } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import UploadGpsReportModal from './UploadGpsReportModal';
import GpsVisualization from './GpsVisualization';

interface Team {
  id: string;
  name: string;
}

interface Training {
  id: string;
  name: string;
  date: string;
  time: string;
  reportId: string;
  reportName: string;
}

interface Match {
  id: string;
  name: string;
  date: string;
  opponent: string;
  teamGoals: number;
  opponentGoals: number;
  reportId: string;
  reportName: string;
}

interface GpsReport {
  id: string;
  name: string;
  fileName: string;
  gpsSystem: string;
  eventType: 'TRAINING' | 'MATCH';
  eventId: string;
  teamId: string;
  profileId?: string;
  processedData: any[];
  rawData: any[];
  createdAt: string;
  isProcessed: boolean;
}

interface GpsDataPoint {
  name: string;
  [key: string]: any; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
}

export default function GpsReportsTab() {
  const { t } = useTranslation();
  const { toast } = useToast();
  const { data: session } = useSession();
  
  const [teams, setTeams] = useState<Team[]>([]);
  const [trainings, setTrainings] = useState<Training[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);
  const [selectedReport, setSelectedReport] = useState<GpsReport | null>(null);
  const [selectedProfile, setSelectedProfile] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [copiedLink, setCopiedLink] = useState<string | null>(null);
  
  // –§–∏–ª—å—Ç—Ä—ã
  const [selectedTeam, setSelectedTeam] = useState<string>('');
  const [selectedEventType, setSelectedEventType] = useState<'TRAINING' | 'MATCH' | ''>('');
  const [selectedEvent, setSelectedEvent] = useState<string>('');

  useEffect(() => {
    fetchTeams();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (selectedTeam && selectedEventType) {
      if (selectedEventType === 'TRAINING') {
        fetchTrainings(selectedTeam);
      } else if (selectedEventType === 'MATCH') {
        fetchMatches(selectedTeam);
      }
    }
  }, [selectedTeam, selectedEventType]);



  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (selectedEvent) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º reportId
      const selectedTraining = trainings.find(t => t.id === selectedEvent);
      const selectedMatch = matches.find(m => m.id === selectedEvent);
      
      if (selectedTraining && selectedTraining.reportId) {
        fetchReportById(selectedTraining.reportId);
      } else if (selectedMatch && selectedMatch.reportId) {
        fetchReportById(selectedMatch.reportId);
      } else {
        setSelectedReport(null);
      }
    }
  }, [selectedEvent, trainings, matches]);

  const fetchTeams = async () => {
    try {
      const response = await fetch('/api/teams');
      if (response.ok) {
        const data = await response.json();
        setTeams(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    }
  };

  const fetchTrainings = async (teamId: string) => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/trainings?teamId=${teamId}&forUpload=false`);
      if (response.ok) {
        const data = await response.json();
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏
        const trainingsWithReports = data.filter((training: any) => training.reportId);
        console.log(`üìä –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${data.length} –≤—Å–µ–≥–æ, ${trainingsWithReports.length} —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏`);
        setTrainings(trainingsWithReports);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchMatches = async (teamId: string) => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/matches?teamId=${teamId}&forUpload=false`);
      if (response.ok) {
        const data = await response.json();
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏
        const matchesWithReports = data.filter((match: any) => match.reportId);
        console.log(`üìä –ú–∞—Ç—á–∏: ${data.length} –≤—Å–µ–≥–æ, ${matchesWithReports.length} —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏`);
        setMatches(matchesWithReports);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error);
    } finally {
      setIsLoading(false);
    }
  };



  const deleteReport = async (reportId: string, reportName: string) => {
    console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', { reportId, reportName });
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç "${reportName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      return;
    }

    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', `/api/gps-reports/${reportId}`);
      const response = await fetch(`/api/gps-reports/${reportId}`, {
        method: 'DELETE'
      });
      
      console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', { status: response.status, ok: response.ok });
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ:', result);
        
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: `–û—Ç—á–µ—Ç "${reportName}" —É–¥–∞–ª–µ–Ω`,
        });
        

        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –æ—Ç—á–µ—Ç –±—ã–ª –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        if (selectedReport?.id === reportId) {
          console.log('üßπ –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç');
          setSelectedReport(null);
          setSelectedProfile(null);
        }
      } else {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
        
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: errorData.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç",
        variant: "destructive",
      });
    }
  };

  const fetchReportById = async (reportId: string) => {
    if (!reportId) {
      console.error('‚ùå ReportId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      setSelectedReport(null);
      return;
    }

    try {
      setIsLoading(true);
      console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç:', reportId);
      
      const response = await fetch(`/api/gps-reports/${reportId}`);
      
      if (response.ok) {
        const report = await response.json();
        logImportant('–ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç', { 
          name: report.name, 
          processedDataLength: Array.isArray(report.processedData) ? report.processedData.length : 0,
          eventId: report.eventId 
        });
        setSelectedReport(report);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç—á–µ—Ç–∞
        if (report.profileId) {
          await fetchProfile(report.profileId);
        } else {
          setSelectedProfile(createDemoProfile());
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
        setSelectedReport(null);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
      setSelectedReport(null);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchProfile = async (profileId: string) => {
    try {
      const response = await fetch(`/api/gps-profiles/${profileId}`);
      if (response.ok) {
        const profile = await response.json();
        logImportant('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω', { 
          id: profile.id, 
          name: profile.name,
          columnMappingLength: Array.isArray(profile.columnMapping) ? profile.columnMapping.length : 0
        });
        setSelectedProfile(profile);
      } else {
        console.log('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—å');
        setSelectedProfile(createDemoProfile());
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      console.log('üîß –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      setSelectedProfile(createDemoProfile());
    }
  };

  const createDemoProfile = () => {
    return {
      id: 'demo-profile',
      name: '–î–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—å',
      gpsSystem: 'B-SIGHT',
      columnMapping: [
        { type: 'column', name: 'total', mappedColumn: 'TOTAL', displayName: '–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', dataType: 'number', isVisible: true },
        { type: 'column', name: 'zone3', mappedColumn: 'ZONE 3', displayName: '–ó–æ–Ω–∞ 3', dataType: 'number', isVisible: true },
        { type: 'column', name: 'zone4', mappedColumn: 'ZONE 4', displayName: '–ó–æ–Ω–∞ 4', dataType: 'number', isVisible: true },
        { type: 'column', name: 'zone5', mappedColumn: 'ZONE 5', displayName: '–ó–æ–Ω–∞ 5', dataType: 'number', isVisible: true },
        { type: 'column', name: 'sprints', mappedColumn: 'SPRINTS', displayName: '–°–ø—Ä–∏–Ω—Ç—ã', dataType: 'number', isVisible: true },
        { type: 'column', name: 'maxSpeed', mappedColumn: 'MAX SPEED', displayName: '–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å', dataType: 'number', isVisible: true },
        { type: 'column', name: 'mPerMin', mappedColumn: 'M/MIN', displayName: '–ú/–º–∏–Ω', dataType: 'number', isVisible: true },
        { type: 'column', name: 'minutes', mappedColumn: 'MIN', displayName: '–í—Ä–µ–º—è', dataType: 'number', isVisible: true }
      ],
      metricsConfig: {
        primaryMetrics: ['total', 'zone3', 'zone4', 'zone5', 'sprints', 'maxSpeed'],
        secondaryMetrics: ['mPerMin', 'minutes'],
        chartTypes: {
          total: 'bar',
          zone3: 'bar',
          zone4: 'bar',
          zone5: 'bar',
          sprints: 'bar',
          maxSpeed: 'line'
        }
      },
      visualizationConfig: {
        colors: {
          total: '#3B82F6',
          zone3: '#F59E0B',
          zone4: '#EF4444',
          zone5: '#8B5CF6',
          sprints: '#10B981',
          maxSpeed: '#EC4899'
        },
        defaultChartType: 'bar'
      }
    };
  };

  const generateDemoData = () => {
    return [
      { name: 'Youssouf Adji', total: 10991, zone3: 2089, zone4: 801, zone5: 159, sprints: 13, mPerMin: 122, sTdPercent: 1.4, accDec: '149/148', maxSpeed: 31.2, minutes: 90 },
      { name: 'Akanni Adedayo', total: 10631, zone3: 1577, zone4: 799, zone5: 314, sprints: 24, mPerMin: 118, sTdPercent: 3.0, accDec: '181/148', maxSpeed: 33.9, minutes: 90 },
      { name: 'Lweendo Chimuka', total: 10517, zone3: 2051, zone4: 493, zone5: 5, sprints: 1, mPerMin: 117, sTdPercent: 0.0, accDec: '114/112', maxSpeed: 25.6, minutes: 90 },
      { name: 'Miguel Correa Jose', total: 9654, zone3: 1742, zone4: 566, zone5: 150, sprints: 8, mPerMin: 107, sTdPercent: 1.6, accDec: '102/114', maxSpeed: 32.8, minutes: 90 },
      { name: 'Bationo Julien Eymard', total: 8704, zone3: 1255, zone4: 473, zone5: 61, sprints: 7, mPerMin: 97, sTdPercent: 0.7, accDec: '142/128', maxSpeed: 27.1, minutes: 90 },
      { name: 'Emmanuel Osondu', total: 8636, zone3: 1573, zone4: 556, zone5: 304, sprints: 18, mPerMin: 133, sTdPercent: 3.5, accDec: '97/103', maxSpeed: 33.4, minutes: 65 },
      { name: 'Manuel Campos Juan', total: 7812, zone3: 1118, zone4: 427, zone5: 88, sprints: 9, mPerMin: 112, sTdPercent: 1.1, accDec: '89/76', maxSpeed: 28.8, minutes: 70 },
      { name: 'Nelson Japhet', total: 6214, zone3: 1503, zone4: 451, zone5: 29, sprints: 4, mPerMin: 138, sTdPercent: 0.5, accDec: '92/112', maxSpeed: 28.9, minutes: 45 },
      { name: 'Fagboun Ayomide', total: 5776, zone3: 1375, zone4: 283, zone5: 72, sprints: 4, mPerMin: 128, sTdPercent: 1.2, accDec: '68/80', maxSpeed: 29.9, minutes: 45 },
      { name: 'Atchoglo Ibrahim Raymond', total: 5576, zone3: 956, zone4: 367, zone5: 136, sprints: 10, mPerMin: 124, sTdPercent: 2.4, accDec: '94/82', maxSpeed: 32.7, minutes: 45 },
      { name: 'Juan Sebastian Mosquera', total: 5341, zone3: 863, zone4: 345, zone5: 95, sprints: 8, mPerMin: 119, sTdPercent: 1.8, accDec: '88/81', maxSpeed: 30.7, minutes: 45 },
      { name: 'Senesie Janneh', total: 5183, zone3: 1091, zone4: 357, zone5: 39, sprints: 5, mPerMin: 115, sTdPercent: 0.8, accDec: '84/66', maxSpeed: 28.4, minutes: 45 }
    ];
  };

  const clearConsole = () => {
    console.clear();
    console.log('üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
  };

  const logImportant = (message: string, data?: any) => {
    console.log(`üîç ${message}`, data || '');
  };

  const copyPublicLink = async () => {
    if (!selectedReport) return;
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
      const publicUrl = `${window.location.origin}/public/gps-report/${selectedReport.id}`;
      
      // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      await navigator.clipboard.writeText(publicUrl);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast({
        title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!",
        description: "–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
      setCopiedLink(selectedReport.id);
      setTimeout(() => setCopiedLink(null), 2000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
        variant: "destructive",
      });
    }
  };

  const generateTestData = () => {
    console.log('üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const testReport = {
      id: 'test-report',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç',
      fileName: 'test.xlsx',
      gpsSystem: 'B-SIGHT',
      eventType: 'TRAINING' as const,
      eventId: selectedEvent || 'test-event',
      teamId: selectedTeam || 'test-team',
      profileId: 'test-profile',
      processedData: [
        { name: '–ò–≥—Ä–æ–∫ 1', total: 10000, zone3: 2000, zone4: 800, zone5: 150, sprints: 12, maxSpeed: 30.5, mPerMin: 120, minutes: 90 },
        { name: '–ò–≥—Ä–æ–∫ 2', total: 9500, zone3: 1800, zone4: 750, zone5: 120, sprints: 10, maxSpeed: 29.8, mPerMin: 115, minutes: 90 },
        { name: '–ò–≥—Ä–æ–∫ 3', total: 11000, zone3: 2200, zone4: 900, zone5: 180, sprints: 15, maxSpeed: 32.1, mPerMin: 125, minutes: 90 },
        { name: '–ò–≥—Ä–æ–∫ 4', total: 8800, zone3: 1600, zone4: 700, zone5: 100, sprints: 8, maxSpeed: 28.5, mPerMin: 110, minutes: 90 },
        { name: '–ò–≥—Ä–æ–∫ 5', total: 10200, zone3: 1900, zone4: 850, zone5: 140, sprints: 11, maxSpeed: 31.2, mPerMin: 118, minutes: 90 }
      ],
      rawData: [],
      createdAt: new Date().toISOString(),
      isProcessed: true
    };
    
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç:', testReport);
    setSelectedReport(testReport);
    setSelectedProfile(createDemoProfile());
  };

  const transformGpsData = (processedData: any[]): GpsDataPoint[] => {
    if (!processedData || !Array.isArray(processedData)) {
      return [];
    }
    
    if (processedData.length === 0) {
      return [];
    }
    
    const transformed = processedData.map((row: any, index: number) => {
      const transformedRow: GpsDataPoint = {
        name: row.name || row.Name || row.NAME || row.playerName || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ ${index + 1}`
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –µ—Å—Ç—å
      Object.keys(row).forEach(key => {
        if (key !== 'name' && key !== 'Name' && key !== 'NAME' && key !== 'playerName') {
          transformedRow[key] = row[key];
        }
      });
      
      return transformedRow;
    });
    
    logImportant('–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã', { 
      inputLength: processedData.length, 
      outputLength: transformed.length,
      firstRecordKeys: transformed[0] ? Object.keys(transformed[0]) : []
    });
    
    return transformed;
  };

  return (
    <div className="space-y-6">
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card className="bg-vista-dark/50 border-vista-secondary/50 shadow-md">
        <CardHeader>
          <CardTitle className="text-vista-light">–í—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="text-sm font-medium text-vista-light/70">–ö–æ–º–∞–Ω–¥–∞</label>
              <Select value={selectedTeam} onValueChange={setSelectedTeam}>
                <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É" />
                </SelectTrigger>
                <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                  {teams.map(team => (
                    <SelectItem key={team.id} value={team.id}>
                      {team.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium text-vista-light/70">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
              <Select 
                value={selectedEventType} 
                onValueChange={(value) => setSelectedEventType(value as 'TRAINING' | 'MATCH')}
                disabled={!selectedTeam}
              >
                <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è" />
                </SelectTrigger>
                <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                  <SelectItem value="TRAINING">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</SelectItem>
                  <SelectItem value="MATCH">–ú–∞—Ç—á</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium text-vista-light/70">
                {selectedEventType === 'TRAINING' ? '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' : selectedEventType === 'MATCH' ? '–ú–∞—Ç—á' : '–°–æ–±—ã—Ç–∏–µ'}
              </label>
              <Select 
                value={selectedEvent} 
                onValueChange={setSelectedEvent}
                disabled={!selectedEventType || isLoading}
              >
                <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                  <SelectValue placeholder={isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–í—ã–±–µ—Ä–∏—Ç–µ ${selectedEventType === 'TRAINING' ? '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É' : '–º–∞—Ç—á'}`} />
                </SelectTrigger>
                <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                  {selectedEventType === 'TRAINING' ? (
                    trainings.length > 0 ? (
                      trainings.map(training => (
                        <SelectItem key={training.id} value={training.id}>
                          {new Date(training.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' })} {training.name}
                        </SelectItem>
                      ))
                    ) : (
                      <div className="px-2 py-1 text-sm text-vista-light/50">
                        –ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏
                      </div>
                    )
                  ) : selectedEventType === 'MATCH' ? (
                    matches.length > 0 ? (
                      matches.map(match => (
                        <SelectItem key={match.id} value={match.id}>
                          {new Date(match.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' })} {match.name} {match.teamGoals}:{match.opponentGoals} {match.opponent}
                        </SelectItem>
                      ))
                    ) : (
                      <div className="px-2 py-1 text-sm text-vista-light/50">
                        –ù–µ—Ç –º–∞—Ç—á–µ–π —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏
                      </div>
                    )
                  ) : null}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-end gap-2">
              <Button 
                onClick={() => setIsUploadModalOpen(true)}
                className="flex-1 bg-vista-primary hover:bg-vista-primary/90 text-vista-dark"
              >
                <Upload className="w-4 h-4 mr-2" />
                –ó–∞–≥—Ä—É–∑–∏—Ç—å
              </Button>
              {selectedReport && (
                <>
                  <Button
                    variant="outline"
                    onClick={copyPublicLink}
                    className="border-vista-primary/50 text-vista-primary hover:bg-vista-primary/10"
                    title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç—á–µ—Ç–æ–º"
                  >
                    {copiedLink === selectedReport.id ? (
                      <Check className="w-4 h-4" />
                    ) : (
                      <Share2 className="w-4 h-4" />
                    )}
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => deleteReport(selectedReport.id, selectedReport.name)}
                    className="border-vista-error/50 text-vista-error hover:bg-vista-error/10"
                    title="–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã */}


      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ */}
      {selectedReport && selectedProfile ? (
        (() => {
          const transformedData = transformGpsData(selectedReport.processedData);
          console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:', transformedData);
          console.log('üìä –ü—Ä–æ—Ñ–∏–ª—å:', selectedProfile);
          console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:', selectedProfile ? Object.keys(selectedProfile) : '–Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è');
          console.log('üîß columnMapping:', selectedProfile?.columnMapping);
          
          if (transformedData.length === 0) {
            return (
              <Card className="bg-vista-dark/50 border-vista-secondary/50 shadow-md">
                <CardHeader>
                  <CardTitle className="text-vista-light">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8 text-vista-light/50">
                    <BarChart3 className="w-16 h-16 mx-auto mb-4 opacity-50" />
                    <p>–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
                    <p className="text-sm mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</p>
                  </div>
                </CardContent>
              </Card>
            );
          }
          
          // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
          const selectedTeamName = teams.find(team => team.id === selectedTeam)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          
          return (
            <GpsVisualization
              data={transformedData}
              profile={selectedProfile}
              eventName={selectedReport.name}
              eventDate={selectedReport.createdAt}
              teamName={selectedTeamName}
              reportId={selectedReport.id}
              teamId={selectedTeam}
              eventType={selectedReport.eventType}
            />
          );
        })()
      ) : selectedEvent ? (
        <Card className="bg-vista-dark/50 border-vista-secondary/50 shadow-md">
          <CardHeader>
            <CardTitle className="text-vista-light">–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8 text-vista-light/50">
              <MapPin className="w-16 h-16 mx-auto mb-4 opacity-50" />
              <p>–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ GPS –æ—Ç—á–µ—Ç–∞</p>
              <p className="text-sm mt-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏–∑</p>
            </div>
          </CardContent>
        </Card>
      ) : null}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <UploadGpsReportModal
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        onUploaded={() => {
              if (selectedEvent) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º reportId
      const selectedTraining = trainings.find(t => t.id === selectedEvent);
      const selectedMatch = matches.find(m => m.id === selectedEvent);
      
      if (selectedTraining) {
        fetchReportById(selectedTraining.reportId);
      } else if (selectedMatch) {
        fetchReportById(selectedMatch.reportId);
      }
    }
        }}
      />
    </div>
  );
} 