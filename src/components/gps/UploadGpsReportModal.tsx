'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Upload, FileSpreadsheet, CheckCircle, Users } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import PlayerMappingModal from './PlayerMappingModal';

interface UploadGpsReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUploaded: () => void;
}

interface Team {
  id: string;
  name: string;
}

interface Training {
  id: string;
  name: string;
  date: string;
  team: string;
  category: string;
}

interface Match {
  id: string;
  name: string;
  date: string;
  opponent: string;
  teamGoals: number;
  opponentGoals: number;
  teamName: string;
}

interface GpsProfile {
  id: string;
  name: string;
  gpsSystem: string;
}

export default function UploadGpsReportModal({ isOpen, onClose, onUploaded }: UploadGpsReportModalProps) {
  const { toast } = useToast();
  const { data: session } = useSession();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [selectedTeam, setSelectedTeam] = useState<string>('');
  const [eventType, setEventType] = useState<'TRAINING' | 'MATCH' | ''>('');
  const [selectedEvent, setSelectedEvent] = useState<string>('');
  const [selectedProfile, setSelectedProfile] = useState<string>('');
  const [file, setFile] = useState<File | null>(null);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const [teams, setTeams] = useState<Team[]>([]);
  const [trainings, setTrainings] = useState<Training[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);
  const [profiles, setProfiles] = useState<GpsProfile[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingData, setIsLoadingData] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
  const [showPlayerMapping, setShowPlayerMapping] = useState(false);
  const [playerNames, setPlayerNames] = useState<string[]>([]);
  const [playerMappings, setPlayerMappings] = useState<any[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      fetchTeams();
      fetchProfiles();
    }
  }, [isOpen]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (selectedTeam && eventType) {
      if (eventType === 'TRAINING') {
        fetchTrainings(selectedTeam);
      } else if (eventType === 'MATCH') {
        fetchMatches(selectedTeam);
      }
    }
  }, [selectedTeam, eventType]);

  const fetchTeams = async () => {
    try {
      const response = await fetch('/api/teams');
      if (response.ok) {
        const data = await response.json();
        setTeams(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    }
  };

  const fetchProfiles = async () => {
    try {
      const response = await fetch('/api/gps-profiles');
      if (response.ok) {
        const data = await response.json();
        setProfiles(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
    }
  };

  const fetchTrainings = async (teamId: string) => {
    try {
      setIsLoadingData(true);
      const response = await fetch(`/api/trainings?teamId=${teamId}&forUpload=true`);
      if (response.ok) {
        const data = await response.json();
        setTrainings(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
    } finally {
      setIsLoadingData(false);
    }
  };

  const fetchMatches = async (teamId: string) => {
    try {
      setIsLoadingData(true);
      const response = await fetch(`/api/matches?teamId=${teamId}&forUpload=true`);
      if (response.ok) {
        const data = await response.json();
        setMatches(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error);
    } finally {
      setIsLoadingData(false);
    }
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
      await extractPlayerNames(selectedFile);
    }
  };

  const extractPlayerNames = async (file: File) => {
    if (!selectedProfile) return;
    
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('profileId', selectedProfile);

      const response = await fetch('/api/gps-reports/extract-players', {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const data = await response.json();
        setPlayerNames(data.playerNames);
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
    }
  };

  const handleSubmit = async () => {
    if (!file || !selectedTeam || !eventType || !selectedEvent || !selectedProfile) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    if (playerNames.length > 0) {
      setShowPlayerMapping(true);
      return;
    }

    // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
    await uploadReport();
  };

  const uploadReport = async (customMappings?: { reportName: string; selectedPlayerId: string }[]) => {
    if (!file || !selectedTeam || !eventType || !selectedEvent || !selectedProfile) {
      return;
    }

    try {
      setIsLoading(true);
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('name', file.name.replace(/\.[^/.]+$/, '')); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      formData.append('teamId', selectedTeam);
      formData.append('eventType', eventType);
      formData.append('eventId', selectedEvent);
      formData.append('profileId', selectedProfile);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const mappingsToUse = customMappings || playerMappings;
      console.log('üîó playerMappings –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', mappingsToUse);
      if (mappingsToUse.length > 0) {
        formData.append('playerMappings', JSON.stringify(mappingsToUse));
        console.log('üîó playerMappings –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ formData');
      } else {
        console.log('‚ö†Ô∏è playerMappings –ø—É—Å—Ç—ã–µ');
      }

      const response = await fetch('/api/gps-reports', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞');
      }

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "GPS –æ—Ç—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      resetForm();
      onClose();
      onUploaded();
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handlePlayerMappingConfirm = async (mappings: { reportName: string; selectedPlayerId: string }[]) => {
    console.log('üîó –ü–æ–ª—É—á–µ–Ω—ã –º–∞–ø–ø–∏–Ω–≥–∏ –æ—Ç PlayerMappingModal:', mappings);
    setPlayerMappings(mappings);
    setShowPlayerMapping(false);
    
    // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç —Å —É—á–µ—Ç–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    await uploadReport(mappings);
  };

  const resetForm = () => {
    setSelectedTeam('');
    setEventType('');
    setSelectedEvent('');
    setSelectedProfile('');
    setFile(null);
    setTrainings([]);
    setMatches([]);
    setPlayerNames([]);
    setPlayerMappings([]);
    setShowPlayerMapping(false);
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  const getEventName = () => {
    if (eventType === 'TRAINING') {
      const training = trainings.find(t => t.id === selectedEvent);
      return training?.name || '';
    } else if (eventType === 'MATCH') {
      const match = matches.find(m => m.id === selectedEvent);
      return match?.name || '';
    }
    return '';
  };

  const getProfileName = () => {
    const profile = profiles.find(p => p.id === selectedProfile);
    return profile?.name || '';
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent 
        className="bg-vista-dark/95 border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-4xl max-h-[85vh] overflow-y-auto backdrop-blur-xl mt-8 custom-scrollbar"
        aria-describedby="upload-gps-description"
      >
        <DialogHeader>
          <DialogTitle className="text-vista-light text-xl">–ó–∞–≥—Ä—É–∑–∏—Ç—å GPS –æ—Ç—á–µ—Ç</DialogTitle>
        </DialogHeader>
        <div id="upload-gps-description" className="sr-only">
          –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GPS –æ—Ç—á–µ—Ç–∞
        </div>
        
        <div className="space-y-6">
          {/* –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã */}
          <div className="space-y-2">
            <Label className="text-vista-light/40 font-normal">1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</Label>
            <Select value={selectedTeam} onValueChange={setSelectedTeam}>
              <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É" />
              </SelectTrigger>
              <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                {teams.map(team => (
                  <SelectItem key={team.id} value={team.id}>
                    {team.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* –®–∞–≥ 2: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è */}
          {selectedTeam && (
            <div className="space-y-2">
              <Label className="text-vista-light/40 font-normal">2. –¢–∏–ø —Å–æ–±—ã—Ç–∏—è</Label>
              <Select value={eventType} onValueChange={(value) => setEventType(value as 'TRAINING' | 'MATCH')}>
                <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è" />
                </SelectTrigger>
                <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                  <SelectItem value="TRAINING">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</SelectItem>
                  <SelectItem value="MATCH">–ú–∞—Ç—á</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          {/* –®–∞–≥ 3: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ */}
          {selectedTeam && eventType && (
            <div className="space-y-2">
              <Label className="text-vista-light/40 font-normal">3. –í—ã–±–µ—Ä–∏—Ç–µ {eventType === 'TRAINING' ? '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É' : '–º–∞—Ç—á'}</Label>
              {isLoadingData ? (
                <div className="text-center py-4 text-vista-light/60">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              ) : (
                <Select value={selectedEvent} onValueChange={setSelectedEvent}>
                  <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                    <SelectValue placeholder={`–í—ã–±–µ—Ä–∏—Ç–µ ${eventType === 'TRAINING' ? '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É' : '–º–∞—Ç—á'}`} />
                  </SelectTrigger>
                  <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                    {eventType === 'TRAINING' ? (
                      trainings.map(training => (
                        <SelectItem key={training.id} value={training.id}>
                          {training.name} - {new Date(training.date).toLocaleDateString()}
                        </SelectItem>
                      ))
                    ) : (
                      matches.map(match => (
                        <SelectItem key={match.id} value={match.id}>
                          {new Date(match.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' })} {match.name} {match.teamGoals}:{match.opponentGoals} {match.opponent}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
              )}
            </div>
          )}

          {/* –®–∞–≥ 4: –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç—á–µ—Ç–∞ */}
          {selectedEvent && (
            <div className="space-y-2">
              <Label className="text-vista-light/40 font-normal">4. –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç—á–µ—Ç–∞</Label>
              <Select value={selectedProfile} onValueChange={setSelectedProfile}>
                <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—á–µ—Ç–∞" />
                </SelectTrigger>
                <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                  {profiles.map(profile => (
                    <SelectItem key={profile.id} value={profile.id}>
                      {profile.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {/* –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
          {selectedProfile && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label className="text-vista-light/40 font-normal">5. –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ (Excel/CSV)</Label>
                <div className="border-2 border-dashed border-vista-secondary/30 rounded-lg p-6 text-center hover:border-vista-primary/50 transition-colors">
                  <Upload className="w-8 h-8 mx-auto mb-2 text-vista-light/40" />
                  <input
                    type="file"
                    accept=".xlsx,.xls,.csv"
                    onChange={handleFileChange}
                    className="hidden"
                    id="file-upload"
                  />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <span className="text-vista-primary hover:text-vista-primary/80 transition-colors">
                      –í—ã–±–µ—Ä–∏—Ç–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª
                    </span>
                  </label>
                </div>
              </div>

              {file && (
                <div className="flex items-center gap-2 text-vista-success">
                  <CheckCircle className="w-4 h-4" />
                  <span>{file.name} –≤—ã–±—Ä–∞–Ω</span>
                </div>
              )}
            </div>
          )}

          {/* –°–≤–æ–¥–∫–∞ */}
          {selectedEvent && selectedProfile && (
            <div className="bg-vista-secondary/20 border border-vista-secondary/30 rounded-lg p-4">
              <h3 className="text-vista-light font-medium mb-3">–°–≤–æ–¥–∫–∞</h3>
              <div className="space-y-2 text-sm text-vista-light/80">
                <div><strong>–ö–æ–º–∞–Ω–¥–∞:</strong> {teams.find(t => t.id === selectedTeam)?.name}</div>
                <div><strong>–°–æ–±—ã—Ç–∏–µ:</strong> {getEventName()}</div>
                <div><strong>–ü—Ä–æ—Ñ–∏–ª—å:</strong> {getProfileName()}</div>
                {file && <div><strong>–§–∞–π–ª:</strong> {file.name}</div>}
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button 
            variant="outline" 
            onClick={handleClose}
            className="border-vista-secondary/50 text-vista-light hover:bg-vista-secondary/20"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={!file || !selectedTeam || !eventType || !selectedEvent || !selectedProfile || isLoading}
            className="bg-vista-primary hover:bg-vista-primary/90 text-vista-dark"
          >
            {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>

    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ */}
    <PlayerMappingModal
      isOpen={showPlayerMapping}
      onClose={() => setShowPlayerMapping(false)}
      onConfirm={handlePlayerMappingConfirm}
      reportNames={playerNames}
      gpsSystem={profiles.find(p => p.id === selectedProfile)?.gpsSystem || ''}
      teamId={selectedTeam}
      clubId={session?.user?.clubId || ''}
      createdById={session?.user?.id || ''}
    />
    </>
  );
} 