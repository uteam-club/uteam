'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { Player } from '@/types/player';
import { GpsReport } from '@/types/gps';
import { GpsProfile } from '@/types/gps';
import { getPlayersByTeamId } from '@/lib/players-api';
import { getGpsProfileById } from '@/lib/gps-api';
import { createGpsPlayerMapping, deleteGpsPlayerMappings } from '@/lib/gps-api';

interface SmartPlayerMappingModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  gpsReport: GpsReport | null;
  teamId: string;
  onMappingComplete: () => void;
}

interface PlayerMatch {
  filePlayer: string;
  teamPlayer: Player | null;
  similarity: number;
  isManual: boolean;
  rowIndex: number;
}

interface SimilarityGroup {
  level: 'high' | 'medium' | 'low' | 'none';
  label: string;
  players: PlayerMatch[];
}

// –ê–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
function levenshteinDistance(str1: string, str2: string): number {
  const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
  
  for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
  for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
  
  for (let j = 1; j <= str2.length; j++) {
    for (let i = 1; i <= str1.length; i++) {
      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
      matrix[j][i] = Math.min(
        matrix[j][i - 1] + 1,     // deletion
        matrix[j - 1][i] + 1,     // insertion
        matrix[j - 1][i - 1] + indicator // substitution
      );
    }
  }
  
  return matrix[str2.length][str1.length];
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function normalizeString(str: string): string {
  return str
    .toLowerCase()
    .replace(/[—ë]/g, '–µ')
    .replace(/[–π]/g, '–∏')
    .replace(/[—ä—å]/g, '')
    .replace(/[^–∞-—èa-z0-9\s]/g, '')
    .trim();
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
function calculateSimilarity(str1: string, str2: string): number {
  const normalized1 = normalizeString(str1);
  const normalized2 = normalizeString(str2);
  
  if (normalized1 === normalized2) return 100;
  
  const distance = levenshteinDistance(normalized1, normalized2);
  const maxLength = Math.max(normalized1.length, normalized2.length);
  
  if (maxLength === 0) return 0;
  
  return Math.max(0, Math.round((1 - distance / maxLength) * 100));
}

// –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
function findBestMatch(
  filePlayerName: string, 
  teamPlayers: Player[], 
  alreadyMatched: Set<string> = new Set()
): { player: Player | null; similarity: number } {
  let bestMatch = null;
  let bestSimilarity = 0;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –∏–∑ —Ñ–∞–π–ª–∞
  const normalizedFile = filePlayerName.toLowerCase().trim();
  
  for (const teamPlayer of teamPlayers) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (alreadyMatched.has(teamPlayer.id)) {
      continue;
    }
    
    const fullName = `${teamPlayer.firstName} ${teamPlayer.lastName}`.trim();
    const normalizedTeam = fullName.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const similarities = [
      // –ü–æ–ª–Ω–æ–µ –∏–º—è
      calculateSimilarity(normalizedFile, normalizedTeam),
      // –¢–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è
      calculateSimilarity(normalizedFile, teamPlayer.lastName.toLowerCase()),
      // –¢–æ–ª—å–∫–æ –∏–º—è
      calculateSimilarity(normalizedFile, teamPlayer.firstName.toLowerCase()),
      // –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–∏–º—è —Ñ–∞–º–∏–ª–∏—è -> —Ñ–∞–º–∏–ª–∏—è –∏–º—è)
      calculateSimilarity(normalizedFile, `${teamPlayer.lastName} ${teamPlayer.firstName}`.toLowerCase()),
    ];
    
    const maxSimilarity = Math.max(...similarities);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let hasPartialMatch = false;
    const fileWords = normalizedFile.split(/\s+/);
    const teamWords = normalizedTeam.split(/\s+/);
    
    for (const fileWord of fileWords) {
      for (const teamWord of teamWords) {
        if (fileWord.length > 2 && teamWord.length > 2) {
          if (fileWord.includes(teamWord) || teamWord.includes(fileWord)) {
            hasPartialMatch = true;
            break;
          }
        }
      }
      if (hasPartialMatch) break;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
    const finalSimilarity = hasPartialMatch ? Math.max(maxSimilarity, 60) : maxSimilarity;
    
    if (finalSimilarity > bestSimilarity) {
      bestSimilarity = finalSimilarity;
      bestMatch = teamPlayer;
    }
  }
  
  return {
    player: bestSimilarity >= 50 ? bestMatch : null, // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 50%
    similarity: bestSimilarity
  };
}

export default function SmartPlayerMappingModal({
  open,
  onOpenChange,
  gpsReport,
  teamId,
  onMappingComplete
}: SmartPlayerMappingModalProps) {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [teamPlayers, setTeamPlayers] = useState<Player[]>([]);
  const [gpsProfile, setGpsProfile] = useState<GpsProfile | null>(null);
  const [filePlayers, setFilePlayers] = useState<string[]>([]);
  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);
  const [saving, setSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (open && gpsReport) {
      loadData();
    }
  }, [open, gpsReport, teamId]);

  const loadData = async () => {
    setLoading(true);
    try {
      console.log('üîç Loading data for GPS report:', gpsReport);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
      const players = await getPlayersByTeamId(teamId);
      console.log('üë• Loaded team players:', players.length);
      setTeamPlayers(players);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º GPS –ø—Ä–æ—Ñ–∏–ª—å
      let profile = null;
      if (gpsReport?.profileId) {
        profile = await getGpsProfileById(gpsReport.profileId);
        console.log('üìã Loaded GPS profile:', profile);
        setGpsProfile(profile);
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GPS —Ñ–∞–π–ª–∞
      if (gpsReport?.rawData && profile) {
        console.log('üìä Raw data available:', gpsReport.rawData);
        const names = await extractPlayerNamesFromFile(gpsReport.rawData, profile);
        console.log('üë§ Extracted player names:', names);
        setFilePlayers(names);

        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        const matches: PlayerMatch[] = [];
        const usedTeamPlayers = new Set<string>();
        
        for (let index = 0; index < names.length; index++) {
          const name = names[index];
          const { player, similarity } = findBestMatch(name, players, usedTeamPlayers);
          
          const match: PlayerMatch = {
            filePlayer: name,
            teamPlayer: player,
            similarity,
            isManual: false,
            rowIndex: index
          };
          
          // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –æ—Ç–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
          if (player) {
            usedTeamPlayers.add(player.id);
          }
          
          matches.push(match);
        }

        console.log('üéØ Created matches:', matches);
        setPlayerMatches(matches);
      } else {
        console.warn('‚ö†Ô∏è Missing data:', {
          hasRawData: !!gpsReport?.rawData,
          hasProfile: !!profile,
          profileId: gpsReport?.profileId
        });
      }
    } catch (error) {
      console.error('‚ùå Error loading data:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ GPS –ø—Ä–æ—Ñ–∏–ª—è
  const extractPlayerNamesFromFile = async (rawData: any, profile: GpsProfile): Promise<string[]> => {
    console.log('üîç Extracting names from raw data:', rawData);
    console.log('üìã Using profile:', profile);
    
    if (!rawData || !Array.isArray(rawData)) {
      console.warn('‚ö†Ô∏è Raw data is not an array:', rawData);
      return [];
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π –º–µ—Ç—Ä–∏–∫–µ "athlete_name"
    const nameColumn = await findNameColumn(rawData, profile);
    console.log('üìù Found name column:', nameColumn);
    
    if (!nameColumn) {
      console.warn('‚ö†Ô∏è No name column found');
      return [];
    }

    const names = rawData.map((row: any) => row[nameColumn] || '').filter((name: string) => name.trim());
    console.log('üë§ Extracted names:', names);
    
    return names;
  };

  // –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –≤ GPS –ø—Ä–æ—Ñ–∏–ª–µ
  const findNameColumn = async (rawData: any, profile: GpsProfile): Promise<string | null> => {
    console.log('üîç Finding name column for profile:', profile.id);
    
    if (!rawData || !Array.isArray(rawData) || rawData.length === 0) {
      console.warn('‚ö†Ô∏è Raw data is empty or not an array');
      return null;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      console.log('üì° Fetching column mappings...');
      const response = await fetch(`/api/gps/profiles/${profile.id}/mappings`);
      if (response.ok) {
        const mappings = await response.json();
        console.log('üìã Column mappings:', mappings);
        
        const nameMapping = mappings.find((mapping: any) => 
          mapping.canonicalMetric === 'athlete_name'
        );
        
        if (nameMapping) {
          console.log('‚úÖ Found name mapping:', nameMapping);
          return nameMapping.sourceColumn;
        } else {
          console.warn('‚ö†Ô∏è No athlete_name mapping found in profile');
        }
      } else {
        console.warn('‚ö†Ô∏è Failed to fetch column mappings:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Error fetching column mappings:', error);
    }
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É - –∏—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å "name", "player", "athlete"
    console.log('üîÑ Using fallback heuristic...');
    const sampleRow = rawData[0];
    console.log('üìä Sample row keys:', Object.keys(sampleRow));
    
    const possibleColumns = Object.keys(sampleRow).filter(key => 
      key.toLowerCase().includes('name') || 
      key.toLowerCase().includes('player') || 
      key.toLowerCase().includes('athlete')
    );

    console.log('üéØ Possible name columns:', possibleColumns);
    return possibleColumns.length > 0 ? possibleColumns[0] : null;
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ö–æ–¥—Å—Ç–≤–∞
  const similarityGroups = useMemo((): SimilarityGroup[] => {
    const groups: SimilarityGroup[] = [
      { level: 'high', label: '–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (80-100%)', players: [] },
      { level: 'medium', label: '–°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (60-79%)', players: [] },
      { level: 'low', label: '–ù–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (50-59%)', players: [] },
      { level: 'none', label: '–ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö', players: [] }
    ];

    playerMatches.forEach(match => {
      if (match.teamPlayer) {
        if (match.similarity >= 80) groups[0].players.push(match);
        else if (match.similarity >= 60) groups[1].players.push(match);
        else if (match.similarity >= 50) groups[2].players.push(match);
        else groups[3].players.push(match);
      } else {
        groups[3].players.push(match);
      }
    });

    return groups.filter(group => group.players.length > 0);
  }, [playerMatches]);

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const handlePlayerChange = (filePlayer: string, newPlayerId: string | null) => {
    setPlayerMatches(prev => prev.map(match => {
      if (match.filePlayer === filePlayer) {
        const teamPlayer = newPlayerId ? teamPlayers.find(p => p.id === newPlayerId) || null : null;
        return {
          ...match,
          teamPlayer,
          isManual: true,
          similarity: teamPlayer ? calculateSimilarity(filePlayer, `${teamPlayer.firstName} ${teamPlayer.lastName}`.trim()) : 0
        };
      }
      return match;
    }));
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
  const hasDuplicateMappings = useMemo(() => {
    const mappedPlayerIds = playerMatches
      .filter(match => match.teamPlayer)
      .map(match => match.teamPlayer!.id);
    
    return mappedPlayerIds.length !== new Set(mappedPlayerIds).size;
  }, [playerMatches]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
  const handleSave = async () => {
    if (hasDuplicateMappings) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ–ª—å–∑—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞.',
        variant: 'destructive',
      });
      return;
    }

    setSaving(true);
    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      if (gpsReport) {
        await deleteGpsPlayerMappings(gpsReport.id);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      const mappingsToSave = playerMatches.filter(match => match.teamPlayer);
      
      for (const mapping of mappingsToSave) {
        await createGpsPlayerMapping({
          gpsReportId: gpsReport!.id,
          playerId: mapping.teamPlayer!.id,
          rowIndex: mapping.rowIndex
        });
      }

      toast({
        title: '–£—Å–ø–µ—Ö',
        description: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${mappingsToSave.length} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤.`,
      });

      onMappingComplete();
      onOpenChange(false);
    } catch (error) {
      console.error('Error saving player mappings:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.',
        variant: 'destructive',
      });
    } finally {
      setSaving(false);
    }
  };

  const getSimilarityColor = (similarity: number) => {
    if (similarity >= 80) return 'bg-green-500/20 text-green-400 border-green-500/30';
    if (similarity >= 60) return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
    if (similarity >= 50) return 'bg-orange-500/20 text-orange-400 border-orange-500/30';
    return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
  };

  const getSimilarityBadge = (similarity: number) => {
    if (similarity >= 80) return 'bg-green-500/20 text-green-400';
    if (similarity >= 60) return 'bg-yellow-500/20 text-yellow-400';
    if (similarity >= 50) return 'bg-orange-500/20 text-orange-400';
    return 'bg-gray-500/20 text-gray-400';
  };

  if (loading) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="bg-vista-dark border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-4xl h-[85vh] flex flex-col p-0">
          <DialogHeader className="px-6 py-4 border-b border-vista-secondary/30">
            <DialogTitle className="text-vista-light text-xl">–ú–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</DialogTitle>
            <DialogDescription className="text-vista-light/60">
              –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
            </DialogDescription>
          </DialogHeader>
          <div className="flex-1 flex items-center justify-center">
            <div className="text-vista-light/60">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-vista-dark border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-4xl h-[85vh] flex flex-col p-0">
        <DialogHeader className="px-6 py-4 border-b border-vista-secondary/30">
          <DialogTitle className="text-vista-light text-xl">–ú–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</DialogTitle>
          <DialogDescription className="text-vista-light/60">
            –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GPS —Ñ–∞–π–ª–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
          </DialogDescription>
        </DialogHeader>

        <div className="flex-1 flex flex-col overflow-hidden">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="px-6 py-4 border-b border-vista-secondary/30">
            <div className="flex items-center justify-between">
              <div className="text-sm text-vista-light/60">
                –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ: {filePlayers.length}
              </div>
              <div className="text-sm text-vista-light/60">
                –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {playerMatches.filter(m => m.teamPlayer).length}
              </div>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
          <ScrollArea className="flex-1 px-6 py-4">
            <div className="space-y-6">
              {similarityGroups.map((group) => (
                <div key={group.level} className="space-y-3">
                  <h3 className={`text-sm font-medium ${
                    group.level === 'high' ? 'text-green-400' :
                    group.level === 'medium' ? 'text-yellow-400' :
                    group.level === 'low' ? 'text-orange-400' :
                    'text-gray-400'
                  }`}>
                    {group.label} ({group.players.length})
                  </h3>
                  
                  <div className="space-y-2">
                    {group.players.map((match, index) => (
                      <Card key={`${match.filePlayer}-${index}`} className={`${
                        group.level === 'none' ? 'opacity-50' : ''
                      } ${
                        match.teamPlayer ? getSimilarityColor(match.similarity) : 'bg-gray-500/10 border-gray-500/30'
                      }`}>
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="font-medium text-vista-light">
                                {match.filePlayer}
                              </div>
                              {match.teamPlayer && (
                                <div className="text-sm text-vista-light/60 mt-1">
                                  {match.teamPlayer.firstName} {match.teamPlayer.lastName}
                                  {match.teamPlayer.number && ` (#${match.teamPlayer.number})`}
                                </div>
                              )}
                            </div>
                            
                            <div className="flex items-center space-x-3">
                              {match.similarity > 0 && (
                                <Badge className={getSimilarityBadge(match.similarity)}>
                                  {match.similarity}%
                                </Badge>
                              )}
                              
                              {match.isManual && (
                                <Badge variant="outline" className="bg-blue-500/20 text-blue-400 border-blue-500/30">
                                  –í—ã–±—Ä–∞–Ω–æ –≤—Ä—É—á–Ω—É—é
                                </Badge>
                              )}
                              
                              <Select
                                value={match.teamPlayer?.id || 'none'}
                                onValueChange={(value) => handlePlayerChange(match.filePlayer, value === 'none' ? null : value)}
                              >
                                <SelectTrigger className="w-48 bg-vista-secondary/20 border-vista-secondary/30 text-vista-light">
                                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞" />
                                </SelectTrigger>
                                <SelectContent className="bg-vista-dark border-vista-secondary/30">
                                  <SelectItem value="none">–ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å</SelectItem>
                                  {teamPlayers.map((player) => (
                                    <SelectItem 
                                      key={player.id} 
                                      value={player.id}
                                      disabled={playerMatches.some(m => 
                                        m.teamPlayer?.id === player.id && m.filePlayer !== match.filePlayer
                                      )}
                                    >
                                      {player.firstName} {player.lastName}
                                      {player.number && ` (#${player.number})`}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>

        <DialogFooter className="px-6 py-4 border-t border-vista-secondary/30 gap-2">
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={saving}
            className="bg-transparent border-vista-secondary/30 text-vista-light hover:bg-vista-secondary/20"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleSave}
            disabled={saving || hasDuplicateMappings}
            className="bg-vista-primary hover:bg-vista-primary/80 text-white"
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
