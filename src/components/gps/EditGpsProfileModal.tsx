'use client';

import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Plus, Trash2, MoveUp, MoveDown, FileSpreadsheet, Upload, CheckCircle, AlertCircle, Info } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface EditGpsProfileModalProps {
  isOpen: boolean;
  profileId: string | null;
  onClose: () => void;
  onUpdated: () => void;
}

interface Column {
  id: string;
  name: string;
  mappedColumn?: string;
  order: number;
  type: 'column' | 'formula';
  formula?: {
    operation: string;
    operand1: string;
    operand2: string;
  };
  displayName?: string;
  dataType?: string;
  isVisible?: boolean;
}

interface ValidationError {
  field: string;
  message: string;
}

interface GpsProfile {
  id: string;
  name: string;
  description: string;
  gpsSystem: string;
  columnMapping: Column[];
  isDefault: boolean;
  isActive: boolean;
}

export default function EditGpsProfileModal({ isOpen, profileId, onClose, onUpdated }: EditGpsProfileModalProps) {
  const { toast } = useToast();
  
  const [profile, setProfile] = useState<GpsProfile | null>(null);
  const [profileName, setProfileName] = useState('');
  const [columns, setColumns] = useState<Column[]>([]);
  const [excelHeaders, setExcelHeaders] = useState<string[]>([]);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingProfile, setIsLoadingProfile] = useState(false);
  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && profileId) {
      fetchProfile();
    }
  }, [isOpen, profileId]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏)
  const validateForm = (): ValidationError[] => {
    const errors: ValidationError[] = [];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if (!profileName.trim()) {
      errors.push({ field: 'name', message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    } else if (profileName.trim().length < 3) {
      errors.push({ field: 'name', message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
    if (columns.length === 0) {
      errors.push({ field: 'columns', message: '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É' });
    } else {
      columns.forEach((column, index) => {
        if (!column.name.trim()) {
          errors.push({ field: `column-${index}-name`, message: `–ö–æ–ª–æ–Ω–∫–∞ #${index + 1}: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ` });
        }
        
        if (!column.mappedColumn?.trim()) {
          errors.push({ field: `column-${index}-mapped`, message: `–ö–æ–ª–æ–Ω–∫–∞ "${column.name}": –º–∞–ø–ø–∏–Ω–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω` });
        }
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è mappedColumn
      const mappedColumns = columns.map(col => col.mappedColumn).filter(Boolean);
      const duplicates = mappedColumns.filter((item, index) => mappedColumns.indexOf(item) !== index);
      if (duplicates.length > 0) {
        errors.push({ 
          field: 'columns', 
          message: `–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ–ª–æ–Ω–æ–∫: ${duplicates.join(', ')}` 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const columnNames = columns.map(col => col.name);
      const requiredFields = ['Player', 'Time', 'TD'];
      const missingRequired = requiredFields.filter(field => !columnNames.includes(field));
      
      if (missingRequired.length > 0) {
        errors.push({ 
          field: 'required', 
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingRequired.join(', ')}` 
        });
      }
    }

    return errors;
  };

  const fetchProfile = async () => {
    if (!profileId) return;
    
    try {
      setIsLoadingProfile(true);
      const response = await fetch(`/api/gps-profiles/${profileId}`);
      if (response.ok) {
        const profileData = await response.json();
        setProfile(profileData);
        setProfileName(profileData.name);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º columnMapping —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        let columnMapping = profileData.columnMapping || [];
        
        // –ï—Å–ª–∏ columnMapping - —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if (typeof columnMapping === 'string') {
          try {
            columnMapping = JSON.parse(columnMapping);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ columnMapping:', e);
            columnMapping = [];
          }
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (Array.isArray(columnMapping)) {
          const processedColumns = columnMapping.map((col, index) => ({
            ...col,
            id: col.id || `col-${Date.now()}-${index}`,
            order: col.order !== undefined ? col.order : index
          }));
          setColumns(processedColumns);
        } else {
          console.error('columnMapping –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', columnMapping);
          setColumns([]);
        }
        
        setValidationErrors([]); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        variant: "destructive"
      });
    } finally {
      setIsLoadingProfile(false);
    }
  };

  const addColumn = () => {
    const newColumn: Column = {
      id: `col-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: '',
      mappedColumn: '',
      order: columns.length,
      type: 'column'
    };
    setColumns([...columns, newColumn]);
    setValidationErrors([]); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
  };

  const removeColumn = (id: string) => {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', id);
    console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', columns);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const columnToRemove = columns.find(col => col.id === id);
    if (!columnToRemove) {
      console.error('‚ùå –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', id);
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const updatedColumns = columns
      .filter(col => col.id !== id)
      .map((col, index) => ({
        ...col,
        order: index
      }));
    
    console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', updatedColumns);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (updatedColumns.length === 0) {
      console.log('‚ö†Ô∏è  –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    }
    
    setColumns(updatedColumns);
    setValidationErrors([]); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
  };

  const moveColumn = (id: string, direction: 'up' | 'down') => {
    const index = columns.findIndex(col => col.id === id);
    if (index === -1) return;

    const newColumns = [...columns];
    if (direction === 'up' && index > 0) {
      [newColumns[index], newColumns[index - 1]] = [newColumns[index - 1], newColumns[index]];
    } else if (direction === 'down' && index < newColumns.length - 1) {
      [newColumns[index], newColumns[index + 1]] = [newColumns[index + 1], newColumns[index]];
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    newColumns.forEach((col, idx) => {
      col.order = idx;
    });

    setColumns(newColumns);
  };

  const updateColumn = (id: string, field: keyof Column, value: any) => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', { id, field, value });
    
    const updatedColumns = columns.map(col => 
      col.id === id ? { ...col, [field]: value } : col
    );
    
    console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedColumns);
    
    setColumns(updatedColumns);
    setValidationErrors([]); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
  };

  const handleFileUpload = async (file: File) => {
    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/gps-profiles/parse-excel', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞');
      }

      const data = await response.json();
      setExcelHeaders(data.headers || []);
      setUploadedFile(file);

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª",
        variant: "destructive"
      });
    }
  };

  const handleSave = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    const errors = validateForm();
    setValidationErrors(errors);

    if (errors.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
      const firstError = errors[0];
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: firstError.message,
        variant: "destructive"
      });
      return;
    }

    if (!profileId || !profileName.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsLoading(true);

      const requestData = {
        name: profileName,
        columnMapping: columns.map(col => ({
          name: col.name,
          mappedColumn: col.mappedColumn,
          order: col.order,
          type: col.type,
          displayName: col.displayName || col.name,
          dataType: col.dataType || 'string',
          isVisible: col.isVisible !== undefined ? col.isVisible : true,
          formula: col.formula
        })),
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', requestData);

      const response = await fetch(`/api/gps-profiles/${profileId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();
      console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        ok: response.ok,
        data: data
      });

      if (!response.ok) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (data.details && Array.isArray(data.details)) {
          const serverErrors: ValidationError[] = data.details.map((error: string, index: number) => ({
            field: `server-error-${index}`,
            message: error
          }));
          setValidationErrors(serverErrors);
          
          toast({
            title: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            description: data.details[0],
            variant: "destructive"
          });
        } else {
          throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
        return;
      }

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: data.message || "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
      });

      onUpdated();
      onClose();
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getFieldError = (field: string): string | undefined => {
    return validationErrors.find(error => error.field === field)?.message;
  };

  const resetForm = () => {
    setProfile(null);
    setProfileName('');
    setColumns([]);
    setExcelHeaders([]);
    setUploadedFile(null);
    setValidationErrors([]);
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  if (isLoadingProfile) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="bg-vista-dark/95 border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-4xl max-h-[90vh] overflow-y-auto backdrop-blur-xl">
          <div className="text-center py-8 text-vista-light/60">
            –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="bg-vista-dark/95 border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-4xl max-h-[90vh] overflow-y-auto backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle className="text-vista-light text-xl">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å GPS –æ—Ç—á–µ—Ç–∞</DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
          <Alert className="bg-blue-900/20 border-blue-500/30">
            <Info className="h-4 w-4 text-blue-400" />
            <AlertDescription className="text-blue-200">
              –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: Player, Time, TD. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞.
              {excelHeaders.length === 0 && (
                <span className="block mt-2">
                  üí° <strong>–°–æ–≤–µ—Ç:</strong> –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å GPS –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
                </span>
              )}
            </AlertDescription>
          </Alert>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-2">
            <Label htmlFor="profileName" className="text-vista-light">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</Label>
            <Input
              id="profileName"
              value={profileName}
              onChange={(e) => setProfileName(e.target.value)}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
              className={`bg-vista-dark/70 border-vista-primary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50 ${
                getFieldError('name') ? 'border-red-500' : ''
              }`}
            />
            {getFieldError('name') && (
              <p className="text-red-400 text-sm flex items-center">
                <AlertCircle className="w-4 h-4 mr-1" />
                {getFieldError('name')}
              </p>
            )}
          </div>

          {/* –°—Ç–æ–ª–±—Ü—ã */}
          <Card className="bg-vista-dark/30 border-vista-secondary/30">
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-vista-light">
                –°—Ç–æ–ª–±—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
                <Button 
                  onClick={addColumn} 
                  size="sm"
                  className="bg-vista-primary hover:bg-vista-primary/90 text-vista-dark"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {process.env.NODE_ENV === 'development' && (
                  <div className="text-xs text-vista-light/50 p-2 bg-vista-dark/20 rounded">
                    –û—Ç–ª–∞–¥–∫–∞: {columns.length} –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                  </div>
                )}
                
                {/* –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ */}
                {!Array.isArray(columns) && (
                  <div className="text-red-400 text-sm p-2 bg-red-900/20 rounded">
                    ‚ö†Ô∏è –û—à–∏–±–∫–∞: columns –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
                  </div>
                )}
                
                {Array.isArray(columns) && columns.map((column, index) => {
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
                  if (!column || typeof column !== 'object') {
                    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞:', column);
                    return null;
                  }
                  
                  return (
                    <div key={column.id || `temp-${index}`} className="flex items-center gap-4 p-4 border border-vista-secondary/30 rounded-lg bg-vista-dark/20">
                      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏ */}
                      {process.env.NODE_ENV === 'development' && (
                        <div className="text-xs text-vista-light/30 absolute top-1 right-1">
                          ID: {column.id}, Order: {column.order}
                        </div>
                      )}
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */}
                    <div className="flex flex-col gap-1">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => moveColumn(column.id, 'up')}
                        disabled={index === 0}
                        className="border-vista-secondary/50 text-vista-light hover:bg-vista-secondary/20"
                      >
                        <MoveUp className="w-3 h-3" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => moveColumn(column.id, 'down')}
                        disabled={index === columns.length - 1}
                        className="border-vista-secondary/50 text-vista-light hover:bg-vista-secondary/20"
                      >
                        <MoveDown className="w-3 h-3" />
                      </Button>
                    </div>

                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ */}
                    <div className="flex-1">
                      <Label className="text-vista-light/40 font-normal">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞</Label>
                      <Input
                        value={column.name}
                        onChange={(e) => updateColumn(column.id, 'name', e.target.value)}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í—Ä–µ–º—è, –î–∏—Å—Ç–∞–Ω—Ü–∏—è"
                        className={`bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50 ${
                          getFieldError(`column-${index}-name`) ? 'border-red-500' : ''
                        }`}
                      />
                      {getFieldError(`column-${index}-name`) && (
                        <p className="text-red-400 text-sm flex items-center">
                          <AlertCircle className="w-4 h-4 mr-1" />
                          {getFieldError(`column-${index}-name`)}
                        </p>
                      )}
                    </div>

                    {/* –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ */}
                    <div className="w-48">
                      <Label className="text-vista-light/40 font-normal">–¢–∏–ø</Label>
                      <Select
                        value={column.type}
                        onValueChange={(value) => updateColumn(column.id, 'type', value)}
                      >
                        <SelectTrigger className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                          <SelectItem value="column">–°—Ç–æ–ª–±–µ—Ü –∏–∑ —Ñ–∞–π–ª–∞</SelectItem>
                          <SelectItem value="formula">–°–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    {/* –ú–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∞ */}
                    {column.type === 'column' && (
                      <div className="w-48">
                        <Label className="text-vista-light/40 font-normal">
                          {excelHeaders.length > 0 ? '–°—Ç–æ–ª–±–µ—Ü –∏–∑ —Ñ–∞–π–ª–∞' : '–ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏'}
                        </Label>
                        
                        {excelHeaders.length > 0 ? (
                          // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
                          <Select
                            value={column.mappedColumn || undefined}
                            onValueChange={(value) => updateColumn(column.id, 'mappedColumn', value)}
                          >
                            <SelectTrigger className={`bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50 ${
                              getFieldError(`column-${index}-mapped`) ? 'border-red-500' : ''
                            }`}>
                              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü" />
                            </SelectTrigger>
                            <SelectContent className="bg-vista-dark border-vista-secondary/50 text-vista-light shadow-lg">
                              {excelHeaders.map((header: string) => (
                                <SelectItem key={header} value={header}>
                                  {header}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        ) : (
                          // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                          <div className="space-y-2">
                            <Input
                              value={column.mappedColumn || ''}
                              onChange={(e) => updateColumn(column.id, 'mappedColumn', e.target.value)}
                              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Player, Time, TD –∏–ª–∏ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
                              className={`bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50 ${
                                getFieldError(`column-${index}-mapped`) ? 'border-red-500' : ''
                              }`}
                            />
                            <p className="text-xs text-vista-light/50">
                              üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
                            </p>
                          </div>
                        )}
                        
                        {getFieldError(`column-${index}-mapped`) && (
                          <p className="text-red-400 text-sm flex items-center mt-1">
                            <AlertCircle className="w-3 h-3 mr-1" />
                            {getFieldError(`column-${index}-mapped`)}
                          </p>
                        )}
                      </div>
                    )}

                    {column.type === 'formula' && (
                      <div className="w-48">
                        <Label className="text-vista-light/40 font-normal">–§–æ—Ä–º—É–ª–∞</Label>
                        <Input
                          value={column.formula?.operation || ''}
                          onChange={(e) => updateColumn(column.id, 'formula', { 
                            operation: e.target.value, 
                            operand1: '', 
                            operand2: '' 
                          })}
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: +, -, *, /"
                          className="bg-vista-dark border-vista-secondary/50 text-vista-light focus:border-vista-primary focus:ring-1 focus:ring-vista-primary/50"
                        />
                      </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeColumn(column.id)}
                      className="border-red-500/50 text-red-400 hover:bg-red-500/20"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                );
              })}

                {columns.length === 0 && (
                  <div className="text-center py-8 text-vista-light/60">
                    <FileSpreadsheet className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</p>
                    <p className="text-sm">–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          {getFieldError('columns') && (
            <Alert className="bg-red-900/20 border-red-500/30">
              <AlertCircle className="h-4 w-4 text-red-400" />
              <AlertDescription className="text-red-200">
                {getFieldError('columns')}
              </AlertDescription>
            </Alert>
          )}

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
          <Card className="bg-vista-dark/30 border-vista-secondary/30">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-vista-light">
                <FileSpreadsheet className="w-5 h-5" />
                –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {excelHeaders.length === 0 ? (
                  // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                  <div className="border-2 border-dashed border-vista-secondary/30 rounded-lg p-6 text-center hover:border-vista-primary/50 transition-colors">
                    <Upload className="w-8 h-8 mx-auto mb-4 text-vista-light/40" />
                    <p className="text-vista-light/60 mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å GPS –¥–∞–Ω–Ω—ã–º–∏</p>
                    <p className="text-sm text-vista-light/40 mb-4">
                      –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                    </p>
                    <input
                      type="file"
                      accept=".xlsx,.xls,.csv"
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) handleFileUpload(file);
                      }}
                      className="hidden"
                      id="file-upload"
                    />
                    <label
                      htmlFor="file-upload"
                      className="cursor-pointer bg-vista-primary hover:bg-vista-primary/90 text-vista-dark px-4 py-2 rounded-lg inline-block"
                    >
                      –í—ã–±—Ä–∞—Ç—å Excel —Ñ–∞–π–ª
                    </label>
                  </div>
                ) : (
                  // –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
                  <div className="border border-vista-primary/30 rounded-lg p-4 bg-vista-primary/10">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <CheckCircle className="w-5 h-5 text-green-400" />
                        <div>
                          <p className="text-vista-light font-medium">
                            {uploadedFile?.name || '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'}
                          </p>
                          <p className="text-sm text-vista-light/60">
                            –ù–∞–π–¥–µ–Ω–æ {excelHeaders.length} –∫–æ–ª–æ–Ω–æ–∫
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setExcelHeaders([]);
                          setUploadedFile(null);
                        }}
                        className="border-vista-secondary/50 text-vista-light hover:bg-vista-secondary/20"
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end gap-4">
            <Button 
              variant="outline" 
              onClick={handleClose}
              className="border-vista-secondary/50 text-vista-light hover:bg-vista-secondary/20"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleSave} 
              disabled={isLoading}
              className="bg-vista-primary hover:bg-vista-primary/90 text-vista-dark"
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
} 