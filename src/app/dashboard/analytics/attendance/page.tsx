'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow as UITableRow,
} from "@/components/ui/table";
import { 
  CalendarIcon, 
  UsersIcon, 
  UserCheckIcon, 
  ListFilterIcon,
  ChevronDownIcon
} from 'lucide-react';
import { format, isValid, parseISO, subMonths, eachDayOfInterval, addDays, isSameDay } from 'date-fns';
import { ru } from 'date-fns/locale';
import { enUS } from 'date-fns/locale/en-US';
import { useTranslation } from 'react-i18next';
import type { SupportedLang } from '@/types/i18n';

interface Team {
  id: string;
  name: string;
}

interface Training {
  id: string;
  title: string;
  date: string;
  teamId: string;
  time: string;
  type: 'TRAINING' | 'GYM';
}

interface AttendanceData {
  id?: string;
  status: 'TRAINED' | 'REHAB' | 'SICK' | 'EDUCATION' | 'INJURY' | 'NATIONAL_TEAM' | 'OTHER_TEAM' | 'OTHER';
  comment?: string;
}

interface PlayerAttendance {
  id: string;
  firstName: string;
  lastName: string;
  imageUrl?: string | null;
  attendance: AttendanceData;
}

interface PlayerWithAttendance {
  id: string;
  firstName: string;
  lastName: string;
  imageUrl?: string | null;
  attendanceRecords: {
    [trainingId: string]: AttendanceData;
  };
  stats: {
    total: number;
    trained: number;
    rehab: number;
    sick: number;
    education: number;
    other: number;
    trainingPercentage: number;
  };
}

// –°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
const attendanceStatuses = {
  'TRAINED': { name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è', color: 'bg-green-500', textColor: 'text-green-300', badgeColor: 'bg-green-500/20 text-green-300 border-green-500/30' },
  'REHAB': { name: '–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è', color: 'bg-blue-500', textColor: 'text-blue-300', badgeColor: 'bg-blue-500/20 text-blue-300 border-blue-500/30' },
  'SICK': { name: '–ë–æ–ª–µ–µ—Ç', color: 'bg-yellow-500', textColor: 'text-yellow-300', badgeColor: 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' },
  'EDUCATION': { name: '–£—á–µ–±–∞', color: 'bg-purple-500', textColor: 'text-purple-300', badgeColor: 'bg-purple-500/20 text-purple-300 border-purple-500/30' },
  'INJURY': { name: '–¢—Ä–∞–≤–º–∞', color: 'bg-red-500', textColor: 'text-red-300', badgeColor: 'bg-red-500/20 text-red-300 border-red-500/30' },
  'NATIONAL_TEAM': { name: '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–Ω–∞—è', color: 'bg-indigo-500', textColor: 'text-indigo-300', badgeColor: 'bg-indigo-500/20 text-indigo-300 border-indigo-500/30' },
  'OTHER_TEAM': { name: '–î—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞', color: 'bg-orange-500', textColor: 'text-orange-300', badgeColor: 'bg-orange-500/20 text-orange-300 border-orange-500/30' },
  'OTHER': { name: '–î—Ä—É–≥–æ–µ', color: 'bg-gray-500', textColor: 'text-gray-300', badgeColor: 'bg-gray-500/20 text-gray-300 border-gray-500/30' },
};

export default function AttendanceAnalyticsPage() {
  const { t, i18n } = useTranslation();
  const { data: session } = useSession();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
  const [teams, setTeams] = useState<Team[]>([]);
  const [selectedTeamId, setSelectedTeamId] = useState<string>('');
  const [isLoadingTeams, setIsLoadingTeams] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
  const [startDate, setStartDate] = useState<string>(format(subMonths(new Date(), 1), 'yyyy-MM-dd'));
  const [endDate, setEndDate] = useState<string>(format(new Date(), 'yyyy-MM-dd'));
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  const [trainings, setTrainings] = useState<Training[]>([]);
  const [isLoadingTrainings, setIsLoadingTrainings] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
  const [playersWithAttendance, setPlayersWithAttendance] = useState<PlayerWithAttendance[]>([]);
  const [isLoadingAttendance, setIsLoadingAttendance] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [quickFilter, setQuickFilter] = useState<'week' | 'month' | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [stats, setStats] = useState({
    totalTrainings: 0,
    playersCount: 0,
    totalAttendance: 0,
    averageAttendance: 0,
    gymCount: 0,
    matchesCount: 0,
  });
  

  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (session?.user) {
      fetchTeams();
    }
  }, [session]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
  useEffect(() => {
    if (selectedTeamId && startDate && endDate) {
      fetchTrainings();
    }
  }, [selectedTeamId, startDate, endDate]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
  const fetchTeams = async () => {
    try {
      setIsLoadingTeams(true);
      const response = await fetch('/api/teams');
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
      }
      const data = await response.json();
      setTeams(data);
      if (data.length > 0) {
        setSelectedTeamId(data[0].id);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥:', error);
    } finally {
      setIsLoadingTeams(false);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const fetchTrainings = async () => {
    try {
      setIsLoadingTrainings(true);
      setPlayersWithAttendance([]);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const fromDate = startDate;
      const toDate = endDate;
      
      const response = await fetch(`/api/trainings?teamId=${selectedTeamId}&fromDate=${fromDate}&toDate=${toDate}`);
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
      }
      const data = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç API:', data);
      console.log('üîç –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:', data[0]);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
      const sortedTrainings = data.sort((a: any, b: any) => {
        return new Date(a.date).getTime() - new Date(b.date).getTime();
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const formattedTrainings: Training[] = sortedTrainings.map((item: any) => {
        const trainingType = (item.type || 'TRAINING').toUpperCase();
        console.log(`üîç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${item.id}: type="${item.type}" -> "${trainingType}"`);
        
        return {
          id: item.id,
          title: item.name || item.title, // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'name', –Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–∂–∏–¥–∞–µ—Ç 'title'
          date: item.date,
          teamId: item.teamId,
          time: item.time,
          type: trainingType
        };
      });
      
      console.log('üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', formattedTrainings);
      
      setTrainings(formattedTrainings);
      
      if (formattedTrainings.length > 0) {
        fetchAttendanceForAllTrainings(formattedTrainings);
      } else {
        setStats({
          totalTrainings: 0,
          playersCount: 0,
          totalAttendance: 0,
          averageAttendance: 0,
          gymCount: 0,
          matchesCount: 0,
        });
        setIsLoadingTrainings(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
      setIsLoadingTrainings(false);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  const fetchAttendanceForAllTrainings = async (trainings: Training[]) => {
    try {
      setIsLoadingAttendance(true);
      
      // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
      const playersMap: Record<string, {
        id: string;
        firstName: string;
        lastName: string;
        imageUrl?: string | null;
        attendanceRecords: Record<string, AttendanceData>;
      }> = {};
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      await Promise.all(trainings.map(async (training) => {
        try {
          const response = await fetch(`/api/trainings/${training.id}/attendance`);
          if (!response.ok) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${training.id}`);
            return;
          }
          
          const attendanceData = await response.json();
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          attendanceData.forEach((playerData: PlayerAttendance) => {
            if (!playersMap[playerData.id]) {
              // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
              playersMap[playerData.id] = {
                id: playerData.id,
                firstName: playerData.firstName,
                lastName: playerData.lastName,
                imageUrl: playerData.imageUrl,
                attendanceRecords: {},
              };
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (playerData.attendance) {
              if (!playersMap[playerData.id].attendanceRecords) {
                playersMap[playerData.id].attendanceRecords = {};
              }
              playersMap[playerData.id].attendanceRecords[training.id] = playerData.attendance;
            }
          });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${training.id}:`, error);
        }
      }));
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const playersWithStats = Object.values(playersMap).map(player => {
        // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (–≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + –∑–∞–ª + –º–∞—Ç—á–∏)
        const regularTrainings = trainings.filter(t => t.type.toUpperCase() === 'TRAINING');
        const gymTrainings = trainings.filter(t => t.type.toUpperCase() === 'GYM');
        const totalActivities = regularTrainings.length + gymTrainings.length; // –ü–æ–∫–∞ –±–µ–∑ –º–∞—Ç—á–µ–π
        
        const stats = {
          total: totalActivities, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
          trained: 0,
          rehab: 0,
          sick: 0,
          education: 0,
          other: 0,
          trainingPercentage: 0
        };
        
        console.log('üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞:', { 
          playerId: player.id, 
          regularTrainingsCount: regularTrainings.length,
          gymTrainingsCount: gymTrainings.length,
          totalActivitiesCount: totalActivities
        });
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        trainings.forEach(training => {
          const attendance = player.attendanceRecords?.[training.id];
          if (attendance && attendance.status) {
            switch (attendance.status) {
              case 'TRAINED':
                stats.trained++;
                break;
              case 'REHAB':
                stats.rehab++;
                break;
              case 'SICK':
                stats.sick++;
                break;
              case 'EDUCATION':
                stats.education++;
                break;
              case 'OTHER':
                stats.other++;
                break;
            }
          }
          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ—Ç, –∏–≥—Ä–æ–∫ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º)
        stats.trainingPercentage = stats.total > 0 
          ? Math.round((stats.trained / stats.total) * 100) 
          : 0;
        
        return {
          ...player,
          stats
        };
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
      const sortedPlayers = playersWithStats.sort((a, b) => {
        const nameA = `${a.lastName} ${a.firstName}`;
        const nameB = `${b.lastName} ${b.firstName}`;
        return nameA.localeCompare(nameB);
      });
      
      setPlayersWithAttendance(sortedPlayers);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log('üîç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', trainings);
      console.log('üîç –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', trainings.map(t => ({ id: t.id, type: t.type, title: t.title })));
      
      const totalTrainings = trainings.filter(t => t.type.toUpperCase() === 'TRAINING').length;
      const gymCount = trainings.filter(t => t.type.toUpperCase() === 'GYM').length;
      const totalActivities = totalTrainings + gymCount; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
      
      console.log('üìä –ü–æ–¥—Å—á–µ—Ç:', { totalTrainings, gymCount, totalActivities, total: trainings.length });
      
      const playersCount = sortedPlayers.length;
      const totalAttendance = sortedPlayers.reduce((total, player) => total + (player.stats?.trained || 0), 0);
      const averageAttendance = playersCount > 0 && totalActivities > 0
        ? Math.round((totalAttendance / (playersCount * totalActivities)) * 100) 
        : 0;
      
      setStats({
        totalTrainings,
        playersCount,
        totalAttendance,
        averageAttendance,
        gymCount,
        matchesCount: 0, // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –º–∞—Ç—á–µ–π
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
    } finally {
      setIsLoadingTrainings(false);
      setIsLoadingAttendance(false);
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const formatTrainingDate = (dateString: string) => {
    try {
      const date = parseISO(dateString);
      return isValid(date) 
        ? format(date, 'd MMMM yyyy', { locale: ru }) 
        : '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    } catch (error) {
      return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const formatDateRange = () => {
    if (!startDate || !endDate) {
      return t('attendancePage.select_dates');
    }
    const lang: SupportedLang = i18n.language === 'en' ? 'en' : 'ru';
    const locale = getDateFnsLocale(lang);
    const fromFormatted = format(parseISO(startDate), 'd MMMM yyyy', { locale });
    const toFormatted = format(parseISO(endDate), 'd MMMM yyyy', { locale });
    return t('attendancePage.date_range', { from: fromFormatted, to: toFormatted });
  };
  

  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
  const renderAttendanceStatus = (status: string | undefined) => {
    if (!status || !attendanceStatuses[status as keyof typeof attendanceStatuses]) {
      return <div className="w-3 h-3 bg-gray-400 rounded-full"></div>;
    }
    
    const statusInfo = attendanceStatuses[status as keyof typeof attendanceStatuses];
    return (
      <div className="flex items-center">
        <div className={`w-3 h-3 ${statusInfo.color} rounded-full`}></div>
        <span className={`text-xs ml-1 ${statusInfo.textColor}`}>
          {statusInfo.name}
        </span>
      </div>
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—á—Ç–æ–±—ã –≤—ã–¥–µ–ª—è—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ)
  const getTrainingColumnClass = (trainingDate: string) => {
    try {
      const date = parseISO(trainingDate);
      const dayOfWeek = date.getDay();
      // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞
      if (dayOfWeek === 0 || dayOfWeek === 6) {
        return 'bg-vista-dark/40';
      }
      return '';
    } catch {
      return '';
    }
  };

  const getDateFnsLocale = (lang: SupportedLang) => lang === 'en' ? enUS : ru;

  return (
    <div className="space-y-6">
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */}
      {trainings.length > 0 && playersWithAttendance.length > 0 && !isLoadingAttendance && (
        <Card className="bg-vista-dark/50 border border-vista-secondary/30 shadow-md">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle className="text-vista-light">
              {t('attendancePage.stats_title', { team: teams.find(t => t.id === selectedTeamId)?.name || '' })}
            </CardTitle>
            <div className="w-[200px] h-9"></div> {/* –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
          </CardHeader>
          <CardContent>
            {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º */}
            <div className="mb-6 space-y-4">
              <div className="flex flex-col sm:flex-row gap-3">
                {/* –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã */}
                <Select
                  value={selectedTeamId}
                  onValueChange={setSelectedTeamId}
                  disabled={isLoadingTeams}
                >
                  <SelectTrigger className="w-full sm:w-[200px] bg-vista-dark/30 backdrop-blur-sm border-vista-light/20 text-vista-light/60 hover:bg-vista-light/10 hover:border-vista-light/40 focus:border-vista-light/50 focus:ring-1 focus:ring-vista-light/30 h-9 px-3 font-normal shadow-lg">
                    <SelectValue placeholder={t('attendancePage.select_team')} />
                  </SelectTrigger>
                  <SelectContent className="bg-vista-dark border border-vista-light/20 text-vista-light shadow-2xl rounded-lg">
                    {teams.map(team => (
                      <SelectItem key={team.id} value={team.id}>
                        {team.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                
                {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º */}
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    onClick={() => {
                      const now = new Date();
                      const startOfWeek = new Date(now);
                      startOfWeek.setDate(now.getDate() - now.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                      startOfWeek.setHours(0, 0, 0, 0);
                      const endOfWeek = new Date(startOfWeek);
                      endOfWeek.setDate(startOfWeek.getDate() + 6); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                      endOfWeek.setHours(23, 59, 59, 999);
                      
                      setStartDate(format(startOfWeek, 'yyyy-MM-dd'));
                      setEndDate(format(endOfWeek, 'yyyy-MM-dd'));
                      setQuickFilter('week');
                    }}
                    className={`h-9 px-3 text-sm font-normal bg-vista-dark/30 border-vista-light/20 text-vista-light/60 hover:bg-vista-light/10 hover:border-vista-light/40 focus:border-vista-light/50 focus:ring-1 focus:ring-vista-light/30 ${
                      quickFilter === 'week' ? 'bg-vista-primary/20 border-vista-primary/40 text-vista-primary' : ''
                    }`}
                  >
                    {t('attendancePage.current_week')}
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      const now = new Date();
                      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
                      const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
                      endOfMonth.setHours(23, 59, 59, 999);
                      
                      setStartDate(format(startOfMonth, 'yyyy-MM-dd'));
                      setEndDate(format(endOfMonth, 'yyyy-MM-dd'));
                      setQuickFilter('month');
                    }}
                    className={`h-9 px-3 text-sm font-normal bg-vista-dark/30 border-vista-light/20 text-vista-light/60 hover:bg-vista-light/10 hover:border-vista-light/40 focus:border-vista-light/50 focus:ring-1 focus:ring-vista-light/30 ${
                      quickFilter === 'month' ? 'bg-vista-primary/20 border-vista-primary/40 text-vista-primary' : ''
                    }`}
                  >
                    {t('attendancePage.current_month')}
                  </Button>
                </div>
                
                {/* –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç */}
                <div className="flex items-center gap-2">
                  <div className="relative w-full sm:w-[150px]">
                    <div 
                      className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-vista-light/50 cursor-pointer z-10"
                      onClick={() => {
                        const dateInput = document.getElementById('attendance-start-date') as HTMLInputElement;
                        if (dateInput) {
                          try {
                            dateInput.showPicker();
                          } catch (error) {
                            console.error('Failed to show date picker:', error);
                          }
                        }
                      }}
                    >
                      <CalendarIcon size={16} />
                    </div>
                    <Input
                      id="attendance-start-date"
                      type="date"
                      value={startDate}
                      onChange={e => {
                        setStartDate(e.target.value);
                        setQuickFilter(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                      }}
                      className="pl-10 bg-vista-dark/30 border-vista-light/20 text-vista-light/60 hover:bg-vista-light/10 hover:border-vista-light/40 focus:border-vista-light/50 focus:ring-1 focus:ring-vista-light/30 h-9 font-normal shadow-lg cursor-pointer [&::-webkit-calendar-picker-indicator]:hidden"
                      placeholder="–°"
                      onClick={(e) => {
                        try {
                          (e.target as HTMLInputElement).showPicker();
                        } catch (error) {
                          console.error('Failed to show date picker:', error);
                        }
                      }}
                    />
                  </div>
                  <span className="text-vista-light/70">‚Äî</span>
                  <div className="relative w-full sm:w-[150px]">
                    <div 
                      className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-vista-light/50 cursor-pointer z-10"
                      onClick={() => {
                        const dateInput = document.getElementById('attendance-end-date') as HTMLInputElement;
                        if (dateInput) {
                          try {
                            dateInput.showPicker();
                          } catch (error) {
                            console.error('Failed to show date picker:', error);
                          }
                        }
                      }}
                    >
                      <CalendarIcon size={16} />
                    </div>
                    <Input
                      id="attendance-end-date"
                      type="date"
                      value={endDate}
                      onChange={e => {
                        setEndDate(e.target.value);
                        setQuickFilter(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                      }}
                      className="pl-10 bg-vista-dark/30 border-vista-light/20 text-vista-light/60 hover:bg-vista-light/10 hover:border-vista-light/40 focus:border-vista-light/50 focus:ring-1 focus:ring-vista-light/30 h-9 font-normal shadow-lg cursor-pointer [&::-webkit-calendar-picker-indicator]:hidden"
                      placeholder="–ü–æ"
                      onClick={(e) => {
                        try {
                          (e.target as HTMLInputElement).showPicker();
                        } catch (error) {
                          console.error('Failed to show date picker:', error);
                        }
                      }}
                    />
                  </div>
                </div>
                

              </div>
            </div>
            {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-3 mb-6">
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.players')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.playersCount}</span>
                </div>
              </div>
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.total_sessions')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.totalTrainings + stats.gymCount + stats.matchesCount}</span>
                </div>
              </div>
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.trainings')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.totalTrainings}</span>
                </div>
              </div>
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.gym')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.gymCount || 0}</span>
                </div>
              </div>
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.matches')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.matchesCount || 0}</span>
                </div>
              </div>
              <div className="bg-vista-dark-lighter rounded-md p-2.5 border border-vista-secondary/30 shadow-sm">
                <div className="flex items-center justify-between">
                  <span className="text-vista-light/70 text-xs">{t('attendancePage.attendance')}</span>
                  <span className="text-vista-light text-lg font-semibold">{stats.averageAttendance}%</span>
                </div>
              </div>
            </div>
            
            {/* –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ */}
            <div className="mt-6">
                <div className="rounded-md border border-vista-secondary/30 overflow-hidden shadow-md">
                  <div className="overflow-x-auto w-full custom-scrollbar" style={{ minWidth: "100%" }}>
                    <Table className="relative w-auto">
                      <TableHeader>
                        <UITableRow className="bg-vista-dark-lighter hover:bg-vista-dark-lighter border-b border-vista-secondary/30 shadow-md">
                          <TableHead className="text-vista-light/80 font-medium w-[250px] min-w-[250px] sticky left-0 bg-vista-dark py-2.5 border-r border-vista-secondary/30">{t('attendancePage.player')}</TableHead>
                          <TableHead className="text-vista-light/80 font-medium text-center py-2.5 border-r border-vista-secondary/30 w-[120px] min-w-[120px]">{t('attendancePage.attendance')}</TableHead>
                          
                          {/* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
                          {trainings.map((training) => (
                            <TableHead 
                              key={training.id} 
                              className={`text-vista-light/80 font-medium text-center p-1.5 min-w-[80px] border-r border-vista-secondary/30 ${getTrainingColumnClass(training.date)}`}
                            >
                              <div className="flex flex-col items-center justify-center">
                                <span className={`text-[8px] mb-0.5 px-1 py-0.5 rounded w-full text-center flex items-center justify-center ${
                                  training.type.toUpperCase() === 'GYM' 
                                    ? 'bg-purple-500/20 text-purple-400' 
                                    : 'bg-blue-500/20 text-blue-400'
                                }`}>
                                  {training.type.toUpperCase() === 'GYM' ? t('attendancePage.gym_short') : t('attendancePage.training')}
                                </span>
                                <span className="text-xs font-semibold mt-0.5">{format(parseISO(training.date), 'dd.MM.yy')}</span>
                                <span className="text-[10px] text-vista-light/50 mt-0.5">{training.time}</span>
                              </div>
                            </TableHead>
                          ))}
                        </UITableRow>
                      </TableHeader>
                      <TableBody>
                        {playersWithAttendance.map((player, index) => (
                          <UITableRow key={player.id} className="hover:bg-vista-dark/40 border-b border-vista-secondary/30 shadow-md">
                            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ */}
                            <TableCell className="sticky left-0 bg-vista-dark py-1.5 w-[250px] min-w-[250px] border-r border-vista-secondary/30">
                              <div className="flex items-center">
                                {/* –§–æ—Ç–æ –∏–≥—Ä–æ–∫–∞ */}
                                <div className="h-7 w-7 rounded-full overflow-hidden bg-gradient-to-t from-[rgba(52,64,84,0.5)] to-[rgba(230,247,255,0.65)] mr-2 flex-shrink-0 shadow-sm">
                                  {player.imageUrl ? (
                                    <img 
                                      src={player.imageUrl}
                                      alt={`${player.lastName} ${player.firstName}`}
                                      className="h-full w-full object-cover"
                                      onError={(e) => {
                                        const target = e.target as HTMLImageElement;
                                        target.src = `https://ui-avatars.com/api/?name=${player.firstName}+${player.lastName}&background=344054&color=fff&size=100`;
                                      }}
                                    />
                                  ) : (
                                    <div className="h-full w-full flex items-center justify-center">
                                      <UsersIcon className="w-3 h-3 text-slate-300" />
                                    </div>
                                  )}
                                </div>
                                <span className="text-vista-light font-medium">
                                  {player.lastName} {player.firstName}
                                </span>
                              </div>
                            </TableCell>
                            
                            {/* –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (–ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + –∑–∞–ª + –º–∞—Ç—á–∏) */}
                            <TableCell className="text-center py-1.5 border-r border-vista-secondary/30 w-[120px] min-w-[120px]">
                              <div className="flex items-center justify-center gap-2">
                                <span className="text-vista-light text-sm">
                                  {player.stats?.trained || 0}/{player.stats?.total || 0}
                                </span>
                                <span 
                                  className={`text-xs 
                                    ${(player.stats?.trainingPercentage || 0) >= 80 
                                      ? 'text-green-300' 
                                      : (player.stats?.trainingPercentage || 0) >= 50 
                                        ? 'text-yellow-300' 
                                        : 'text-red-300'
                                  }`}
                                >
                                  ({(player.stats?.trainingPercentage || 0)}%)
                                </span>
                              </div>
                            </TableCell>
                            
                            {/* –°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ */}
                            {trainings.map((training) => {
                              const attendance = player.attendanceRecords?.[training.id];
                              const status = attendance?.status;
                              
                              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
                              const statusInfo = status && attendanceStatuses[status as keyof typeof attendanceStatuses] 
                                ? attendanceStatuses[status as keyof typeof attendanceStatuses] 
                                : null;
                              
                              return (
                                <TableCell 
                                  key={`${player.id}-${training.id}`} 
                                  className={`text-center p-1 border-r border-vista-secondary/30 ${getTrainingColumnClass(training.date)}`}
                                >
                                  <div 
                                    className={`w-5 h-5 rounded-full mx-auto 
                                    ${attendanceStatuses[status as keyof typeof attendanceStatuses]?.color || 'bg-vista-dark/40 border border-vista-secondary/30 shadow-md'}`}
                                    title={attendanceStatuses[status as keyof typeof attendanceStatuses]?.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                                  ></div>
                                </TableCell>
                              );
                            })}
                          </UITableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </div>
                
                {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
                {playersWithAttendance.length === 0 && (
                  <div className="text-center py-8">
                    <p className="text-vista-light/70">{t('attendancePage.no_players_found')}</p>
                  </div>
                )}
              </div>
            
            {/* –õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ */}
            <div className="mt-4 bg-vista-dark/30 p-3 rounded-md border border-vista-secondary/30 shadow-sm">
              <h4 className="text-vista-light/80 text-sm font-medium mb-2">{t('attendancePage.legend')}</h4>
              <div className="flex flex-wrap gap-3">
                {(['TRAINED', 'REHAB', 'SICK', 'EDUCATION', 'INJURY', 'NATIONAL_TEAM', 'OTHER_TEAM', 'OTHER'] as (keyof typeof attendanceStatuses)[]).map((status) => (
                  <div key={status} className="flex items-center">
                    <div className={`w-4 h-4 rounded-full ${attendanceStatuses[status].color} mr-2`}></div>
                    <span className={`text-xs ${attendanceStatuses[status].textColor}`}>
                      {t(`attendancePage.status.${status}`)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoadingTrainings && (
        <Card className="bg-vista-dark/50 border border-vista-secondary/30 shadow-md">
          <CardContent className="p-6">
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-vista-primary"></div>
              <span className="ml-2 text-vista-light/80">{t('common.loading')}</span>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {!isLoadingTrainings && trainings.length === 0 && selectedTeamId && (
        <Card className="bg-vista-dark/50 border border-vista-secondary/30 shadow-md">
          <CardContent className="p-6">
            <div className="text-center py-8">
              <div className="mb-4 text-vista-light/50">
                <CalendarIcon className="mx-auto h-12 w-12 opacity-50" />
              </div>
              <p className="text-vista-light/70">{t('attendancePage.no_trainings_in_period')}</p>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {!selectedTeamId && (
        <Card className="bg-vista-dark/50 border border-vista-secondary/30 shadow-md">
          <CardContent className="p-6">
            <div className="text-center py-8">
              <div className="mb-4 text-vista-light/50">
                <ListFilterIcon className="mx-auto h-12 w-12 opacity-50" />
              </div>
              <p className="text-vista-light/70">{t('attendancePage.select_team_and_period')}</p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
} 