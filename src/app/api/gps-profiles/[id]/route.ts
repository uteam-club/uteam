import { NextRequest, NextResponse } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { getUserPermissions } from '@/services/user.service';
import { hasPermission } from '@/lib/permissions';
import { getSubdomain } from '@/lib/utils';
import { getClubBySubdomain } from '@/services/user.service';
import { db } from '@/lib/db';
import { gpsProfile } from '@/db/schema';
import { eq, and, ne } from 'drizzle-orm';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É
async function checkClubAccess(request: NextRequest, token: any) {
  const host = request.headers.get('host') || '';
  const subdomain = getSubdomain(host);
  if (!subdomain) return false;
  const club = await getClubBySubdomain(subdomain);
  if (!club) return false;
  return token.clubId === club.id;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è columnMapping (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏)
function validateColumnMapping(columns: any[]): { isValid: boolean; errors: string[]; validatedColumns: any[] } {
  console.log('üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ columnMapping:', {
    columnsCount: columns?.length,
    columns: columns
  });
  
  const errors: string[] = [];
  const validatedColumns: any[] = [];

  if (!Array.isArray(columns) || columns.length === 0) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–ª–æ–Ω–æ–∫');
    errors.push('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞');
    return { isValid: false, errors, validatedColumns };
  }

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è B-SIGHT —Å–∏—Å—Ç–µ–º—ã
  const requiredFields = ['Player', 'Time', 'TD'];
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', requiredFields);
  const requiredFieldNames = ['–ò–≥—Ä–æ–∫', '–í—Ä–µ–º—è', '–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è'];

  for (let i = 0; i < columns.length; i++) {
    const column = columns[i];
    const columnErrors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!column.name || typeof column.name !== 'string') {
      columnErrors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!column.mappedColumn || typeof column.mappedColumn !== 'string') {
      columnErrors.push('–ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ mappedColumn
    const russianPattern = /[–∞-—è—ë]/i;
    if (russianPattern.test(column.mappedColumn)) {
      // –£–±–∏—Ä–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ mappedColumn
      // columnErrors.push(`–ö–æ–ª–æ–Ω–∫–∞ "${column.name}": –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ "${column.mappedColumn}"`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const specialCharsPattern = /[^a-zA-Z0-9\s\-_]/;
    if (specialCharsPattern.test(column.mappedColumn)) {
      // –£–±–∏—Ä–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ mappedColumn
      // columnErrors.push(`–ö–æ–ª–æ–Ω–∫–∞ "${column.name}": –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è mappedColumn
    const duplicateIndex = validatedColumns.findIndex(col => col.mappedColumn === column.mappedColumn);
    if (duplicateIndex !== -1) {
      columnErrors.push(`–ö–æ–ª–æ–Ω–∫–∞ "${column.name}": –¥—É–±–ª–∏—Ä—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ "${validatedColumns[duplicateIndex].name}"`);
    }

    if (columnErrors.length > 0) {
      errors.push(`–ö–æ–ª–æ–Ω–∫–∞ "${column.name || `#${i + 1}`}": ${columnErrors.join(', ')}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      validatedColumns.push({
        name: column.name,
        type: column.type || 'column',
        order: column.order || i + 1,
        mappedColumn: column.mappedColumn,
        displayName: column.displayName || column.name,
        dataType: column.dataType || 'string',
        isVisible: column.isVisible !== undefined ? column.isVisible : true
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const columnNames = validatedColumns.map(col => col.name);
  console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', columnNames);
  const missingRequired = requiredFields.filter(field => !columnNames.includes(field));
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', missingRequired);
  
  if (missingRequired.length > 0) {
    errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingRequired.join(', ')}`);
  }

  return {
    isValid: errors.length === 0,
    errors,
    validatedColumns
  };
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', {
    isValid: errors.length === 0,
    errorsCount: errors.length,
    validatedColumnsCount: validatedColumns.length
  });
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.read')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  try {
    const profile = await db
      .select()
      .from(gpsProfile)
      .where(eq(gpsProfile.id, params.id))
      .limit(1);

    if (profile.length === 0) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    const profileData = profile[0];
    console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', {
      id: profileData.id,
      name: profileData.name,
      columnMappingLength: Array.isArray(profileData.columnMapping) ? profileData.columnMapping.length : 0
    });
    
    return NextResponse.json(profileData);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üîÑ PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GPS –ø—Ä–æ—Ñ–∏–ª—è:', params.id);
  
  const token = await getToken({ req: request });
  if (!token) {
    console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.update')) {
    console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É');
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const profileId = params.id;
    const body = await request.json();
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
      profileId,
      name: body.name,
      columnMappingLength: body.columnMapping?.length,
      columnMapping: body.columnMapping
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if (!body.name || typeof body.name !== 'string' || body.name.trim().length === 0) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return NextResponse.json({
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
        field: 'name'
      }, { status: 400 });
    }

    if (body.name.trim().length < 3) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
      return NextResponse.json({
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞',
        field: 'name'
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è columnMapping
    const validation = validateColumnMapping(body.columnMapping || []);
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ columnMapping:', {
      isValid: validation.isValid,
      errorsCount: validation.errors.length,
      errors: validation.errors,
      validatedColumnsCount: validation.validatedColumns.length
    });

    if (!validation.isValid) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ columnMapping:', validation.errors);
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫',
        details: validation.errors,
        field: 'columns'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingProfile] = await db
      .select()
      .from(gpsProfile)
      .where(
        and(
          eq(gpsProfile.id, profileId),
          eq(gpsProfile.clubId, token.clubId)
        )
      );

    if (!existingProfile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å)
    const existingProfileWithSameName = await db
      .select()
      .from(gpsProfile)
      .where(
        and(
          eq(gpsProfile.clubId, token.clubId),
          eq(gpsProfile.name, body.name.trim()),
          ne(gpsProfile.id, profileId) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        )
      );

    if (existingProfileWithSameName.length > 0) {
      return NextResponse.json({ 
        error: '–ü—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        field: 'name'
      }, { status: 400 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const [updatedProfile] = await db
      .update(gpsProfile)
      .set({
        name: body.name.trim(),
        description: body.description || existingProfile.description,
        gpsSystem: body.gpsSystem || existingProfile.gpsSystem,
        columnMapping: validation.validatedColumns,
        visualizationConfig: body.visualizationConfig || existingProfile.visualizationConfig,
        metricsConfig: body.metricsConfig || existingProfile.metricsConfig,
        customFormulas: body.customFormulas || existingProfile.customFormulas,
        dataFilters: body.dataFilters || existingProfile.dataFilters,
        isDefault: body.isDefault !== undefined ? body.isDefault : existingProfile.isDefault,
        isActive: body.isActive !== undefined ? body.isActive : existingProfile.isActive,
        updatedAt: new Date(),
      })
      .where(eq(gpsProfile.id, profileId))
      .returning();

    return NextResponse.json({
      ...updatedProfile,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GPS –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.delete')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const profileId = params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingProfile] = await db
      .select()
      .from(gpsProfile)
      .where(
        and(
          eq(gpsProfile.id, profileId),
          eq(gpsProfile.clubId, token.clubId)
        )
      );

    if (!existingProfile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç—á–µ—Ç–∞—Ö
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ—Ç—á–µ—Ç–∞—Ö

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await db
      .delete(gpsProfile)
      .where(eq(gpsProfile.id, profileId));

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ GPS –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 