import { NextRequest, NextResponse } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { getUserPermissions } from '@/services/user.service';
import { hasPermission } from '@/lib/permissions';
import { getSubdomain } from '@/lib/utils';
import { getClubBySubdomain } from '@/services/user.service';
import { db } from '@/lib/db';
import { gpsProfile } from '@/db/schema';
import { eq, and } from 'drizzle-orm';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É
async function checkClubAccess(request: NextRequest, token: any) {
  const host = request.headers.get('host') || '';
  const subdomain = getSubdomain(host);
  if (!subdomain) return false;
  const club = await getClubBySubdomain(subdomain);
  if (!club) return false;
  return token.clubId === club.id;
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.read')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  try {
    const profile = await db
      .select()
      .from(gpsProfile)
      .where(eq(gpsProfile.id, params.id))
      .limit(1);

    if (profile.length === 0) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    const profileData = profile[0];
    console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', {
      id: profileData.id,
      name: profileData.name,
      columnMappingLength: Array.isArray(profileData.columnMapping) ? profileData.columnMapping.length : 0
    });
    
    return NextResponse.json(profileData);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.update')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const profileId = params.id;
    const body = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingProfile] = await db
      .select()
      .from(gpsProfile)
      .where(
        and(
          eq(gpsProfile.id, profileId),
          eq(gpsProfile.clubId, token.clubId)
        )
      );

    if (!existingProfile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const [updatedProfile] = await db
      .update(gpsProfile)
      .set({
        name: body.name,
        description: body.description,
        gpsSystem: body.gpsSystem,
        columnMapping: body.columnMapping,
        visualizationConfig: body.visualizationConfig,
        metricsConfig: body.metricsConfig,
        customFormulas: body.customFormulas,
        dataFilters: body.dataFilters,
        isDefault: body.isDefault,
        isActive: body.isActive,
        updatedAt: new Date(),
      })
      .where(eq(gpsProfile.id, profileId))
      .returning();

    return NextResponse.json(updatedProfile);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GPS –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsProfiles.delete')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const profileId = params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingProfile] = await db
      .select()
      .from(gpsProfile)
      .where(
        and(
          eq(gpsProfile.id, profileId),
          eq(gpsProfile.clubId, token.clubId)
        )
      );

    if (!existingProfile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç—á–µ—Ç–∞—Ö
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ—Ç—á–µ—Ç–∞—Ö

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await db
      .delete(gpsProfile)
      .where(eq(gpsProfile.id, profileId));

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ GPS –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 