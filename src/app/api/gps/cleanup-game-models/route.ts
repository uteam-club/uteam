import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/auth-options';
import { cleanupAllInvalidGameModels } from '@/lib/game-model-calculator-improved';
import { canAccessGpsReport } from '@/lib/gps-permissions';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–∞–º–∏
    const canManage = await canAccessGpsReport(
      session.user.id,
      session.user.clubId || 'default-club',
      null,
      'edit'
    );

    if (!canManage) {
      return NextResponse.json({
        error: 'Forbidden',
        message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPS –æ—Ç—á–µ—Ç–∞–º–∏'
      }, { status: 403 });
    }

    const clubId = session.user.clubId || 'default-club';
    
    console.log(`üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–ª—É–±–∞ ${clubId}...`);
    
    // –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    await cleanupAllInvalidGameModels(clubId);
    
    console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–ª—É–±–∞ ${clubId}`);
    
    return NextResponse.json({ 
      success: true, 
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã' 
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π:', error);
    return NextResponse.json(
      { 
        error: 'Internal Server Error', 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π' 
      }, 
      { status: 500 }
    );
  }
}
