import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { db } from '@/lib/db';
import { gpsReport } from '@/db/schema/gpsReport';
import { gpsReportData } from '@/db/schema/gpsReportData';
import { playerGameModel } from '@/db/schema/playerGameModel';
import { player } from '@/db/schema/player';
import { gpsCanonicalMetric } from '@/db/schema/gpsCanonicalMetric';
import { gpsVisualizationProfile, gpsProfileColumn } from '@/db/schema/gpsColumnMapping';
import { eq, and } from 'drizzle-orm';
import { calculateGameModelsForTeam } from '@/lib/game-model-calculator';

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const reportId = params.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
    const [report] = await db
      .select({ 
        id: gpsReport.id,
        teamId: gpsReport.teamId, 
        clubId: gpsReport.clubId,
        eventType: gpsReport.eventType,
        eventId: gpsReport.eventId
      })
      .from(gpsReport)
      .where(and(
        eq(gpsReport.id, reportId),
        eq(gpsReport.clubId, session.user.clubId || 'default-club')
      ));

    if (!report) {
      return NextResponse.json({ 
        error: 'GPS –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É' 
      }, { status: 404 });
    }

    if (report.eventType !== 'match') {
      return NextResponse.json({ 
        error: '–ò–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Ç—á–µ–π' 
      }, { status: 400 });
    }

    console.log(`üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${report.teamId}...`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    await calculateGameModelsForTeam(report.teamId, report.clubId);

    return NextResponse.json({ 
      success: true,
      message: '–ò–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã',
      teamId: report.teamId,
      clubId: report.clubId
    });

  } catch (error) {
    console.error('Error recalculating player game models:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const reportId = params.id;
    const { searchParams } = new URL(request.url);
    const profileId = searchParams.get('profileId');

    if (!profileId) {
      return NextResponse.json({ error: 'Profile ID is required' }, { status: 400 });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
    const [report] = await db
      .select({ 
        id: gpsReport.id,
        teamId: gpsReport.teamId, 
        clubId: gpsReport.clubId,
        eventType: gpsReport.eventType,
        eventId: gpsReport.eventId
      })
      .from(gpsReport)
      .where(and(
        eq(gpsReport.id, reportId),
        eq(gpsReport.clubId, session.user.clubId || 'default-club')
      ));

    if (!report) {
      return NextResponse.json({ 
        error: 'GPS –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É' 
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ç—Ä–∏–∫
    const [profile] = await db
      .select()
      .from(gpsVisualizationProfile)
      .where(and(
        eq(gpsVisualizationProfile.id, profileId),
        eq(gpsVisualizationProfile.clubId, session.user.clubId || 'default-club')
      ));

    if (!profile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    const profileColumns = await db
      .select({
        canonicalMetricId: gpsProfileColumn.canonicalMetricId,
        displayName: gpsProfileColumn.displayName,
        displayUnit: gpsProfileColumn.displayUnit,
        isVisible: gpsProfileColumn.isVisible,
        canonicalMetricCode: gpsCanonicalMetric.code,
      })
      .from(gpsProfileColumn)
      .leftJoin(gpsCanonicalMetric, eq(gpsProfileColumn.canonicalMetricId, gpsCanonicalMetric.id))
      .where(eq(gpsProfileColumn.profileId, profileId));

    console.log(`üìä –ö–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${profileColumns.length} –∑–∞–ø–∏—Å–µ–π`);

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫
    const customMetricsMap = new Map();
    profileColumns.forEach(column => {
      if (column.isVisible && column.canonicalMetricCode) {
        customMetricsMap.set(column.canonicalMetricCode, {
          displayName: column.displayName,
          displayUnit: column.displayUnit
        });
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö –¥–ª—è fallback
    const canonicalMetrics = await db
      .select({
        code: gpsCanonicalMetric.code,
        name: gpsCanonicalMetric.name,
        unit: gpsCanonicalMetric.canonicalUnit,
      })
      .from(gpsCanonicalMetric)
      .where(eq(gpsCanonicalMetric.isActive, true));

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)
    const metricsMap = new Map();
    canonicalMetrics.forEach(metric => {
      const customMetric = customMetricsMap.get(metric.code);
      metricsMap.set(metric.code, {
        name: customMetric?.displayName || metric.name,
        unit: customMetric?.displayUnit || metric.unit
      });
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const currentMatchData = await db
      .select({
        playerId: gpsReportData.playerId,
        canonicalMetric: gpsReportData.canonicalMetric,
        value: gpsReportData.value,
        unit: gpsReportData.unit
      })
      .from(gpsReportData)
      .where(eq(gpsReportData.gpsReportId, reportId));


    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const gameModels = await db
      .select({
        id: playerGameModel.id,
        playerId: playerGameModel.playerId,
        calculatedAt: playerGameModel.calculatedAt,
        matchesCount: playerGameModel.matchesCount,
        totalMinutes: playerGameModel.totalMinutes,
        metrics: playerGameModel.metrics,
        matchIds: playerGameModel.matchIds,
        version: playerGameModel.version
      })
      .from(playerGameModel)
      .where(and(
        eq(playerGameModel.clubId, report.clubId)
      ));

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    const players = await db
      .select({
        id: player.id,
        firstName: player.firstName,
        lastName: player.lastName,
        position: player.position,
        imageUrl: player.imageUrl
      })
      .from(player)
      .where(eq(player.teamId, report.teamId));

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å metricMapping - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º metricsMap

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Ö –∏–≥—Ä–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
    const playersWithModels = players.map(player => {
      console.log(`\nüîç === –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–†–û–ö–ê: ${player.firstName} ${player.lastName} ===`);
      
      const gameModel = gameModels.find(model => model.playerId === player.id);
      console.log(`üéØ –ò–≥—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å: ${!!gameModel}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
      const playerMatchData = currentMatchData.filter(data => data.playerId === player.id);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞: ${playerMatchData.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
      const matchMetrics: Record<string, { value: number; unit: string }> = {};
      playerMatchData.forEach(data => {
        const value = parseFloat(data.value);
        if (!isNaN(value)) {
          matchMetrics[data.canonicalMetric] = {
            value: value,
            unit: data.unit
          };
        }
      });

      // –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const comparisonMetrics: Array<{
        canonicalMetric: string;
        displayName: string;
        displayUnit: string;
        currentValue: number;
        modelValue: number;
        percentageDiff: number;
      }> = [];

      if (gameModel) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
        const durationData = matchMetrics['duration'];
        const matchDurationMinutes = durationData ? durationData.value / 60 : 0;
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤ –º–∞—Ç—á–µ: ${matchDurationMinutes.toFixed(1)} –º–∏–Ω`);

        // –ü–†–û–í–ï–†–Ø–ï–ú: –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–≥—Ä–∞—Ç—å 60+ –º–∏–Ω—É—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (matchDurationMinutes >= 60) {
          console.log(`‚úÖ –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª 60+ –º–∏–Ω—É—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...`);
          
          // –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏
          Object.entries(gameModel.metrics as Record<string, number>).forEach(([metricCode, modelValuePerMinute]) => {
            const matchData = matchMetrics[metricCode];
            const metricInfo = metricsMap.get(metricCode);
            
            if (matchData && metricInfo) {
              const currentValue = matchData.value; // –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Ç—á–∞
              const modelValueForMatch = modelValuePerMinute * matchDurationMinutes; // –ú–æ–¥–µ–ª—å √ó –≤—Ä–µ–º—è –º–∞—Ç—á–∞
              
              const percentageDiff = modelValueForMatch > 0 ? 
                ((currentValue - modelValueForMatch) / modelValueForMatch) * 100 : 0;

              console.log(`üîç –ú–µ—Ç—Ä–∏–∫–∞ ${metricCode}:`);
              console.log(`  - –ö–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${metricInfo.name}`);
              console.log(`  - –ö–∞—Å—Ç–æ–º–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞: ${metricInfo.unit}`);
              console.log(`  - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentValue}`);
              console.log(`  - –ú–æ–¥–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${modelValueForMatch}`);

              comparisonMetrics.push({
                canonicalMetric: metricCode,
                displayName: metricInfo.name,
                displayUnit: metricInfo.unit || 'unknown',
                currentValue: currentValue, // –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                modelValue: modelValueForMatch, // –ú–æ–¥–µ–ª—å √ó –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                percentageDiff
              });
            }
          });
          
          console.log(`üìà –°–æ–∑–¥–∞–Ω–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${comparisonMetrics.length}`);
        } else {
          console.log(`‚ùå –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª –º–µ–Ω–µ–µ 60 –º–∏–Ω—É—Ç`);
        }
      } else {
        console.log(`‚ùå –ù–µ—Ç –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏`);
      }

      return {
        ...player,
        gameModel: gameModel || null,
        matchData: matchMetrics,
        comparisonMetrics
      };
    });

    return NextResponse.json({ 
      success: true,
      players: playersWithModels,
      report: {
        id: report.id,
        teamId: report.teamId,
        clubId: report.clubId,
        eventType: report.eventType,
        eventId: report.eventId
      }
    });

  } catch (error) {
    console.error('Error getting player game models:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}