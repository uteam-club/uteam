import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/auth-options';
import { db } from '@/lib/db';
import { gpsReport } from '@/db/schema/gpsReport';
import { gpsReportData } from '@/db/schema/gpsReportData';
import { gpsCanonicalMetric } from '@/db/schema/gpsCanonicalMetric';
import { team } from '@/db/schema/team';
import { training } from '@/db/schema/training';
import { match } from '@/db/schema/match';
import { player } from '@/db/schema/player';
import { trainingCategory } from '@/db/schema/trainingCategory';
import { playerGameModel } from '@/db/schema/playerGameModel';
import { eq, and, sql, desc, inArray, count } from 'drizzle-orm';
import { convertUnit } from '@/lib/unit-converter';
import { canAccessGpsReport } from '@/lib/gps-permissions';
import { invalidateRelatedCache } from '@/lib/gps-cache';
import {
  validateRequiredFields,
  validateGpsData,
  sanitizeObject,
  validateFile,
  isValidId
} from '@/lib/validation';
// GPS_CONSTANTS removed - using direct values
import { ApiErrorHandler } from '@/lib/api-error-handler';
import { parsePaginationParams, createPaginatedResponse } from '@/lib/pagination';
import { withApiCache } from '@/lib/api-cache-middleware';

export async function GET(request: NextRequest) {
  return withApiCache(request, async () => {
    try {
      const session = await getServerSession(authOptions);
      if (!session?.user?.id) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä GPS –æ—Ç—á–µ—Ç–æ–≤
      const canView = await canAccessGpsReport(
        session.user.id,
        session.user.clubId || 'default-club',
        null,
        'view'
      );

      if (!canView) {
        return NextResponse.json({
          error: 'Forbidden',
          message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ GPS –æ—Ç—á–µ—Ç–æ–≤'
        }, { status: 403 });
      }

      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const pagination = parsePaginationParams(request);

    const { searchParams } = new URL(request.url);
    const teamId = searchParams.get('teamId');
    const eventType = searchParams.get('eventType');
    const eventId = searchParams.get('eventId');

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const conditions = [
      eq(gpsReport.clubId, session.user.clubId || 'default-club')
    ];

    if (teamId) {
      conditions.push(eq(gpsReport.teamId, teamId));
    }

    if (eventType) {
      conditions.push(eq(gpsReport.eventType, eventType as 'training' | 'match'));
    }

    if (eventId) {
      conditions.push(eq(gpsReport.eventId, eventId));
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –º–∞—Ç—á–∞—Ö
    const reports = await db
      .select({
        id: gpsReport.id,
        name: gpsReport.name,
        fileName: gpsReport.fileName,
        fileSize: gpsReport.fileSize,
        gpsSystem: gpsReport.gpsSystem,
        eventType: gpsReport.eventType,
        eventId: gpsReport.eventId,
        teamId: gpsReport.teamId,
        isProcessed: gpsReport.isProcessed,
        hasEdits: gpsReport.hasEdits,
        playersCount: gpsReport.playersCount,
        status: gpsReport.status,
        createdAt: gpsReport.createdAt,
        updatedAt: gpsReport.updatedAt,
        teamName: team.name,
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        trainingTitle: training.title,
        trainingType: training.type,
        trainingDate: training.date,
        trainingTime: training.time,
        trainingCategoryName: trainingCategory.name,
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        matchCompetitionType: match.competitionType,
        matchDate: match.date,
        matchTime: match.time,
        matchIsHome: match.isHome,
        matchOpponentName: match.opponentName,
        matchTeamGoals: match.teamGoals,
        matchOpponentGoals: match.opponentGoals,
      })
      .from(gpsReport)
      .leftJoin(team, eq(gpsReport.teamId, team.id))
      .leftJoin(training, eq(gpsReport.eventId, training.id))
      .leftJoin(match, eq(gpsReport.eventId, match.id))
      .leftJoin(trainingCategory, eq(training.categoryId, trainingCategory.id))
      .where(and(...conditions))
      .orderBy(desc(gpsReport.createdAt));

    return NextResponse.json({ 
      success: true, 
      reports: reports.map(report => ({
        ...report,
        createdAt: report.createdAt?.toISOString(),
        updatedAt: report.updatedAt?.toISOString(),
        // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        trainingName: report.trainingTitle,
        trainingCategory: report.trainingCategoryName,
        trainingType: report.trainingType === 'TRAINING' ? 'training' : 'gym',
        trainingDate: report.trainingDate && report.trainingTime 
          ? `${report.trainingDate}T${report.trainingTime}:00` 
          : undefined,
        // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–µ–π
        homeTeamName: report.matchIsHome ? report.teamName : report.matchOpponentName,
        awayTeamName: report.matchIsHome ? report.matchOpponentName : report.teamName,
        homeScore: report.matchIsHome ? report.matchTeamGoals : report.matchOpponentGoals,
        awayScore: report.matchIsHome ? report.matchOpponentGoals : report.matchTeamGoals,
        competitionType: report.matchCompetitionType?.toLowerCase() as 'friendly' | 'league' | 'cup',
        matchDate: report.matchDate && report.matchTime 
          ? `${report.matchDate}T${report.matchTime}:00` 
          : undefined,
      }))
    });

    } catch (error) {
      const errorResponse = ApiErrorHandler.createErrorResponse(error, 'GET GPS reports');
      return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
    }
  });
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç GPS API: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      console.log('‚ùå GPS API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('‚úÖ GPS API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', session.user.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤
    const canCreate = await canAccessGpsReport(
      session.user.id,
      session.user.clubId || 'default-club',
      null,
      'edit'
    );

    if (!canCreate) {
      console.log('‚ùå GPS API: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤');
      return NextResponse.json({ 
        error: 'Forbidden', 
        message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GPS –æ—Ç—á–µ—Ç–æ–≤' 
      }, { status: 403 });
    }

    console.log('‚úÖ GPS API: –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const canonicalMetrics = await db.select().from(gpsCanonicalMetric);
    console.log('‚úÖ GPS API: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫:', canonicalMetrics.length);
    
    const startTime = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ FormData
    const formData = await request.formData();
    const formDataTime = Date.now() - startTime;
    console.log('‚úÖ GPS API: FormData —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∑–∞', formDataTime, '–º—Å');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['teamId', 'eventType', 'eventId', 'parsedData', 'columnMappings', 'playerMappings'];
    const formDataObj = Object.fromEntries(formData.entries());
    
    console.log('üîç GPS API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', requiredFields);
    console.log('üîç GPS API: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', Object.keys(formDataObj));
    
    if (!validateRequiredFields(formDataObj, requiredFields)) {
      const missingFields = requiredFields.filter(field => !formDataObj[field]);
      console.log('‚ùå GPS API: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:', missingFields);
      return NextResponse.json(
        { 
          error: 'Missing required fields', 
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
          missingFields 
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ GPS API: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    const teamId = formData.get('teamId') as string;
    const eventId = formData.get('eventId') as string;
    
    console.log('üîç GPS API: –ü—Ä–æ–≤–µ—Ä–∫–∞ ID - teamId:', teamId, 'eventId:', eventId);
    
    if (!isValidId(teamId) || !isValidId(eventId)) {
      console.log('‚ùå GPS API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
      return NextResponse.json(
        { error: 'Invalid ID format', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ GPS API: ID –≤–∞–ª–∏–¥–Ω—ã');
    
    const eventType = formData.get('eventType') as string;
    const gpsSystem = formData.get('gpsSystem') as string;
    const profileId = formData.get('profileId') as string;
    
    console.log('üîç GPS API: –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    let columnMappings, playerMappings, parsedData;
    
    try {
      const columnMappingsStr = formData.get('columnMappings') as string;
      console.log('üîç GPS API: columnMappings —Å—Ç—Ä–æ–∫–∞:', columnMappingsStr?.substring(0, 100) + '...');
      columnMappings = sanitizeObject(JSON.parse(columnMappingsStr));
      console.log('‚úÖ GPS API: columnMappings —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', columnMappings?.length);
    } catch (error) {
      console.log('‚ùå GPS API: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ columnMappings:', error);
      return NextResponse.json(
        { error: 'Invalid columnMappings JSON', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫' },
        { status: 400 }
      );
    }
    
    try {
      const playerMappingsStr = formData.get('playerMappings') as string;
      console.log('üîç GPS API: playerMappings —Å—Ç—Ä–æ–∫–∞:', playerMappingsStr?.substring(0, 100) + '...');
      playerMappings = sanitizeObject(JSON.parse(playerMappingsStr));
      console.log('‚úÖ GPS API: playerMappings —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', playerMappings?.length);
    } catch (error) {
      console.log('‚ùå GPS API: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ playerMappings:', error);
      return NextResponse.json(
        { error: 'Invalid playerMappings JSON', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤' },
        { status: 400 }
      );
    }
    
    try {
      const parsedDataStr = formData.get('parsedData') as string;
      console.log('üîç GPS API: parsedData —Å—Ç—Ä–æ–∫–∞:', parsedDataStr?.substring(0, 100) + '...');
      parsedData = sanitizeObject(JSON.parse(parsedDataStr));
      console.log('‚úÖ GPS API: parsedData —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —Å—Ç—Ä–æ–∫:', parsedData?.rows?.length);
    } catch (error) {
      console.log('‚ùå GPS API: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ parsedData:', error);
      return NextResponse.json(
        { error: 'Invalid parsedData JSON', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥–ª—è GPS –¥–∞–Ω–Ω—ã—Ö' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è parsedData
    if (!validateGpsData(parsedData)) {
      console.log('‚ùå GPS API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GPS –¥–∞–Ω–Ω—ã—Ö');
      return NextResponse.json(
        { error: 'Invalid GPS data format', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GPS –¥–∞–Ω–Ω—ã—Ö' },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ GPS API: GPS –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ FormData
    const file = formData.get('file') as File;
    const fileName = file?.name || 'unknown_file';
    
    console.log('üîç GPS API: –§–∞–π–ª:', fileName, '—Ä–∞–∑–º–µ—Ä:', file?.size);
    console.log('üîç GPS API: MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞:', file?.type);
    console.log('üîç GPS API: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileName?.split('.').pop());
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (file) {
      const fileValidation = validateFile(file, 10, ['.csv', '.xlsx', '.xls']);
      if (!fileValidation.valid) {
        console.log('‚ùå GPS API: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', fileValidation.error);
        return NextResponse.json(
          { error: 'File validation failed', message: fileValidation.error },
          { status: 400 }
        );
      }
    }
    
    console.log('‚úÖ GPS API: –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (!Array.isArray(columnMappings)) {
      console.log('‚ùå GPS API: columnMappings –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      throw new Error('columnMappings must be an array');
    }
    if (!Array.isArray(playerMappings)) {
      console.log('‚ùå GPS API: playerMappings –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      throw new Error('playerMappings must be an array');
    }
    if (!parsedData || !parsedData.rows || !Array.isArray(parsedData.rows)) {
      console.log('‚ùå GPS API: parsedData –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç rows –º–∞—Å—Å–∏–≤');
      throw new Error('parsedData must contain rows array');
    }
    
    console.log('‚úÖ GPS API: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç...');

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const [newReport] = await db.insert(gpsReport).values({
      name: `${eventType === 'training' ? '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' : '–ú–∞—Ç—á'} ${new Date().toLocaleDateString('ru-RU')}`,
      fileName: fileName,
      fileSize: file?.size || 0,
      gpsSystem,
      eventType: eventType as 'training' | 'match',
      eventId,
      profileId: profileId && profileId !== 'null' ? profileId : null,
      fileUrl: 'local-file', // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ
      rawData: null,
      processedData: null,
      filePath: null,
      importMeta: null,
      gpsProfileId: null,
      trainingId: eventType === 'training' ? eventId : null,
      matchId: eventType === 'match' ? eventId : null,
      ingestError: null,
      errorMessage: null,
      profileSnapshot: null,
      canonVersion: null,
      metadata: {
        originalFileName: fileName,
        fileSize: file?.size || 0,
        uploadedAt: new Date().toISOString(),
        parsedData: parsedData.metadata,
      },
      isProcessed: true,
      status: 'processed',
      processedAt: new Date(),
      playersCount: parsedData.playerNames?.length || 0,
      hasEdits: false,
      clubId: session.user.clubId || 'default-club',
      teamId,
      uploadedById: session.user.id,
    }).returning();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const activeMappings = columnMappings.filter((mapping: any) => 
      mapping.isActive && mapping.canonicalMetricId && mapping.canonicalMetricId.trim() !== ''
    );

    // –°–æ–∑–¥–∞–µ–º –∫—ç—à –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const canonicalMetricsCache = new Map();
    canonicalMetrics.forEach(metric => {
      canonicalMetricsCache.set(metric.id, metric);
    });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º playerMappings

    if (!Array.isArray(playerMappings)) {
      throw new Error('playerMappings must be an array');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    let processedPlayers = 0;
    let totalMetrics = 0;
    const allReportData: any[] = [];


    for (const player of playerMappings) {
      if (!player.playerId || player.similarity === 'not_found' || player.similarity === 'none') {
        continue;
      }
      

      const playerMetrics: Record<string, { value: number | string; unit: string }> = {};
      
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞
      // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å –º–µ—Ç—Ä–∏–∫–æ–π "–ò–º—è –∏–≥—Ä–æ–∫–∞"
      const playerNameMapping = activeMappings.find((m: any) => {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const metric = canonicalMetrics.find(cm => cm.id === m.canonicalMetricId);
        return metric?.name === '–ò–º—è –∏–≥—Ä–æ–∫–∞' || metric?.code === 'athlete_name';
      });
      
      let playerRow = null;
      if (playerNameMapping) {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
        playerRow = parsedData.rows.find((r: any) => 
          r[playerNameMapping.originalName] === player.filePlayerName
        );
      }
      
      if (!playerRow) {
        continue;
      }


      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      for (const mapping of activeMappings as any[]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
        if (!mapping.canonicalMetricId || !mapping.sourceUnit || !mapping.originalName) {
          continue;
        }
        
        if (!playerRow[mapping.originalName]) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (playerRow[mapping.originalName] === null || playerRow[mapping.originalName] === undefined || playerRow[mapping.originalName] === '') {
          continue;
        }

        // –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —á–∏—Å–ª–æ
        let rawValue: number | string = playerRow[mapping.originalName];
        
        const timeFormats = ['hh:mm:ss', 'hh:mm', 'mm:ss', 'ss', 'hh.mm.ss', 'hh,mm,ss', 'hh mm ss', 'hh.mm', 'mm.ss', 'hh:mm:ss.fff', 'hh:mm:ss,fff'];
        
        if (!timeFormats.includes(mapping.sourceUnit) && mapping.sourceUnit !== 'string') {
          rawValue = parseFloat(String(rawValue));
          if (isNaN(rawValue)) {
            continue;
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫—ç—à–∞
        const canonicalMetric = canonicalMetricsCache.get(mapping.canonicalMetricId);
        if (!canonicalMetric) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ canonicalMetric.code —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!canonicalMetric.code) {
          continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫—É—é –µ–¥–∏–Ω–∏—Ü—É
        let canonicalValue: number;
        try {
          // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
          const timeFormats = ['hh:mm:ss', 'hh:mm', 'mm:ss', 'ss', 'hh.mm.ss', 'hh,mm,ss', 'hh mm ss', 'hh.mm', 'mm.ss', 'hh:mm:ss.fff', 'hh:mm:ss,fff'];
          
          if (timeFormats.includes(mapping.sourceUnit)) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            canonicalValue = Number(convertUnit(rawValue, mapping.sourceUnit, canonicalMetric.canonicalUnit));
            if (isNaN(canonicalValue)) {
              continue;
            }
          } else if (mapping.sourceUnit === 'string') {
            // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ–∑–∏—Ü–∏—è) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ playerMetrics, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            continue;
          } else {
            canonicalValue = Number(convertUnit(Number(rawValue), mapping.sourceUnit, canonicalMetric.canonicalUnit));
          }
        } catch (error) {
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if (isNaN(canonicalValue)) {
          continue;
        }
        
        playerMetrics[canonicalMetric.code] = {
          value: canonicalValue,
          unit: canonicalMetric.canonicalUnit
        };
        
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ–∑–∏—Ü–∏—è, –∏–º—è –∏–≥—Ä–æ–∫–∞) –æ—Ç–¥–µ–ª—å–Ω–æ
      for (const mapping of activeMappings) {
        const canonicalMetric = canonicalMetrics.find(cm => cm.id === mapping.canonicalMetricId);
        if (!canonicalMetric) continue;
        
        if (mapping.sourceUnit === 'string') {
          const rawValue = playerRow[mapping.originalName];
          if (rawValue !== undefined && rawValue !== null && rawValue !== '') {
            playerMetrics[canonicalMetric.code] = {
              value: String(rawValue),
              unit: 'string'
            };
          }
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è batch insert
      for (const [metricCode, metricData] of Object.entries(playerMetrics)) {
        allReportData.push({
          gpsReportId: newReport.id,
          playerId: player.playerId,
          canonicalMetric: metricCode,
          value: metricData.value.toString(),
          unit: metricData.unit,
        });
        totalMetrics++;
      }
      
      processedPlayers++;
    }



    // –í—ã–ø–æ–ª–Ω—è–µ–º batch insert –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
    if (allReportData.length > 0) {
      try {
        await db.insert(gpsReportData).values(allReportData);
      } catch (error) {
        console.error('GPS Report API: Error in batch insert:', error);
        throw error;
      }
    }

    const totalTime = Date.now() - startTime;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:', teamId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
      const { calculateGameModelsForTeam } = await import('@/lib/game-model-calculator');
      await calculateGameModelsForTeam(teamId, session.user.clubId || 'default-club');
      
      console.log('‚úÖ –ò–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å—á–µ—Ç–µ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—á–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    invalidateRelatedCache('gps-report', newReport.id);
    
    console.log('‚úÖ GPS API: –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', newReport.id);
    console.log('‚úÖ GPS API: –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    
    return NextResponse.json({ 
      success: true, 
      gpsReportId: newReport.id,
      message: 'GPS –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' 
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå GPS API: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    const errorResponse = ApiErrorHandler.createErrorResponse(error, 'POST GPS report');
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}