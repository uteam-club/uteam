import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { gpsReport, gpsProfile, match, playerMapping, playerMatchStat, player, team } from '@/db/schema';
import { eq, and, gte, desc, sql } from 'drizzle-orm';

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export async function GET(
  request: NextRequest,
  { params }: { params: { playerId: string } }
) {
  try {
    const playerId = params.playerId;
    const { searchParams } = new URL(request.url);
    const profileId = searchParams.get('profileId');
    const teamId = searchParams.get('teamId');

    if (!playerId || !profileId || !teamId) {
      return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', {
      playerId,
      profileId,
      teamId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const [playerData] = await db
      .select({
        id: player.id,
        firstName: player.firstName,
        lastName: player.lastName,
        teamId: player.teamId
      })
      .from(player)
      .where(eq(player.id, playerId));

    if (!playerData) {
      return NextResponse.json({ error: 'Player not found' }, { status: 404 });
    }

    console.log('üîç –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:', {
      id: playerData.id,
      firstName: playerData.firstName,
      lastName: playerData.lastName,
      teamId: playerData.teamId
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è clubId
    const [teamData] = await db
      .select({ clubId: team.clubId })
      .from(team)
      .where(eq(team.id, playerData.teamId));

    if (!teamData) {
      return NextResponse.json({ error: 'Team not found' }, { status: 404 });
    }

    console.log('üîç –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', {
      teamId: playerData.teamId,
      clubId: teamData.clubId
    });

    // –ü–æ–ª—É—á–∞–µ–º GPS –ø—Ä–æ—Ñ–∏–ª—å
    const [profile] = await db
      .select()
      .from(gpsProfile)
      .where(eq(gpsProfile.id, profileId));

    if (!profile) {
      return NextResponse.json({ error: 'GPS profile not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å clubId
    if (!teamData.clubId) {
      console.error('‚ùå –£ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç clubId:', teamData);
      return NextResponse.json({ error: 'Team has no club association' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã —Å GPS –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π API)
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      clubId: teamData.clubId,
      profileId,
      teamId
    });

    let matches: any[] = [];
    
    try {
      const matchesWithGps = await db.execute(sql`
        SELECT 
          m."id" as "matchid",
          m."date",
          gr."id" as "reportid",
          gr."processedData" as "processeddata"
        FROM "Match" m
        INNER JOIN "GpsReport" gr ON gr."eventId" = m."id" 
          AND gr."eventType" = 'MATCH' 
          AND gr."clubId" = ${teamData.clubId}::uuid
          AND gr."profileId" = ${profileId}::uuid
        WHERE m."teamId" = ${teamId}::uuid 
          AND m."clubId" = ${teamData.clubId}::uuid
        ORDER BY m."date" DESC
      `);
      
      console.log('‚úÖ SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      matches = (matchesWithGps as any).rows || [];
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
      
      if (matches.length === 0) {
        return NextResponse.json({
          averageMetrics: {},
          matchesCount: 0,
          totalMinutes: 0
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–∞:', error);
      return NextResponse.json({ error: 'Database query failed' }, { status: 500 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
    const recentMatches = matches.slice(0, 10);
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentMatches.length} –º–∞—Ç—á–µ–π`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
    const playerMatchData: Array<{
      matchId: string;
      date: string;
      minutesPlayed: number;
      metrics: Record<string, number>;
    }> = [];

    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${recentMatches.length} –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);

    for (const matchData of recentMatches) {
      try {
        console.log(`üèà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á:`, {
          matchId: matchData.matchid,
          date: matchData.date,
          reportId: matchData.reportid,
          processedDataLength: matchData.processeddata?.length || 0
        });
        
        const processedData = matchData.processeddata || [];
        
        console.log(`üîç –ú–∞—Ç—á ${matchData.matchid}: –Ω–∞–π–¥–µ–Ω–æ ${processedData.length} –∏–≥—Ä–æ–∫–æ–≤`);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π API)
        const playerMappings = await db.select()
          .from(playerMapping)
          .where(and(
            eq(playerMapping.playerId, playerId),
            eq(playerMapping.teamId, teamId),
            eq(playerMapping.isActive, true)
          ));

        console.log(`üîó –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, playerMappings);

        // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π API)
        let playerData = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
        playerData = processedData.find((player: any) => {
          const playerIdInData = player.playerId || player.player_id;
          return playerIdInData === playerId;
        });

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –∏–º–µ–Ω
        if (!playerData && playerMappings.length > 0) {
          for (const mapping of playerMappings) {
            // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
            playerData = processedData.find((player: any) => {
              const playerNameInData = player.name || player.Name || player.NAME || player.playerName;
              return playerNameInData === mapping.reportName;
            });
            
            if (playerData) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É: ${mapping.reportName} -> ${playerId}`);
              break;
            }
          }
        }

        console.log(`üîç –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ ${playerId} –≤ –º–∞—Ç—á–µ ${matchData.matchid}`);
        if (playerData) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –≤ –º–∞—Ç—á–µ ${matchData.matchid}:`, Object.keys(playerData));
        } else {
          console.log(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç—á–µ ${matchData.matchid}`);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π API)
        let minutesPlayed = 90; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 90 –º–∏–Ω—É—Ç
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ—Ñ–∏–ª–µ B-SIGHT —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Time")
        const gpsTime = playerData.Time || playerData.time || playerData.TIME || 
                       playerData.minutes || playerData.MINUTES || playerData.Minutes ||
                       playerData.duration || playerData.DURATION || playerData.Duration;
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "HH:MM:SS" –≤ –º–∏–Ω—É—Ç—ã (—Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –º–∏–Ω—É—Ç—ã)
        const parseTimeToMinutes = (timeStr: string): number => {
          console.log(`üîß –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏: "${timeStr}"`);
          
          if (!timeStr) {
            console.log(`üîß –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏`);
            return 0;
          }
          
          // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ, —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
          if (timeStr.includes(':')) {
            const timeParts = timeStr.split(':');
            console.log(`üîß –ß–∞—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏:`, timeParts);
            
            if (timeParts.length === 3) {
              // –§–æ—Ä–º–∞—Ç "HH:MM:SS" - –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
              const hours = parseInt(timeParts[0]) || 0;
              const minutes = parseInt(timeParts[1]) || 0;
              const result = hours * 60 + minutes; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã
              console.log(`üîß –§–æ—Ä–º–∞—Ç HH:MM:SS: ${hours}—á ${minutes}–º (—Å–µ–∫—É–Ω–¥—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è) = ${result} –º–∏–Ω—É—Ç`);
              return result;
            } else if (timeParts.length === 2) {
              // –§–æ—Ä–º–∞—Ç "MM:SS" - –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
              const minutes = parseInt(timeParts[0]) || 0;
              console.log(`üîß –§–æ—Ä–º–∞—Ç MM:SS: ${minutes}–º (—Å–µ–∫—É–Ω–¥—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è) = ${minutes} –º–∏–Ω—É—Ç`);
              return minutes;
            }
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)
          if (!isNaN(parseFloat(timeStr))) {
            const result = Math.floor(parseFloat(timeStr)); // –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Ü–µ–ª—ã—Ö –º–∏–Ω—É—Ç
            console.log(`üîß –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${result} (–æ–∫—Ä—É–≥–ª–µ–Ω–æ –≤–Ω–∏–∑)`);
            return result;
          }
          
          console.log(`üîß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏`);
          return 0;
        };
        
        if (gpsTime !== undefined) {
          minutesPlayed = parseTimeToMinutes(gpsTime);
          console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö: "${gpsTime}" -> ${minutesPlayed} –º–∏–Ω—É—Ç`);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ GPS, –±–µ—Ä–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞
          const playerStatResult = await db.select()
            .from(playerMatchStat)
            .where(and(
              eq(playerMatchStat.matchId, matchData.matchid),
              eq(playerMatchStat.playerId, playerId)
            ));

          if (playerStatResult.length > 0 && playerStatResult[0].minutesPlayed > 0) {
            minutesPlayed = playerStatResult[0].minutesPlayed;
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞: ${minutesPlayed} –º–∏–Ω—É—Ç`);
          } else {
            console.log(`‚è±Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${minutesPlayed} –º–∏–Ω—É—Ç`);
          }
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ –≥–¥–µ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª 60+ –º–∏–Ω—É—Ç (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
        if (minutesPlayed >= 60) {
          console.log(`‚úÖ –ú–∞—Ç—á ${matchData.matchid}: –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª ${minutesPlayed} –º–∏–Ω—É—Ç (>= 60)`);
          const metrics: Record<string, number> = {};
          
          console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ ${matchData.matchid}:`);
          console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, Object.keys(playerData));
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º Max Speed –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
          if (profile.columnMapping && Array.isArray(profile.columnMapping)) {
            profile.columnMapping.forEach((column: any) => {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Max Speed - –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å
              if (column.name === 'Max speed' || column.mappedColumn === 'Max Speed') {
                console.log(`üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫—É "${column.name}" - –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏`);
                return;
              }
              
              console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫—É "${column.name}" (–∫–æ–ª–æ–Ω–∫–∞ "${column.mappedColumn}"):`);
              console.log(`   - isVisible: ${column.isVisible}`);
              console.log(`   - mappedColumn –≤ –¥–∞–Ω–Ω—ã—Ö: ${playerData[column.mappedColumn] !== undefined}`);
              console.log(`   - –∑–Ω–∞—á–µ–Ω–∏–µ: ${playerData[column.mappedColumn]}`);
              
              if (column.isVisible && playerData[column.mappedColumn] !== undefined) {
                const rawValue = parseFloat(playerData[column.mappedColumn]) || 0;
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ 90 –º–∏–Ω—É—Ç
                const normalizedValue = minutesPlayed > 0 ? (rawValue / minutesPlayed) * 90 : 0;
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –¥–ª—è –∫–ª—é—á–∞ –º–µ—Ç—Ä–∏–∫–∏
                const displayKey = column.name;
                metrics[displayKey] = normalizedValue;
                
                console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ "${displayKey}": ${rawValue} -> ${normalizedValue} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)`);
              } else {
                console.log(`   ‚ùå –ú–µ—Ç—Ä–∏–∫–∞ "${column.name}" –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
              }
            });
          }

          console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ ${matchData.matchid}:`, metrics);
          playerMatchData.push({
            matchId: matchData.matchid,
            date: matchData.date,
            minutesPlayed,
            metrics
          });
        } else {
          console.log(`‚ùå –ú–∞—Ç—á ${matchData.matchid}: –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª ${minutesPlayed} –º–∏–Ω—É—Ç (< 60)`);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ ${matchData.matchid}:`, error);
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${playerMatchData.length} –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} —Å 60+ –º–∏–Ω—É—Ç–∞–º–∏`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π API)
    const averageMetrics: Record<string, { average: number; matchesCount: number; totalMinutes: number }> = {};
    
    if (playerMatchData.length > 0) {
      const totalMinutes = playerMatchData.reduce((sum, match) => sum + match.minutesPlayed, 0);
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º Max Speed –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
      if (profile.columnMapping && Array.isArray(profile.columnMapping)) {
        profile.columnMapping.forEach((column: any) => {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Max Speed - –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å
          if (column.name === 'Max speed' || column.mappedColumn === 'Max Speed') {
            return;
          }
          
          if (column.isVisible) {
            const displayKey = column.name;
            const values = playerMatchData
              .map(match => match.metrics[displayKey])
              .filter(value => value !== undefined && !isNaN(value));
            
            if (values.length > 0) {
              const average = values.reduce((sum, value) => sum + value, 0) / values.length;
              averageMetrics[displayKey] = {
                average,
                matchesCount: values.length,
                totalMinutes
              };
              
              // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è Total Distance (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
              if (column.name === 'Total distance') {
                console.log(`üìè –†–ê–°–ß–Å–¢ –°–†–ï–î–ù–ï–ì–û Total Distance:`);
                console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: ${values.length}`);
                console.log(`   - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–∞—Ç—á–∞–º:`, values);
                console.log(`   - –°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π: ${values.reduce((sum, value) => sum + value, 0)}`);
                console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${average}`);
                console.log(`   - –§–æ—Ä–º—É–ª–∞: ${values.join(' + ')} / ${values.length} = ${average}`);
              }
            }
          }
        });
      }
    }

    console.log('‚úÖ –ò–≥—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', {
      playerId,
      matchesCount: playerMatchData.length,
      metricsCount: Object.keys(averageMetrics).length
    });

    return NextResponse.json({
      averageMetrics,
      matchesCount: playerMatchData.length,
      totalMinutes: playerMatchData.reduce((sum, match) => sum + match.minutesPlayed, 0),
      analyzedMatches: playerMatchData.map(match => ({
        matchId: match.matchId,
        date: match.date,
        minutesPlayed: match.minutesPlayed
      }))
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 