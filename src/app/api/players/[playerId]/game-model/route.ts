import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { gpsReport, gpsProfile, match, playerMapping, playerMatchStat } from '@/db/schema';
import { eq, and, gte, desc, sql } from 'drizzle-orm';
import { getToken } from 'next-auth/jwt';
import * as jwt from 'jsonwebtoken';
import { getSubdomain } from '@/lib/utils';
import { getClubBySubdomain } from '@/services/user.service';
import { getUserPermissions } from '@/services/user.service';
import { hasPermission } from '@/lib/permissions';

export const dynamic = 'force-dynamic';
export const revalidate = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
async function getTokenFromRequest(request: NextRequest) {
  const token = await getToken({ req: request });
  if (token) return token;
  
  const authHeader = request.headers.get('Authorization');
  if (!authHeader?.startsWith('Bearer ')) return null;
  
  try {
    const bearerToken = authHeader.replace('Bearer ', '');
    const decodedToken = jwt.verify(
      bearerToken,
      (() => {
        if (!process.env.NEXTAUTH_SECRET) throw new Error('NEXTAUTH_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
        return process.env.NEXTAUTH_SECRET;
      })()
    ) as any;
    return {
      id: decodedToken.id,
      email: decodedToken.email,
      name: decodedToken.name,
      role: decodedToken.role,
      clubId: decodedToken.clubId,
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ clubId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—É–±–∞ –ø–æ subdomain
async function checkClubAccess(request: NextRequest, token: any) {
  const host = request.headers.get('host') || '';
  const subdomain = getSubdomain(host);
  if (!subdomain) return false;
  const club = await getClubBySubdomain(subdomain);
  if (!club) return false;
  return token.clubId === club.id;
}

/**
 * GET /api/players/[playerId]/game-model
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ GPS –¥–∞–Ω–Ω—ã—Ö
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { playerId: string } }
) {
  console.log('üöÄ API /api/players/[playerId]/game-model –≤—ã–∑–≤–∞–Ω');
  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { playerId: params.playerId, url: request.url });
  
  const token = await getTokenFromRequest(request);
  if (!token || typeof token.clubId !== 'string') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏:', {
    userId: token.id,
    hasPlayersRead: hasPermission(permissions, 'players.read'),
    hasGpsReportsRead: hasPermission(permissions, 'gpsReports.read'),
    permissions: Object.keys(permissions).filter(key => permissions[key])
  });
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîì –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
  /*
  if (!hasPermission(permissions, 'players.read')) {
    console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ players.read');
    return NextResponse.json({ error: 'Forbidden - no players.read permission' }, { status: 403 });
  }
  
  if (!hasPermission(permissions, 'gpsReports.read')) {
    console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ gpsReports.read');
    return NextResponse.json({ error: 'Forbidden - no gpsReports.read permission' }, { status: 403 });
  }
  */

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const { searchParams } = new URL(request.url);
    const profileId = searchParams.get('profileId');
    const teamId = searchParams.get('teamId');
    const playerId = params.playerId;

    if (!profileId || !teamId) {
      return NextResponse.json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã profileId –∏ teamId' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º GPS –ø—Ä–æ—Ñ–∏–ª—å
    const profileResult = await db.select().from(gpsProfile).where(eq(gpsProfile.id, profileId));
    if (profileResult.length === 0) {
      return NextResponse.json({ error: 'GPS –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const profile = profileResult[0];
    
    console.log('üìã GPS –ü—Ä–æ—Ñ–∏–ª—å:', {
      id: profile.id,
      name: profile.name,
      columnMapping: profile.columnMapping
    });
    
    // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º columnMapping
    interface ColumnMapping {
      name: string;
      mappedColumn: string;
      displayName: string;
      dataType: string;
      isVisible: boolean;
    }
    
    const columnMapping = profile.columnMapping as ColumnMapping[];
    console.log('üìã Column Mapping –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', columnMapping);
    const clubId = token.clubId;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏ (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è)
    const matchesWithReports = await db.execute(sql`
      SELECT 
        m."id" as "matchid",
        m."date",
        gr."id" as "reportid",
        gr."processedData" as "processeddata"
      FROM "Match" m
      INNER JOIN "GpsReport" gr ON gr."eventId" = m."id" 
        AND gr."eventType" = 'MATCH' 
        AND gr."clubId" = ${clubId}::uuid
        AND gr."profileId" = ${profileId}::uuid
      WHERE m."teamId" = ${teamId}::uuid 
        AND m."clubId" = ${clubId}::uuid
      ORDER BY m."date" DESC
    `);

    const matches = (matchesWithReports as any).rows || [];
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
    
    if (matches.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
      return NextResponse.json({
        averageMetrics: {},
        matchesCount: 0,
        totalMinutes: 0,
        analyzedMatches: [],
        debug: {
          message: '–ù–µ—Ç –º–∞—Ç—á–µ–π —Å GPS –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
          profileId,
          teamId,
          playerId
        }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
    const playerMatchData: Array<{
      matchId: string;
      date: string;
      minutesPlayed: number;
      metrics: Record<string, number>;
    }> = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π
    const recentMatches = matches.slice(0, 10);
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentMatches.length} –º–∞—Ç—á–µ–π`);

                    for (const matchData of recentMatches) {
                  try {
                    console.log(`üèà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á:`, {
                      matchId: matchData.matchid,
                      date: matchData.date,
                      reportId: matchData.reportid,
                      processedDataLength: matchData.processeddata?.length || 0
                    });
                    
                    const processedData = matchData.processeddata || [];
                    
                    console.log(`üîç –ú–∞—Ç—á ${matchData.matchid}: –Ω–∞–π–¥–µ–Ω–æ ${processedData.length} –∏–≥—Ä–æ–∫–æ–≤`);
                    console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ processedData:`, {
                      type: typeof processedData,
                      isArray: Array.isArray(processedData),
                      length: processedData.length,
                      sample: processedData.length > 0 ? processedData[0] : null
                    });
                    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:`, processedData.map((p: any) => ({
                      playerId: p.playerId || p.player_id || p.name || p.playerName || p.Name || p.NAME,
                      name: p.name || p.Name || p.NAME,
                      keys: Object.keys(p)
                    })));
                    
                    // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                    const playerMappings = await db.select()
                      .from(playerMapping)
                      .where(and(
                        eq(playerMapping.playerId, playerId),
                        eq(playerMapping.teamId, teamId),
                        eq(playerMapping.clubId, clubId),
                        eq(playerMapping.isActive, true)
                      ));

                    console.log(`üîó –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, playerMappings);

                    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    let playerData = null;
                    
                    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    playerData = processedData.find((player: any) => {
                      const playerIdInData = player.playerId || player.player_id;
                      return playerIdInData === playerId;
                    });

                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –∏–º–µ–Ω
                    if (!playerData && playerMappings.length > 0) {
                      console.log(`üîç –ò—â–µ–º –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –∏–º–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:`, playerMappings.map(m => ({
                        reportName: m.reportName,
                        playerId: m.playerId
                      })));
                      
                      for (const mapping of playerMappings) {
                        // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
                        playerData = processedData.find((player: any) => {
                          const playerNameInData = player.name || player.Name || player.NAME || player.playerName;
                          const isMatch = playerNameInData === mapping.reportName;
                          if (isMatch) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${playerNameInData}" === "${mapping.reportName}"`);
                          }
                          return isMatch;
                        });
                        
                        if (playerData) {
                          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É: ${mapping.reportName} -> ${playerId}`);
                          break;
                        }
                      }
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
                    if (!playerData) {
                      console.log(`üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
                      
                      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                      const playerResult = await db.execute(sql`
                        SELECT "firstName", "lastName" FROM "Player" WHERE "id" = ${playerId}::uuid
                      `);
                      
                      if (playerResult.rows && playerResult.rows.length > 0) {
                        const player = playerResult.rows[0] as any;
                        const playerFullName = `${player.firstName} ${player.lastName}`;
                        console.log(`üîç –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º: "${playerFullName}"`);
                        
                        // –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                        playerData = processedData.find((player: any) => {
                          const playerNameInData = player.name || player.Name || player.NAME || player.playerName;
                          const isMatch = playerNameInData.toLowerCase().includes(playerFullName.toLowerCase()) ||
                                        playerFullName.toLowerCase().includes(playerNameInData.toLowerCase());
                          
                          if (isMatch) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${playerNameInData}" ~ "${playerFullName}"`);
                          }
                          return isMatch;
                        });
                      }
                    }

                    console.log(`üîç –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ ${playerId} –≤ –º–∞—Ç—á–µ ${matchData.matchid}`);
                    if (playerData) {
                      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –≤ –º–∞—Ç—á–µ ${matchData.matchid}:`, Object.keys(playerData));
                    } else {
                      console.log(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç—á–µ ${matchData.matchid}`);
                    }

                          if (playerData) {
           // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞
           let minutesPlayed = 90; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 90 –º–∏–Ω—É—Ç
           
           // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ—Ñ–∏–ª–µ B-SIGHT —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Time")
           const gpsTime = playerData.Time || playerData.time || playerData.TIME || 
                          playerData.minutes || playerData.MINUTES || playerData.Minutes ||
                          playerData.duration || playerData.DURATION || playerData.Duration;
           
           // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "HH:MM:SS" –≤ –º–∏–Ω—É—Ç—ã (—Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –º–∏–Ω—É—Ç—ã)
           const parseTimeToMinutes = (timeStr: string): number => {
             console.log(`üîß –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏: "${timeStr}"`);
             
             if (!timeStr) {
               console.log(`üîß –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏`);
               return 0;
             }
             
             // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ, —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
             if (timeStr.includes(':')) {
               const timeParts = timeStr.split(':');
               console.log(`üîß –ß–∞—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏:`, timeParts);
               
               if (timeParts.length === 3) {
                 // –§–æ—Ä–º–∞—Ç "HH:MM:SS" - –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                 const hours = parseInt(timeParts[0]) || 0;
                 const minutes = parseInt(timeParts[1]) || 0;
                 const result = hours * 60 + minutes; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã
                 console.log(`üîß –§–æ—Ä–º–∞—Ç HH:MM:SS: ${hours}—á ${minutes}–º (—Å–µ–∫—É–Ω–¥—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è) = ${result} –º–∏–Ω—É—Ç`);
                 return result;
               } else if (timeParts.length === 2) {
                 // –§–æ—Ä–º–∞—Ç "MM:SS" - –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
                 const minutes = parseInt(timeParts[0]) || 0;
                 console.log(`üîß –§–æ—Ä–º–∞—Ç MM:SS: ${minutes}–º (—Å–µ–∫—É–Ω–¥—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è) = ${minutes} –º–∏–Ω—É—Ç`);
                 return minutes;
               }
             }
             
             // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)
             if (!isNaN(parseFloat(timeStr))) {
               const result = Math.floor(parseFloat(timeStr)); // –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Ü–µ–ª—ã—Ö –º–∏–Ω—É—Ç
               console.log(`üîß –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${result} (–æ–∫—Ä—É–≥–ª–µ–Ω–æ –≤–Ω–∏–∑)`);
               return result;
             }
             
             console.log(`üîß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏`);
             return 0;
           };
           
           if (gpsTime !== undefined) {
             minutesPlayed = parseTimeToMinutes(gpsTime);
             console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–∑ GPS –¥–∞–Ω–Ω—ã—Ö: "${gpsTime}" -> ${minutesPlayed} –º–∏–Ω—É—Ç`);
           } else {
             // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ GPS, –±–µ—Ä–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞
             const playerStatResult = await db.select()
               .from(playerMatchStat)
               .where(and(
                 eq(playerMatchStat.matchId, matchData.matchid),
                 eq(playerMatchStat.playerId, playerId)
               ));

             if (playerStatResult.length > 0 && playerStatResult[0].minutesPlayed > 0) {
               minutesPlayed = playerStatResult[0].minutesPlayed;
               console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞: ${minutesPlayed} –º–∏–Ω—É—Ç`);
             } else {
               console.log(`‚è±Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${minutesPlayed} –º–∏–Ω—É—Ç`);
             }
           }

           // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ –≥–¥–µ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª 60+ –º–∏–Ω—É—Ç
           if (minutesPlayed >= 60) {
            console.log(`‚úÖ –ú–∞—Ç—á ${matchData.matchid}: –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª ${minutesPlayed} –º–∏–Ω—É—Ç (>= 60)`);
            const metrics: Record<string, number> = {};
            
            console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ ${matchData.matchid}:`);
            console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, Object.keys(playerData));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º Max Speed –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
            columnMapping.forEach(column => {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Max Speed - –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å
              if (column.name === 'Max speed' || column.mappedColumn === 'Max Speed') {
                console.log(`üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫—É "${column.name}" - –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏`);
                return;
              }
              
              console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫—É "${column.name}" (–∫–æ–ª–æ–Ω–∫–∞ "${column.mappedColumn}"):`);
              console.log(`   - isVisible: ${column.isVisible}`);
              console.log(`   - mappedColumn –≤ –¥–∞–Ω–Ω—ã—Ö: ${playerData[column.mappedColumn] !== undefined}`);
              console.log(`   - –∑–Ω–∞—á–µ–Ω–∏–µ: ${playerData[column.mappedColumn]}`);
              
              if (column.isVisible && playerData[column.mappedColumn] !== undefined) {
                const rawValue = parseFloat(playerData[column.mappedColumn]) || 0;
                const displayKey = column.name;

                // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö/—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º
                const isRateOrPercent = displayKey === 'HSR%' || displayKey === 'm/min' || displayKey?.toLowerCase()?.includes('/min');

                const valueForModel = isRateOrPercent
                  ? rawValue
                  : (minutesPlayed > 0 ? (rawValue / minutesPlayed) * 90 : 0);

                metrics[displayKey] = valueForModel;
                
                // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è Total Distance
                if (column.name === 'Total distance' || column.mappedColumn === 'Total distance') {
                  console.log(`üìè –î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–°–ß–Å–¢ Total Distance:`);
                  console.log(`   - –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ GPS: ${playerData[column.mappedColumn]}`);
                  console.log(`   - –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${rawValue}`);
                  console.log(`   - –í—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ: ${minutesPlayed} –º–∏–Ω—É—Ç`);
                  console.log(`   - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: (${rawValue} / ${minutesPlayed}) * 90 = ${(minutesPlayed > 0 ? (rawValue / minutesPlayed) * 90 : 0)}`);
                  console.log(`   - –§–æ—Ä–º—É–ª–∞: ${rawValue} / ${minutesPlayed} * 90`);
                }
                
                console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ "${displayKey}": ${rawValue} -> ${valueForModel} (${isRateOrPercent ? '–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏' : '–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ per90'})`);
              } else {
                console.log(`   ‚ùå –ú–µ—Ç—Ä–∏–∫–∞ "${column.name}" –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
              }
            });

            console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ ${matchData.matchid}:`, metrics);
            playerMatchData.push({
              matchId: matchData.matchid,
              date: matchData.date,
              minutesPlayed,
              metrics
            });
          } else {
            console.log(`‚ùå –ú–∞—Ç—á ${matchData.matchid}: –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª ${minutesPlayed} –º–∏–Ω—É—Ç (< 60)`);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ ${matchData.matchid}:`, error);
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${playerMatchData.length} –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} —Å 60+ –º–∏–Ω—É—Ç–∞–º–∏`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const averageMetrics: Record<string, { average: number; matchesCount: number; totalMinutes: number }> = {};
    
    if (playerMatchData.length > 0) {
      const totalMinutes = playerMatchData.reduce((sum, match) => sum + match.minutesPlayed, 0);
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º Max Speed –∏–∑ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
      columnMapping.forEach(column => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Max Speed - –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å
        if (column.name === 'Max speed' || column.mappedColumn === 'Max Speed') {
          return;
        }
        
        if (column.isVisible) {
          const displayKey = column.name;
          const values = playerMatchData
            .map(match => match.metrics[displayKey])
            .filter(value => value !== undefined && !isNaN(value));
          
          if (values.length > 0) {
            const average = values.reduce((sum, value) => sum + value, 0) / values.length;
            averageMetrics[displayKey] = {
              average,
              matchesCount: values.length,
              totalMinutes
            };
            
            // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è Total Distance
            if (column.name === 'Total distance') {
              console.log(`üìè –†–ê–°–ß–Å–¢ –°–†–ï–î–ù–ï–ì–û Total Distance:`);
              console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: ${values.length}`);
              console.log(`   - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–∞—Ç—á–∞–º:`, values);
              console.log(`   - –°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π: ${values.reduce((sum, value) => sum + value, 0)}`);
              console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${average}`);
              console.log(`   - –§–æ—Ä–º—É–ª–∞: ${values.join(' + ')} / ${values.length} = ${average}`);
            }
          }
        }
      });
    }

    const result = {
      averageMetrics,
      matchesCount: playerMatchData.length,
      totalMinutes: playerMatchData.reduce((sum, match) => sum + match.minutesPlayed, 0),
      analyzedMatches: playerMatchData.map(match => ({
        matchId: match.matchId,
        date: match.date,
        minutesPlayed: match.minutesPlayed
      }))
    };
    
    console.log(`üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, {
      matchesCount: result.matchesCount,
      totalMinutes: result.totalMinutes,
      averageMetricsKeys: Object.keys(result.averageMetrics),
      analyzedMatches: result.analyzedMatches
    });
    
    return NextResponse.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏' }, { status: 500 });
  }
} 