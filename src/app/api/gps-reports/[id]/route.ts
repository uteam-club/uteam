import { NextRequest, NextResponse } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { getUserPermissions } from '@/services/user.service';
import { hasPermission } from '@/lib/permissions';
import { getSubdomain } from '@/lib/utils';
import { getClubBySubdomain } from '@/services/user.service';
import { db } from '@/lib/db';
import { gpsReport, player } from '@/db/schema';
import { eq, and, inArray } from 'drizzle-orm';
import { PlayerMappingService } from '@/services/playerMapping.service';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É
async function checkClubAccess(request: NextRequest, token: any) {
  const host = request.headers.get('host') || '';
  const subdomain = getSubdomain(host);
  if (!subdomain) return false;
  const club = await getClubBySubdomain(subdomain);
  if (!club) return false;
  return token.clubId === club.id;
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–∞ –ø–æ ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const token = await getToken({ req: request });
  if (!token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const permissions = await getUserPermissions(token.id);
  if (!hasPermission(permissions, 'gpsReports.read')) {
    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  }

  const hasAccess = await checkClubAccess(request, token);
  if (!hasAccess) {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const reportId = params.id;

    if (!reportId) {
      return NextResponse.json({ error: 'Missing report ID' }, { status: 400 });
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º GPS –æ—Ç—á–µ—Ç –ø–æ ID:', reportId);

    const [report] = await db
      .select()
      .from(gpsReport)
      .where(
        and(
          eq(gpsReport.id, reportId),
          eq(gpsReport.clubId, token.clubId)
        )
      );

    if (!report) {
      return NextResponse.json({ error: 'Report not found' }, { status: 404 });
    }

    console.log('‚úÖ GPS –æ—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω:', {
      id: report.id,
      name: report.name,
      eventType: report.eventType,
      eventId: report.eventId,
      processedDataLength: Array.isArray(report.processedData) ? report.processedData.length : 0
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedReport = await processPlayerNames(report, token.clubId);

    return NextResponse.json(processedReport);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ GPS –æ—Ç—á–µ—Ç–∞:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ
async function processPlayerNames(report: any, clubId: string) {
  if (!report.processedData || !Array.isArray(report.processedData)) {
    return report;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const playerMappings = await PlayerMappingService.getTeamMappings(report.teamId, clubId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –º–∞–ø–ø–∏–Ω–≥–æ–≤
    const mappingMap = new Map();
    playerMappings.forEach((mapping: any) => {
      const reportName = mapping.reportName ? mapping.reportName.toLowerCase() : mapping.mapping?.reportName?.toLowerCase();
      const playerId = mapping.selectedPlayerId || mapping.player?.id;
      if (reportName && playerId) {
        mappingMap.set(reportName, playerId);
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const playerIds = Array.from(mappingMap.values());
    const playerDataMap = new Map();
    
    if (playerIds.length > 0) {
      const playersData = await db
        .select({ id: player.id, firstName: player.firstName, lastName: player.lastName })
        .from(player)
        .where(inArray(player.id, playerIds));
      
      playersData.forEach(p => {
        const fullName = `${p.firstName || ''} ${p.lastName || ''}`.trim();
        playerDataMap.set(p.id, fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫');
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    const processedData = report.processedData.map((row: any) => {
      if (row.name && row.playerId) {
        const appPlayerName = playerDataMap.get(row.playerId);
        if (appPlayerName) {
          return { ...row, name: appPlayerName };
        }
      }
      return row;
    });

    return {
      ...report,
      processedData
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤:', error);
    return report; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–∞
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üóëÔ∏è API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:', params.id);
  
  const token = await getToken({ req: request });
  if (!token) {
    console.log('‚ùå API: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  console.log('üîë API: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', { userId: token.id, clubId: token.clubId });

  const permissions = await getUserPermissions(token.id);
  console.log('üîê API: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', permissions);
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // if (!hasPermission(permissions, 'gpsReports.delete')) {
  //   console.log('‚ùå API: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤');
  //   return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  // }

  const hasAccess = await checkClubAccess(request, token);
  console.log('üè¢ API: –î–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É:', hasAccess);
  
  if (!hasAccess) {
    console.log('‚ùå API: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É');
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—É–±—É' }, { status: 403 });
  }

  try {
    const reportId = params.id;
    console.log('üîç API: –ò—â–µ–º –æ—Ç—á–µ—Ç:', reportId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingReport = await db
      .select()
      .from(gpsReport)
      .where(
        and(
          eq(gpsReport.id, reportId),
          eq(gpsReport.clubId, token.clubId)
        )
      )
      .limit(1);

    console.log('üìä API: –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç:', existingReport.length > 0 ? existingReport[0] : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (existingReport.length === 0) {
      console.log('‚ùå API: –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ error: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç
    console.log('üóëÔ∏è API: –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    await db
      .delete(gpsReport)
      .where(
        and(
          eq(gpsReport.id, reportId),
          eq(gpsReport.clubId, token.clubId)
        )
      );

    console.log('‚úÖ API: –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    return NextResponse.json({ message: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ GPS –æ—Ç—á–µ—Ç–∞:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 