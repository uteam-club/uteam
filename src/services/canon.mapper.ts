// src/services/canon.mapper.ts
import { CANON } from '@/canon/metrics.registry';
import { toCanonical } from '@/canon/units';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫
function normalizePlayerKey(s: string) {
  return (s ?? '')
    .toString()
    .toLowerCase()
    .normalize('NFKD')
    .replace(/[—ë]/g, '–µ')
    .replace(/[''`¬¥\-_.]+/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

function isSummaryRow(name: string) {
  const n = normalizePlayerKey(name);
  return n.includes('—Å—Ä–µ–¥–Ω') || n.includes('—Å—É–º–º') || n.includes('average') || n.includes('total');
}

export type CanonColumn = {
  sourceHeader: string;    // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –∏–º—è –ø–æ–ª—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
  canonicalKey: string;    // –∫–ª—é—á –∏–∑ CANON.metrics.key
  dimension: string;       // –∏–∑–º–µ—Ä–µ–Ω–∏–µ (distance/time/speed/ratio/identity/...)
  unitCanon: string;       // –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∏–∑ dimension)
  sourceUnit?: string;     // –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "(km/h)"
  isIdentity?: boolean;    // true –¥–ª—è identity-–ø–æ–ª–µ–π
};

const METRICS_BY_KEY = new Map(CANON.metrics.map(m => [m.key, m]));
const DIMENSIONS = CANON.dimensions;

/** –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: "Max Speed (km/h)" -> "km/h" */
export function guessUnitFromHeader(header: string): string | undefined {
  if (!header) return undefined;
  const trimmed = header.trim();

  // % –±–µ–∑ —Å–∫–æ–±–æ–∫: "HSR%" -> "%"
  if (/%$/.test(trimmed)) return '%';

  // –ï–¥–∏–Ω–∏—Ü—ã –≤ —Å–∫–æ–±–∫–∞—Ö: "Max Speed (km/h)" -> "km/h"
  const m = trimmed.match(/\(([^)]+)\)\s*$/);
  return m?.[1]?.trim();
}

/** –°—Ç—Ä–æ–∏–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è -> –∫–∞–Ω–æ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ canonicalKey */
export function buildCanonColumns(profileColumnMapping: any[]): CanonColumn[] {
  if (!Array.isArray(profileColumnMapping)) return [];
  const cols: CanonColumn[] = [];

  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (process.env.GPS_DEBUG === '1') {
    console.log('üîç GPS Debug - buildCanonColumns input:', {
      profileColumnMappingLength: profileColumnMapping.length,
      profileColumnMapping: profileColumnMapping.map(c => ({
        type: c?.type,
        canonicalKey: c?.canonicalKey,
        mappedColumn: c?.mappedColumn,
        name: c?.name
      }))
    });
  }

  for (const c of profileColumnMapping) {
    if (c?.type !== 'formula' && c?.canonicalKey && c?.mappedColumn) {
      const metric = METRICS_BY_KEY.get(c.canonicalKey);
      if (!metric) continue;

      const dim = DIMENSIONS[metric.dimension];
      const col: CanonColumn = {
        sourceHeader: String(c.mappedColumn),
        canonicalKey: metric.key,
        dimension: metric.dimension,
        unitCanon: dim?.canonical_unit ?? 'string',
        isIdentity: metric.dimension === 'identity',
      };

      // –µ—Å–ª–∏ —É–¥–∞—Å—Ç—Å—è –ø–æ–Ω—è—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É
      const guessed = guessUnitFromHeader(col.sourceHeader);
      if (guessed) col.sourceUnit = guessed;

      cols.push(col);
    }
  }

  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (process.env.GPS_DEBUG === '1') {
    console.log('üîç GPS Debug - buildCanonColumns result:', {
      columnsCount: cols.length,
      columns: cols.map(col => ({
        sourceHeader: col.sourceHeader,
        canonicalKey: col.canonicalKey,
        dimension: col.dimension,
        unitCanon: col.unitCanon,
        sourceUnit: col.sourceUnit
      }))
    });
  }

  return cols;
}

/** –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å —á–∏—Å–ª–∞: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è */
export function toNumberSafe(v: any): number | null {
  if (v === null || v === undefined) return null;
  if (typeof v === 'number') return Number.isFinite(v) ? v : null;
  
  const s = String(v).trim().replace(',', '.').replace(/\s+/g, '');
  
  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (process.env.GPS_DEBUG === '1') {
    console.log(`[CANON] toNumberSafe input: "${v}" -> "${s}"`);
  }
  
  // –û–±—ã—á–Ω—ã–π –ø–∞—Ä—Å —á–∏—Å–ª–∞
  const n = parseFloat(s);
  return Number.isFinite(n) ? n : null;
}

/** –ü–∞—Ä—Å –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏–ª–∏ HH:MM –≤ –º–∏–Ω—É—Ç—ã */
export function parseTimeToMinutes(v: any): number | null {
  if (v === null || v === undefined) return null;
  if (typeof v === 'number') return Number.isFinite(v) ? v : null;
  
  const s = String(v).trim().replace(/\s+/g, '');
  
  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  if (process.env.GPS_DEBUG === '1') {
    console.log(`[CANON] parseTimeToMinutes input: "${v}" -> "${s}"`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM:SS –∏–ª–∏ HH:MM
  const timeMatch = s.match(/^(\d{1,2}):(\d{2})(?::(\d{2}))?$/);
  if (timeMatch) {
    const hours = parseInt(timeMatch[1], 10);
    const minutes = parseInt(timeMatch[2], 10);
    const seconds = timeMatch[3] ? parseInt(timeMatch[3], 10) : 0;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã)
    const totalMinutes = hours * 60 + minutes + seconds / 60;
    
    if (process.env.GPS_DEBUG === '1') {
      console.log(`[CANON] Time conversion: ${s} -> ${totalMinutes} minutes (${hours}h ${minutes}m ${seconds}s)`);
    }
    
    return totalMinutes;
  }
  
  // –ï—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å —á–∏—Å–ª–∞
  const n = parseFloat(s);
  return Number.isFinite(n) ? n : null;
}

/** –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–∑–º–µ—Ä–µ–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫—É—é –µ–¥–∏–Ω–∏—Ü—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) */
export function toCanonicalValue(
  value: any,
  col: CanonColumn
): { value: number | string | null; warning?: string } {
  // identity ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
  if (col.isIdentity) {
    const s = value == null ? '' : String(value);
    return { value: s };
  }

  const metric = METRICS_BY_KEY.get(col.canonicalKey)!;
  const dim = DIMENSIONS[metric.dimension];
  if (!dim) return { value: toNumberSafe(value) };

  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
  let num: number | null;
  if (col.canonicalKey === 'minutes_played' || col.canonicalKey === 'time_played') {
    // –î–ª—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
    num = parseTimeToMinutes(value);
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å —á–∏—Å–µ–ª
    num = toNumberSafe(value);
  }
  
  if (num === null) return { value: null };
  
  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (process.env.GPS_DEBUG === '1') {
    console.log(`[CANON] Processing value: ${value} -> ${num}, dimension="${metric.dimension}", canonicalKey="${col.canonicalKey}"`);
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ratio
  if (metric.dimension === 'ratio') {
    // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ratio
    if (process.env.GPS_DEBUG === '1') {
      console.log(`[CANON] Ratio processing: value=${num}, sourceUnit="${col.sourceUnit}", canonicalKey="${col.canonicalKey}"`);
    }
    
    // –ï—Å–ª–∏ —è–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ %
    if (col.sourceUnit === '%') {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–ª—é (0..1.1) ‚Äî –Ω–µ –¥–µ–ª–∏–º –µ—â—ë —Ä–∞–∑
      if (num <= 1.1) return { value: num };
      // –ò–Ω–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      try {
        const converted = toCanonical(num, '%', 'ratio');
        return { value: converted };
      } catch { return { value: num }; }
    }
    
    // –î–ª—è B-SIGHT –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    // –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è > 1 –∏ <= 100 –¥–µ–ª–∏–ª–∏—Å—å –Ω–∞ 100
    // –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    return { value: num };
  }

  // –ï—Å—Ç—å —è–≤–Ω–∞—è –∏—Å—Ö–æ–¥–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ -> –ø—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–æ–Ω
  if (col.sourceUnit && col.sourceUnit !== dim.canonical_unit) {
    try {
      const converted = toCanonical(num, col.sourceUnit, metric.dimension as any);
      return { value: converted };
    } catch {
      return { value: num, warning: `no-conversion:${col.sourceUnit}->${dim.canonical_unit}` };
    }
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —É–∂–µ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π –µ–¥–∏–Ω–∏—Ü–µ
  return { value: num };
}

/** –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –∏–≥—Ä–æ–∫) */
export function mapRowsToCanonical(
  rows: Record<string, any>[],
  columns: CanonColumn[],
  opts?: { processedRows?: any[]; processedRowsMap?: Map<number, any>; debug?: boolean }
) {
  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (process.env.GPS_DEBUG === '1') {
    console.log('üîç GPS Debug - mapRowsToCanonical input:', {
      rowsCount: rows.length,
      columnsCount: columns.length,
      firstRowKeys: rows[0] ? Object.keys(rows[0]) : [],
      columns: columns.map(col => ({
        sourceHeader: col.sourceHeader,
        canonicalKey: col.canonicalKey,
        dimension: col.dimension
      }))
    });
  }

  const warnings: string[] = [];
  const canonRows: Record<string, any>[] = [];
  const inputCount = rows.length;
  let filteredCount = 0;

  for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
    const row = rows[rowIndex];
    const out: Record<string, any> = {};
    
    const pr = opts?.processedRowsMap?.get(rowIndex) ?? opts?.processedRows?.[rowIndex] ?? null;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ athlete_id –≤ processedRows
    if (opts && !pr?.athlete_id && !pr?.playerId) {
      filteredCount++;
      if (opts.debug) {
        console.log(`[CANON] filtered row ${rowIndex}: no athlete_id/playerId`);
      }
      continue;
    }
    
    if (opts?.debug && pr) {
      console.log(`[CANON] matched row ${rowIndex}: athlete_id=${pr.athlete_id || pr.playerId}`);
    }
    
    /** –∏–º—è –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: processed ‚Üí raw */
    const nameFromProcessed =
      pr?.athlete_name ?? pr?.name ?? pr?.playerName ?? pr?.player ?? null;
    const nameFromRaw =
      row['athlete_name'] ?? row['name'] ?? row['Name'] ?? row['Player'] ?? row['–ò–≥—Ä–æ–∫'] ?? null;

    const athleteName = (nameFromProcessed ?? nameFromRaw);
    if (athleteName) out.athlete_name = String(athleteName).trim();
    
    // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
    if (opts?.debug) {
      console.log(`[CANON] Row ${rowIndex}: nameFromProcessed="${nameFromProcessed}", nameFromRaw="${nameFromRaw}", final="${athleteName}"`);
    }

    /** id –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ processed */
    const athleteId = pr?.athlete_id ?? pr?.playerId ?? null;
    if (athleteId) out.athlete_id = String(athleteId);
    
    /** confidence score –∏ mapping type, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ processed */
    if (pr?.confidenceScore !== undefined) out.confidenceScore = pr.confidenceScore;
    if (pr?.mappingType) out.mappingType = pr.mappingType;
    
    for (const col of columns) {
      const rawVal =
        row[col.sourceHeader] ??
        row[col.sourceHeader.trim()] ??
        // —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π: –≤ B-SIGHT –º—ã —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–ª–∏ –ø–æ–ª—è "TD", "Max Speed" –∏ —Ç.–ø.
        row[col.canonicalKey] ?? // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        row[col.sourceHeader.replace(/\s+/g, ' ')] ??
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è B-SIGHT –ø–æ–ª–µ–π
        row['TD'] ?? // –¥–ª—è total_distance
        row['Time'] ?? // –¥–ª—è time
        row['Max Speed'] ?? // –¥–ª—è max_speed
        row['Z-5 Sprint'] ?? // –¥–ª—è zone5_sprint
        row['HSR'] ?? // –¥–ª—è hsr
        row['HSR%'] ?? // –¥–ª—è hsr_percentage
        row['Z-3 Tempo'] ?? // –¥–ª—è zone3_tempo
        row['Z-4 HIR'] ?? // –¥–ª—è zone4_hir
        row['Acc'] ?? // –¥–ª—è accelerations
        row['Dec']; // –¥–ª—è decelerations

      // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
      if (opts?.debug && rowIndex < 3) {
        console.log(`[CANON] Row ${rowIndex}, Column ${col.canonicalKey}: sourceHeader="${col.sourceHeader}", rawVal="${rawVal}"`);
        console.log(`[CANON] Available row keys:`, Object.keys(row).slice(0, 10));
      }

      const { value, warning } = toCanonicalValue(rawVal, col);
      if (warning) warnings.push(`${col.canonicalKey}:${warning}`);
      if (value !== null && value !== '') {
        out[col.canonicalKey] = value;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏
        const metaMetric = METRICS_BY_KEY.get(col.canonicalKey);
        if (metaMetric && typeof value === 'number') {
          if (Number.isFinite(metaMetric.plausibleMin) && value < (metaMetric.plausibleMin as number)) {
            warnings.push(`${col.canonicalKey}:below-min:${value}`);
          }
          if (Number.isFinite(metaMetric.plausibleMax) && value > (metaMetric.plausibleMax as number)) {
            warnings.push(`${col.canonicalKey}:above-max:${value}`);
          }
        }
      }
    }
    
    // –í—Ç–æ—Ä–æ–π –±–∞—Ä—å–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –ø—É—à–µ–º –≤ canonical
    const nameCandidate =
      out.athlete_name ??
      row['athlete_name'] ?? row['name'] ?? row['Name'] ?? row['Player'] ?? row['–ò–≥—Ä–æ–∫'] ?? '';

    if (isSummaryRow(String(nameCandidate))) {
      if (opts?.debug) console.log('[GPS] drop summary row at mapper:', nameCandidate);
      filteredCount++; // —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é
      continue;
    }
    
    // –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º athlete_name)
    if (Object.keys(out).length > 0) canonRows.push(out);
  }

  // GPS Debug: –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (process.env.GPS_DEBUG === '1') {
    console.log('üîç GPS Debug - mapRowsToCanonical result:', {
      canonRowsCount: canonRows.length,
      firstCanonRowKeys: canonRows[0] ? Object.keys(canonRows[0]) : [],
      warningsCount: warnings.length,
      warnings: warnings.slice(0, 10) // –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    });
  }

  return {
    rows: canonRows,
    meta: {
      canonVersion: CANON.__meta.version,
      units: Object.fromEntries(
        Object.entries(DIMENSIONS).map(([k, v]) => [k, v.canonical_unit])
      ),
      warnings: Array.from(new Set(warnings)).slice(0, 100),
      counts: {
        input: inputCount,
        filtered: filteredCount,
        canonical: canonRows.length
      },
    },
  };
}
