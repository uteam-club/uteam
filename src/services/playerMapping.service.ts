import { db } from '@/lib/db';
import { playerMapping, player, team } from '@/db/schema';
import { eq, and, or, like, desc } from 'drizzle-orm';

export interface PlayerMappingResult {
  reportName: string;
  suggestedPlayer: any | null;
  confidence: number;
  alternatives: any[];
  action: 'confirm' | 'create' | 'skip' | 'manual';
  mappingId?: string;
  source?: 'saved' | 'fuzzy';
}

export interface PlayerMappingInput {
  reportName: string;
  gpsSystem: string;
  teamId: string;
  clubId: string;
  createdById: string;
}

export class PlayerMappingService {
  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∏–≥—Ä–æ–∫–∞
   */
  static async findExistingMapping(
    reportName: string, 
    gpsSystem: string, 
    teamId: string, 
    clubId: string
  ) {
    const existing = await db
      .select()
      .from(playerMapping)
      .where(
        and(
          eq(playerMapping.reportName, reportName),
          eq(playerMapping.teamId, teamId),
          eq(playerMapping.clubId, clubId),
          eq(playerMapping.isActive, true)
        )
      )
      .limit(1);

    return existing[0] || null;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
   */
  static async autoMatchPlayer(
    reportName: string,
    teamId: string,
    clubId: string,
    gpsSystem?: string
  ): Promise<PlayerMappingResult> {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥
    const existingMapping = await this.findExistingMapping(reportName, gpsSystem || 'unknown', teamId, clubId);
    if (existingMapping) {
      console.log('üîç Found existing mapping for', reportName, ':', existingMapping);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const playerData = await db
        .select()
        .from(player)
        .where(eq(player.id, existingMapping.playerId))
        .limit(1);

      if (playerData.length === 0) {
        // –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –±–∏—Ç—É—é —Å–≤—è–∑–∫—É
        if (process.env.GPS_DEBUG === '1') {
          await db
            .delete(playerMapping)
            .where(eq(playerMapping.id, existingMapping.id));
          console.log('[AUTO-MATCH] removed stale mapping', existingMapping.id);
        }
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π fuzzy –ø–æ–∏—Å–∫
      } else {
        console.log('üîç Player data for existing mapping:', playerData);
        return {
          reportName,
          suggestedPlayer: playerData[0] || null,
          confidence: existingMapping.confidenceScore,
          alternatives: [],
          action: 'confirm',
          mappingId: existingMapping.id,
          source: 'saved'
        };
      }
    }

    // 2. –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
    const teamPlayers = await db
      .select()
      .from(player)
      .where(eq(player.teamId, teamId));

    // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    const matches = this.fuzzyMatch(reportName, teamPlayers);
    console.log('üîç Fuzzy matches for', reportName, ':', matches);
    
    if (matches.length === 0) {
      console.log('üîç No matches found for', reportName);
      return {
        reportName,
        suggestedPlayer: null,
        confidence: 0,
        alternatives: [],
        action: 'create' // –ò–≥—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
      };
    }

    const bestMatch = matches[0];
    console.log('üîç Best match for', reportName, ':', bestMatch);
    
    // –ï—Å–ª–∏ –ª—É—á—à–∏–π score <= 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º manual
    if (bestMatch.score <= 0) {
      return {
        reportName,
        suggestedPlayer: null,
        confidence: 0,
        alternatives: [],
        action: 'manual'
      };
    }
    
    const AUTO_CONFIRM_THRESHOLD = 0.30; // –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: –Ω–∏–∑–∫–∏–π (30%+), —Å—Ä–µ–¥–Ω–∏–π (50%+), –≤—ã—Å–æ–∫–∏–π (80%+)

    const score = bestMatch?.score ?? 0;
    const action = score >= AUTO_CONFIRM_THRESHOLD ? 'confirm' : 'manual';
    
    return {
      reportName,
      action,
      confidence: score,
      suggestedPlayer: bestMatch?.player ?? null,
      alternatives: [], // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      source: 'fuzzy'
    };
  }

  /**
   * –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω
   */
  private static fuzzyMatch(reportName: string, players: any[]): Array<{player: any, score: number}> {
    const normalizedReportName = this.normalizeName(reportName);
    
    return players
      .map(player => {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ firstName –∏ lastName
        const fullName = `${player.firstName || ''} ${player.lastName || ''}`.trim();
        const normalizedPlayerName = this.normalizeName(fullName);
        const score = this.calculateSimilarity(normalizedReportName, normalizedPlayerName);
        
        return { player, score };
      })
      .filter(match => match.score > 0.3) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
      .sort((a, b) => b.score - a.score);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   */
  private static normalizeName(name: string): string {
    return name
      .toLowerCase()
      .trim()
      .replace(/[—ë–µ]/g, '–µ') // –ó–∞–º–µ–Ω—è–µ–º —ë –Ω–∞ –µ
      .replace(/[^–∞-—èa-z\s]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
      .replace(/\s+/g, ' '); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
  }

  /**
   * –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏
   */
  private static tokens(n: string): string[] {
    return this.normalizeName(n)
      .replace(/[-''']+/g, ' ')
      .split(' ')
      .filter(Boolean);
  }

  /**
   * –ñ–∞–∫–∫–∞—Ä–¥ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º —Ç–æ–∫–µ–Ω–æ–≤
   */
  private static tokenSetScore(a: string[], b: string[]): number {
    if (!a.length || !b.length) return 0;
    const A = new Set(a), B = new Set(b);
    let inter = 0;
    for (const t of A) if (B.has(t)) inter++;
    const union = A.size + B.size - inter;
    return inter / union; // 0..1
  }

  /**
   * LCS –ø–æ —Ç–æ–∫–µ–Ω–∞–º (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫)
   */
  private static tokenLcsScore(a: string[], b: string[]): number {
    const m = a.length, n = b.length;
    if (!m || !n) return 0;
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));
    for (let i = 1; i <= m; i++)
      for (let j = 1; j <= n; j++)
        dp[i][j] = a[i - 1] === b[j - 1] ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
    return dp[m][n] / Math.max(m, n); // 0..1
  }

  /**
   * –ü–æ—Å–∏–º–≤–æ–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å (–≥—Ä—É–±–æ)
   */
  private static charLcsScore(s1: string, s2: string): number {
    const a = this.normalizeName(s1).replace(/\s+/g, '');
    const b = this.normalizeName(s2).replace(/\s+/g, '');
    if (!a.length || !b.length) return 0;
    const m = a.length, n = b.length;
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));
    for (let i = 1; i <= m; i++)
      for (let j = 1; j <= n; j++)
        dp[i][j] = a[i - 1] === b[j - 1] ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
    return dp[m][n] / Math.max(m, n);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤—É—Ö —Ç–æ–∫–µ–Ω–æ–≤
   */
  private static isTwoTokenPermutation(a: string[], b: string[]) {
    if (a.length === 2 && b.length === 2) {
      return (a[0] === b[1] && a[1] === b[0]);
    }
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å –ª–∏—à–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ (middle names, extra surnames)
   */
  private static isSubsetWithOneExtra(a: string[], b: string[]) {
    const A = new Set(a), B = new Set(b);
    const inter = [...A].filter(t => B.has(t)).length;
    const minLen = Math.min(a.length, b.length);
    const maxLen = Math.max(a.length, b.length);
    // –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π –º–∞—Ç—á: –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –º–µ–Ω—å—à–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–æ–ª—å—à–µ–º, —Ä–∞–∑–Ω–∏—Ü–∞ –¥–ª–∏–Ω—ã –Ω–µ –±–æ–ª–µ–µ 2
    return inter === minLen && (maxLen - minLen) <= 2;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏
   */
  private static calculateSimilarity(name1: string, name2: string): number {
    if (!name1 || !name2) return 0;

    const n1 = this.normalizeName(name1);
    const n2 = this.normalizeName(name2);
    if (n1 === n2) return 1;

    const t1 = this.tokens(name1);
    const t2 = this.tokens(name2);

    // –±–∞–∑–æ–≤—ã–µ —Å—É–±-—Å–∫–æ—Ä–∏–Ω–≥–∏
    const set = this.tokenSetScore(t1, t2);     // –ñ–∞–∫–∫–∞—Ä–¥ –ø–æ —Ç–æ–∫–µ–Ω–∞–º (0..1)
    const order = this.tokenLcsScore(t1, t2);   // LCS –ø–æ —Ç–æ–∫–µ–Ω–∞–º (0..1)
    const chars = this.charLcsScore(name1, name2); // LCS –ø–æ —Å–∏–º–≤–æ–ª–∞–º (0..1)

    // –º—è–≥–∫–∏–π –ø–µ–Ω–∞–ª—å—Ç–∏ –∑–∞ –ª–∏—à–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã
    const lenDiff = Math.abs(t1.length - t2.length);
    const lenPenalty = 1 - Math.min(1, lenDiff / Math.max(t1.length, t2.length)); // 0..1

    // –±–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–∑–∏—Ç
    let score = (0.60 * set + 0.25 * order + 0.15 * chars) * (0.9 + 0.1 * lenPenalty);

    // –ë—É—Å—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤:
    // 1) ¬´–§–ò¬ª ‚Üî ¬´–ò–§¬ª (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤—É—Ö —Ç–æ–∫–µ–Ω–æ–≤)
    if (this.isTwoTokenPermutation(t1, t2)) score = Math.max(score, 0.95);

    // 2) –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —Ç–æ–∫–µ–Ω–∞–º –º–µ–Ω—å—à–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –∞ —É –≤—Ç–æ—Ä–æ–≥–æ –æ–¥–∏–Ω "–ª–∏—à–Ω–∏–π" (middle/extra surname)
    if (this.isSubsetWithOneExtra(t1, t2)) score = Math.max(score, 0.92);

    // –Ω–∏–∫–∞–∫–æ–≥–æ 1.0 –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    return Math.max(0, Math.min(score, 0.99));
  }

  /**
   * –°—Ö–æ–∂–µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
   */
  private static wordSimilarity(word1: string, word2: string): number {
    if (word1 === word2) return 1.0;
    
    // –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const distance = this.levenshteinDistance(word1, word2);
    const maxLength = Math.max(word1.length, word2.length);
    
    return 1 - (distance / maxLength);
  }

  /**
   * –ê–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private static levenshteinDistance(str1: string, str2: string): number {
    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));

    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;

    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1, // —É–¥–∞–ª–µ–Ω–∏–µ
          matrix[j - 1][i] + 1, // –≤—Å—Ç–∞–≤–∫–∞
          matrix[j - 1][i - 1] + indicator // –∑–∞–º–µ–Ω–∞
        );
      }
    }

    return matrix[str2.length][str1.length];
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
   */
  static async saveMapping(
    reportName: string,
    playerId: string,
    gpsSystem: string,
    teamId: string,
    clubId: string,
    createdById: string,
    confidenceScore: number,
    mappingType: 'exact' | 'fuzzy' | 'manual' | 'alias',
    notes?: string
  ) {
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏
    await db
      .update(playerMapping)
      .set({ isActive: false, updatedAt: new Date() })
      .where(
        and(
          eq(playerMapping.reportName, reportName),
          eq(playerMapping.gpsSystem, gpsSystem),
          eq(playerMapping.teamId, teamId),
          eq(playerMapping.clubId, clubId)
        )
      );

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
    const [newMapping] = await db
      .insert(playerMapping)
      .values({
        reportName,
        playerId,
        gpsSystem,
        teamId,
        clubId,
        createdById,
        confidenceScore,
        mappingType,
        notes,
        isActive: true
      })
      .returning();

    return newMapping;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
   */
  static async getTeamMappings(teamId: string, clubId: string) {
    const result = await db
      .select({
        mapping: playerMapping,
        player: {
          id: player.id,
          firstName: player.firstName,
          lastName: player.lastName,
          middleName: player.middleName,
          number: player.number
        }
      })
      .from(playerMapping)
      .leftJoin(player, eq(playerMapping.playerId, player.id))
      .where(
        and(
          eq(playerMapping.teamId, teamId),
          eq(playerMapping.clubId, clubId),
          eq(playerMapping.isActive, true)
        )
      )
      .orderBy(desc(playerMapping.updatedAt));

    if (process.env.GPS_DEBUG === '1') {
      console.log('[GPS-DEBUG] getTeamMappings result:', JSON.stringify(result, null, 2));
    }
    
    return result;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥
   */
  static async deleteMapping(mappingId: string, clubId: string) {
    return await db
      .update(playerMapping)
      .set({ isActive: false, updatedAt: new Date() })
      .where(
        and(
          eq(playerMapping.id, mappingId),
          eq(playerMapping.clubId, clubId)
        )
      );
  }
} 