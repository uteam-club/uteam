
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  logoUrl: 'logoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  emailVerified: 'emailVerified',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  order: 'order'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  teamId: 'teamId',
  createdById: 'createdById'
};

exports.Prisma.MediaItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  url: 'url',
  size: 'size',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  eventId: 'eventId',
  uploadedById: 'uploadedById',
  exerciseId: 'exerciseId',
  publicUrl: 'publicUrl'
};

exports.Prisma.TrainingCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  time: 'time',
  location: 'location',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  teamId: 'teamId',
  categoryId: 'categoryId',
  createdById: 'createdById',
  type: 'type'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  authorId: 'authorId',
  clubId: 'clubId',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  length: 'length',
  width: 'width'
};

exports.Prisma.ExerciseCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId'
};

exports.Prisma.ExerciseTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  exerciseCategoryId: 'exerciseCategoryId'
};

exports.Prisma.TrainingExerciseScalarFieldEnum = {
  id: 'id',
  position: 'position',
  trainingId: 'trainingId',
  exerciseId: 'exerciseId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  number: 'number',
  position: 'position',
  strongFoot: 'strongFoot',
  dateOfBirth: 'dateOfBirth',
  academyJoinDate: 'academyJoinDate',
  nationality: 'nationality',
  imageUrl: 'imageUrl',
  status: 'status',
  birthCertificateNumber: 'birthCertificateNumber',
  pinCode: 'pinCode',
  telegramId: 'telegramId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId'
};

exports.Prisma.PlayerDocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  url: 'url',
  publicUrl: 'publicUrl',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  playerId: 'playerId',
  clubId: 'clubId',
  uploadedById: 'uploadedById'
};

exports.Prisma.TeamCoachScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerAttendanceScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  trainingId: 'trainingId',
  status: 'status',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  competitionType: 'competitionType',
  date: 'date',
  time: 'time',
  isHome: 'isHome',
  teamId: 'teamId',
  opponentName: 'opponentName',
  teamGoals: 'teamGoals',
  opponentGoals: 'opponentGoals',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clubId: 'clubId',
  formation: 'formation',
  gameFormat: 'gameFormat',
  markerColor: 'markerColor',
  notes: 'notes',
  playerPositions: 'playerPositions',
  positionAssignments: 'positionAssignments'
};

exports.Prisma.PlayerMatchStatScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  isStarter: 'isStarter',
  minutesPlayed: 'minutesPlayed',
  goals: 'goals',
  assists: 'assists',
  yellowCards: 'yellowCards',
  redCards: 'redCards',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleEventScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  type: 'type',
  time: 'time',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MorningSurveyResponseScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  createdAt: 'createdAt',
  readAt: 'readAt',
  completedAt: 'completedAt',
  sleepDuration: 'sleepDuration',
  sleepQuality: 'sleepQuality',
  recovery: 'recovery',
  mood: 'mood',
  muscleCondition: 'muscleCondition',
  surveyId: 'surveyId',
  tenantId: 'tenantId'
};

exports.Prisma.PainAreaScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  areaName: 'areaName',
  painLevel: 'painLevel',
  createdAt: 'createdAt'
};

exports.Prisma.MuscleAreaScalarFieldEnum = {
  id: 'id',
  number: 'number',
  name: 'name',
  view: 'view',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  COACH: 'COACH',
  MEMBER: 'MEMBER',
  SCOUT: 'SCOUT',
  DOCTOR: 'DOCTOR',
  DIRECTOR: 'DIRECTOR'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PASSPORT: 'PASSPORT',
  BIRTH_CERTIFICATE: 'BIRTH_CERTIFICATE',
  MEDICAL_INSURANCE: 'MEDICAL_INSURANCE',
  OTHER: 'OTHER'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  TRAINED: 'TRAINED',
  REHAB: 'REHAB',
  SICK: 'SICK',
  EDUCATION: 'EDUCATION',
  OTHER: 'OTHER'
};

exports.CompetitionType = exports.$Enums.CompetitionType = {
  FRIENDLY: 'FRIENDLY',
  LEAGUE: 'LEAGUE',
  CUP: 'CUP'
};

exports.Prisma.ModelName = {
  Club: 'Club',
  User: 'User',
  Team: 'Team',
  Event: 'Event',
  MediaItem: 'MediaItem',
  TrainingCategory: 'TrainingCategory',
  Training: 'Training',
  Exercise: 'Exercise',
  ExerciseCategory: 'ExerciseCategory',
  ExerciseTag: 'ExerciseTag',
  TrainingExercise: 'TrainingExercise',
  Player: 'Player',
  PlayerDocument: 'PlayerDocument',
  TeamCoach: 'TeamCoach',
  PlayerAttendance: 'PlayerAttendance',
  Match: 'Match',
  PlayerMatchStat: 'PlayerMatchStat',
  Schedule: 'Schedule',
  ScheduleEvent: 'ScheduleEvent',
  MorningSurveyResponse: 'MorningSurveyResponse',
  PainArea: 'PainArea',
  MuscleArea: 'MuscleArea'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
