
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model MediaItem
 * 
 */
export type MediaItem = $Result.DefaultSelection<Prisma.$MediaItemPayload>
/**
 * Model TrainingCategory
 * 
 */
export type TrainingCategory = $Result.DefaultSelection<Prisma.$TrainingCategoryPayload>
/**
 * Model Training
 * 
 */
export type Training = $Result.DefaultSelection<Prisma.$TrainingPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model ExerciseCategory
 * 
 */
export type ExerciseCategory = $Result.DefaultSelection<Prisma.$ExerciseCategoryPayload>
/**
 * Model ExerciseTag
 * 
 */
export type ExerciseTag = $Result.DefaultSelection<Prisma.$ExerciseTagPayload>
/**
 * Model TrainingExercise
 * 
 */
export type TrainingExercise = $Result.DefaultSelection<Prisma.$TrainingExercisePayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model PlayerDocument
 * 
 */
export type PlayerDocument = $Result.DefaultSelection<Prisma.$PlayerDocumentPayload>
/**
 * Model TeamCoach
 * 
 */
export type TeamCoach = $Result.DefaultSelection<Prisma.$TeamCoachPayload>
/**
 * Model PlayerAttendance
 * 
 */
export type PlayerAttendance = $Result.DefaultSelection<Prisma.$PlayerAttendancePayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model PlayerMatchStat
 * 
 */
export type PlayerMatchStat = $Result.DefaultSelection<Prisma.$PlayerMatchStatPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model ScheduleEvent
 * 
 */
export type ScheduleEvent = $Result.DefaultSelection<Prisma.$ScheduleEventPayload>
/**
 * Model MorningSurveyResponse
 * 
 */
export type MorningSurveyResponse = $Result.DefaultSelection<Prisma.$MorningSurveyResponsePayload>
/**
 * Model PainArea
 * 
 */
export type PainArea = $Result.DefaultSelection<Prisma.$PainAreaPayload>
/**
 * Model MuscleArea
 * 
 */
export type MuscleArea = $Result.DefaultSelection<Prisma.$MuscleAreaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AttendanceStatus: {
  TRAINED: 'TRAINED',
  REHAB: 'REHAB',
  SICK: 'SICK',
  EDUCATION: 'EDUCATION',
  OTHER: 'OTHER'
};

export type AttendanceStatus = (typeof AttendanceStatus)[keyof typeof AttendanceStatus]


export const TrainingStatus: {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

export type TrainingStatus = (typeof TrainingStatus)[keyof typeof TrainingStatus]


export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  COACH: 'COACH',
  MEMBER: 'MEMBER',
  SCOUT: 'SCOUT',
  DOCTOR: 'DOCTOR',
  DIRECTOR: 'DIRECTOR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MediaType: {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

export type MediaType = (typeof MediaType)[keyof typeof MediaType]


export const DocumentType: {
  PASSPORT: 'PASSPORT',
  BIRTH_CERTIFICATE: 'BIRTH_CERTIFICATE',
  MEDICAL_INSURANCE: 'MEDICAL_INSURANCE',
  OTHER: 'OTHER'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const CompetitionType: {
  FRIENDLY: 'FRIENDLY',
  LEAGUE: 'LEAGUE',
  CUP: 'CUP'
};

export type CompetitionType = (typeof CompetitionType)[keyof typeof CompetitionType]

}

export type AttendanceStatus = $Enums.AttendanceStatus

export const AttendanceStatus: typeof $Enums.AttendanceStatus

export type TrainingStatus = $Enums.TrainingStatus

export const TrainingStatus: typeof $Enums.TrainingStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MediaType = $Enums.MediaType

export const MediaType: typeof $Enums.MediaType

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type CompetitionType = $Enums.CompetitionType

export const CompetitionType: typeof $Enums.CompetitionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clubs
 * const clubs = await prisma.club.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clubs
   * const clubs = await prisma.club.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mediaItem`: Exposes CRUD operations for the **MediaItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaItems
    * const mediaItems = await prisma.mediaItem.findMany()
    * ```
    */
  get mediaItem(): Prisma.MediaItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trainingCategory`: Exposes CRUD operations for the **TrainingCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingCategories
    * const trainingCategories = await prisma.trainingCategory.findMany()
    * ```
    */
  get trainingCategory(): Prisma.TrainingCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.training`: Exposes CRUD operations for the **Training** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trainings
    * const trainings = await prisma.training.findMany()
    * ```
    */
  get training(): Prisma.TrainingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exerciseCategory`: Exposes CRUD operations for the **ExerciseCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseCategories
    * const exerciseCategories = await prisma.exerciseCategory.findMany()
    * ```
    */
  get exerciseCategory(): Prisma.ExerciseCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exerciseTag`: Exposes CRUD operations for the **ExerciseTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseTags
    * const exerciseTags = await prisma.exerciseTag.findMany()
    * ```
    */
  get exerciseTag(): Prisma.ExerciseTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trainingExercise`: Exposes CRUD operations for the **TrainingExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingExercises
    * const trainingExercises = await prisma.trainingExercise.findMany()
    * ```
    */
  get trainingExercise(): Prisma.TrainingExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerDocument`: Exposes CRUD operations for the **PlayerDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerDocuments
    * const playerDocuments = await prisma.playerDocument.findMany()
    * ```
    */
  get playerDocument(): Prisma.PlayerDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamCoach`: Exposes CRUD operations for the **TeamCoach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamCoaches
    * const teamCoaches = await prisma.teamCoach.findMany()
    * ```
    */
  get teamCoach(): Prisma.TeamCoachDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerAttendance`: Exposes CRUD operations for the **PlayerAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerAttendances
    * const playerAttendances = await prisma.playerAttendance.findMany()
    * ```
    */
  get playerAttendance(): Prisma.PlayerAttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerMatchStat`: Exposes CRUD operations for the **PlayerMatchStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerMatchStats
    * const playerMatchStats = await prisma.playerMatchStat.findMany()
    * ```
    */
  get playerMatchStat(): Prisma.PlayerMatchStatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scheduleEvent`: Exposes CRUD operations for the **ScheduleEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleEvents
    * const scheduleEvents = await prisma.scheduleEvent.findMany()
    * ```
    */
  get scheduleEvent(): Prisma.ScheduleEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.morningSurveyResponse`: Exposes CRUD operations for the **MorningSurveyResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MorningSurveyResponses
    * const morningSurveyResponses = await prisma.morningSurveyResponse.findMany()
    * ```
    */
  get morningSurveyResponse(): Prisma.MorningSurveyResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.painArea`: Exposes CRUD operations for the **PainArea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PainAreas
    * const painAreas = await prisma.painArea.findMany()
    * ```
    */
  get painArea(): Prisma.PainAreaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.muscleArea`: Exposes CRUD operations for the **MuscleArea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MuscleAreas
    * const muscleAreas = await prisma.muscleArea.findMany()
    * ```
    */
  get muscleArea(): Prisma.MuscleAreaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Club: 'Club',
    User: 'User',
    Team: 'Team',
    Event: 'Event',
    MediaItem: 'MediaItem',
    TrainingCategory: 'TrainingCategory',
    Training: 'Training',
    Exercise: 'Exercise',
    ExerciseCategory: 'ExerciseCategory',
    ExerciseTag: 'ExerciseTag',
    TrainingExercise: 'TrainingExercise',
    Player: 'Player',
    PlayerDocument: 'PlayerDocument',
    TeamCoach: 'TeamCoach',
    PlayerAttendance: 'PlayerAttendance',
    Match: 'Match',
    PlayerMatchStat: 'PlayerMatchStat',
    Schedule: 'Schedule',
    ScheduleEvent: 'ScheduleEvent',
    MorningSurveyResponse: 'MorningSurveyResponse',
    PainArea: 'PainArea',
    MuscleArea: 'MuscleArea'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "club" | "user" | "team" | "event" | "mediaItem" | "trainingCategory" | "training" | "exercise" | "exerciseCategory" | "exerciseTag" | "trainingExercise" | "player" | "playerDocument" | "teamCoach" | "playerAttendance" | "match" | "playerMatchStat" | "schedule" | "scheduleEvent" | "morningSurveyResponse" | "painArea" | "muscleArea"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClubUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      MediaItem: {
        payload: Prisma.$MediaItemPayload<ExtArgs>
        fields: Prisma.MediaItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          findFirst: {
            args: Prisma.MediaItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          findMany: {
            args: Prisma.MediaItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>[]
          }
          create: {
            args: Prisma.MediaItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          createMany: {
            args: Prisma.MediaItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MediaItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>[]
          }
          delete: {
            args: Prisma.MediaItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          update: {
            args: Prisma.MediaItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          deleteMany: {
            args: Prisma.MediaItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MediaItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>[]
          }
          upsert: {
            args: Prisma.MediaItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          aggregate: {
            args: Prisma.MediaItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMediaItem>
          }
          groupBy: {
            args: Prisma.MediaItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaItemCountArgs<ExtArgs>
            result: $Utils.Optional<MediaItemCountAggregateOutputType> | number
          }
        }
      }
      TrainingCategory: {
        payload: Prisma.$TrainingCategoryPayload<ExtArgs>
        fields: Prisma.TrainingCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          findFirst: {
            args: Prisma.TrainingCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          findMany: {
            args: Prisma.TrainingCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>[]
          }
          create: {
            args: Prisma.TrainingCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          createMany: {
            args: Prisma.TrainingCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>[]
          }
          delete: {
            args: Prisma.TrainingCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          update: {
            args: Prisma.TrainingCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          deleteMany: {
            args: Prisma.TrainingCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrainingCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>[]
          }
          upsert: {
            args: Prisma.TrainingCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingCategoryPayload>
          }
          aggregate: {
            args: Prisma.TrainingCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrainingCategory>
          }
          groupBy: {
            args: Prisma.TrainingCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingCategoryCountAggregateOutputType> | number
          }
        }
      }
      Training: {
        payload: Prisma.$TrainingPayload<ExtArgs>
        fields: Prisma.TrainingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findFirst: {
            args: Prisma.TrainingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findMany: {
            args: Prisma.TrainingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          create: {
            args: Prisma.TrainingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          createMany: {
            args: Prisma.TrainingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          delete: {
            args: Prisma.TrainingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          update: {
            args: Prisma.TrainingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          deleteMany: {
            args: Prisma.TrainingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrainingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          upsert: {
            args: Prisma.TrainingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          aggregate: {
            args: Prisma.TrainingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTraining>
          }
          groupBy: {
            args: Prisma.TrainingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      ExerciseCategory: {
        payload: Prisma.$ExerciseCategoryPayload<ExtArgs>
        fields: Prisma.ExerciseCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          findFirst: {
            args: Prisma.ExerciseCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          findMany: {
            args: Prisma.ExerciseCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>[]
          }
          create: {
            args: Prisma.ExerciseCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          createMany: {
            args: Prisma.ExerciseCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>[]
          }
          delete: {
            args: Prisma.ExerciseCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          update: {
            args: Prisma.ExerciseCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ExerciseCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ExerciseCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseCategoryPayload>
          }
          aggregate: {
            args: Prisma.ExerciseCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExerciseCategory>
          }
          groupBy: {
            args: Prisma.ExerciseCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCategoryCountAggregateOutputType> | number
          }
        }
      }
      ExerciseTag: {
        payload: Prisma.$ExerciseTagPayload<ExtArgs>
        fields: Prisma.ExerciseTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          findFirst: {
            args: Prisma.ExerciseTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          findMany: {
            args: Prisma.ExerciseTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>[]
          }
          create: {
            args: Prisma.ExerciseTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          createMany: {
            args: Prisma.ExerciseTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>[]
          }
          delete: {
            args: Prisma.ExerciseTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          update: {
            args: Prisma.ExerciseTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          deleteMany: {
            args: Prisma.ExerciseTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>[]
          }
          upsert: {
            args: Prisma.ExerciseTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExerciseTagPayload>
          }
          aggregate: {
            args: Prisma.ExerciseTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExerciseTag>
          }
          groupBy: {
            args: Prisma.ExerciseTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseTagCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseTagCountAggregateOutputType> | number
          }
        }
      }
      TrainingExercise: {
        payload: Prisma.$TrainingExercisePayload<ExtArgs>
        fields: Prisma.TrainingExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          findFirst: {
            args: Prisma.TrainingExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          findMany: {
            args: Prisma.TrainingExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>[]
          }
          create: {
            args: Prisma.TrainingExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          createMany: {
            args: Prisma.TrainingExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>[]
          }
          delete: {
            args: Prisma.TrainingExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          update: {
            args: Prisma.TrainingExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          deleteMany: {
            args: Prisma.TrainingExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrainingExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>[]
          }
          upsert: {
            args: Prisma.TrainingExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingExercisePayload>
          }
          aggregate: {
            args: Prisma.TrainingExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrainingExercise>
          }
          groupBy: {
            args: Prisma.TrainingExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingExerciseCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      PlayerDocument: {
        payload: Prisma.$PlayerDocumentPayload<ExtArgs>
        fields: Prisma.PlayerDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          findFirst: {
            args: Prisma.PlayerDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          findMany: {
            args: Prisma.PlayerDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>[]
          }
          create: {
            args: Prisma.PlayerDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          createMany: {
            args: Prisma.PlayerDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>[]
          }
          delete: {
            args: Prisma.PlayerDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          update: {
            args: Prisma.PlayerDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>[]
          }
          upsert: {
            args: Prisma.PlayerDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerDocumentPayload>
          }
          aggregate: {
            args: Prisma.PlayerDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerDocument>
          }
          groupBy: {
            args: Prisma.PlayerDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerDocumentCountAggregateOutputType> | number
          }
        }
      }
      TeamCoach: {
        payload: Prisma.$TeamCoachPayload<ExtArgs>
        fields: Prisma.TeamCoachFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamCoachFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamCoachFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          findFirst: {
            args: Prisma.TeamCoachFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamCoachFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          findMany: {
            args: Prisma.TeamCoachFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>[]
          }
          create: {
            args: Prisma.TeamCoachCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          createMany: {
            args: Prisma.TeamCoachCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCoachCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>[]
          }
          delete: {
            args: Prisma.TeamCoachDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          update: {
            args: Prisma.TeamCoachUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          deleteMany: {
            args: Prisma.TeamCoachDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamCoachUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamCoachUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>[]
          }
          upsert: {
            args: Prisma.TeamCoachUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamCoachPayload>
          }
          aggregate: {
            args: Prisma.TeamCoachAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamCoach>
          }
          groupBy: {
            args: Prisma.TeamCoachGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamCoachGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCoachCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCoachCountAggregateOutputType> | number
          }
        }
      }
      PlayerAttendance: {
        payload: Prisma.$PlayerAttendancePayload<ExtArgs>
        fields: Prisma.PlayerAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          findFirst: {
            args: Prisma.PlayerAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          findMany: {
            args: Prisma.PlayerAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>[]
          }
          create: {
            args: Prisma.PlayerAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          createMany: {
            args: Prisma.PlayerAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerAttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>[]
          }
          delete: {
            args: Prisma.PlayerAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          update: {
            args: Prisma.PlayerAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          deleteMany: {
            args: Prisma.PlayerAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerAttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>[]
          }
          upsert: {
            args: Prisma.PlayerAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAttendancePayload>
          }
          aggregate: {
            args: Prisma.PlayerAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerAttendance>
          }
          groupBy: {
            args: Prisma.PlayerAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerAttendanceCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      PlayerMatchStat: {
        payload: Prisma.$PlayerMatchStatPayload<ExtArgs>
        fields: Prisma.PlayerMatchStatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerMatchStatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerMatchStatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          findFirst: {
            args: Prisma.PlayerMatchStatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerMatchStatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          findMany: {
            args: Prisma.PlayerMatchStatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>[]
          }
          create: {
            args: Prisma.PlayerMatchStatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          createMany: {
            args: Prisma.PlayerMatchStatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerMatchStatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>[]
          }
          delete: {
            args: Prisma.PlayerMatchStatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          update: {
            args: Prisma.PlayerMatchStatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          deleteMany: {
            args: Prisma.PlayerMatchStatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerMatchStatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerMatchStatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>[]
          }
          upsert: {
            args: Prisma.PlayerMatchStatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerMatchStatPayload>
          }
          aggregate: {
            args: Prisma.PlayerMatchStatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerMatchStat>
          }
          groupBy: {
            args: Prisma.PlayerMatchStatGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerMatchStatGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerMatchStatCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerMatchStatCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      ScheduleEvent: {
        payload: Prisma.$ScheduleEventPayload<ExtArgs>
        fields: Prisma.ScheduleEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          findFirst: {
            args: Prisma.ScheduleEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          findMany: {
            args: Prisma.ScheduleEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>[]
          }
          create: {
            args: Prisma.ScheduleEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          createMany: {
            args: Prisma.ScheduleEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>[]
          }
          delete: {
            args: Prisma.ScheduleEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          update: {
            args: Prisma.ScheduleEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          deleteMany: {
            args: Prisma.ScheduleEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>[]
          }
          upsert: {
            args: Prisma.ScheduleEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleEventPayload>
          }
          aggregate: {
            args: Prisma.ScheduleEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleEvent>
          }
          groupBy: {
            args: Prisma.ScheduleEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleEventCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleEventCountAggregateOutputType> | number
          }
        }
      }
      MorningSurveyResponse: {
        payload: Prisma.$MorningSurveyResponsePayload<ExtArgs>
        fields: Prisma.MorningSurveyResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MorningSurveyResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MorningSurveyResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          findFirst: {
            args: Prisma.MorningSurveyResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MorningSurveyResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          findMany: {
            args: Prisma.MorningSurveyResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>[]
          }
          create: {
            args: Prisma.MorningSurveyResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          createMany: {
            args: Prisma.MorningSurveyResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MorningSurveyResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>[]
          }
          delete: {
            args: Prisma.MorningSurveyResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          update: {
            args: Prisma.MorningSurveyResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          deleteMany: {
            args: Prisma.MorningSurveyResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MorningSurveyResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MorningSurveyResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>[]
          }
          upsert: {
            args: Prisma.MorningSurveyResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MorningSurveyResponsePayload>
          }
          aggregate: {
            args: Prisma.MorningSurveyResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMorningSurveyResponse>
          }
          groupBy: {
            args: Prisma.MorningSurveyResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<MorningSurveyResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.MorningSurveyResponseCountArgs<ExtArgs>
            result: $Utils.Optional<MorningSurveyResponseCountAggregateOutputType> | number
          }
        }
      }
      PainArea: {
        payload: Prisma.$PainAreaPayload<ExtArgs>
        fields: Prisma.PainAreaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PainAreaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PainAreaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          findFirst: {
            args: Prisma.PainAreaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PainAreaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          findMany: {
            args: Prisma.PainAreaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>[]
          }
          create: {
            args: Prisma.PainAreaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          createMany: {
            args: Prisma.PainAreaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PainAreaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>[]
          }
          delete: {
            args: Prisma.PainAreaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          update: {
            args: Prisma.PainAreaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          deleteMany: {
            args: Prisma.PainAreaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PainAreaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PainAreaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>[]
          }
          upsert: {
            args: Prisma.PainAreaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PainAreaPayload>
          }
          aggregate: {
            args: Prisma.PainAreaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePainArea>
          }
          groupBy: {
            args: Prisma.PainAreaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PainAreaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PainAreaCountArgs<ExtArgs>
            result: $Utils.Optional<PainAreaCountAggregateOutputType> | number
          }
        }
      }
      MuscleArea: {
        payload: Prisma.$MuscleAreaPayload<ExtArgs>
        fields: Prisma.MuscleAreaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MuscleAreaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MuscleAreaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          findFirst: {
            args: Prisma.MuscleAreaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MuscleAreaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          findMany: {
            args: Prisma.MuscleAreaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>[]
          }
          create: {
            args: Prisma.MuscleAreaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          createMany: {
            args: Prisma.MuscleAreaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MuscleAreaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>[]
          }
          delete: {
            args: Prisma.MuscleAreaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          update: {
            args: Prisma.MuscleAreaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          deleteMany: {
            args: Prisma.MuscleAreaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MuscleAreaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MuscleAreaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>[]
          }
          upsert: {
            args: Prisma.MuscleAreaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAreaPayload>
          }
          aggregate: {
            args: Prisma.MuscleAreaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMuscleArea>
          }
          groupBy: {
            args: Prisma.MuscleAreaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MuscleAreaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MuscleAreaCountArgs<ExtArgs>
            result: $Utils.Optional<MuscleAreaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    club?: ClubOmit
    user?: UserOmit
    team?: TeamOmit
    event?: EventOmit
    mediaItem?: MediaItemOmit
    trainingCategory?: TrainingCategoryOmit
    training?: TrainingOmit
    exercise?: ExerciseOmit
    exerciseCategory?: ExerciseCategoryOmit
    exerciseTag?: ExerciseTagOmit
    trainingExercise?: TrainingExerciseOmit
    player?: PlayerOmit
    playerDocument?: PlayerDocumentOmit
    teamCoach?: TeamCoachOmit
    playerAttendance?: PlayerAttendanceOmit
    match?: MatchOmit
    playerMatchStat?: PlayerMatchStatOmit
    schedule?: ScheduleOmit
    scheduleEvent?: ScheduleEventOmit
    morningSurveyResponse?: MorningSurveyResponseOmit
    painArea?: PainAreaOmit
    muscleArea?: MuscleAreaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    events: number
    exercises: number
    exerciseCategories: number
    exerciseTags: number
    matches: number
    mediaItems: number
    teams: number
    trainings: number
    trainingCategories: number
    users: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | ClubCountOutputTypeCountEventsArgs
    exercises?: boolean | ClubCountOutputTypeCountExercisesArgs
    exerciseCategories?: boolean | ClubCountOutputTypeCountExerciseCategoriesArgs
    exerciseTags?: boolean | ClubCountOutputTypeCountExerciseTagsArgs
    matches?: boolean | ClubCountOutputTypeCountMatchesArgs
    mediaItems?: boolean | ClubCountOutputTypeCountMediaItemsArgs
    teams?: boolean | ClubCountOutputTypeCountTeamsArgs
    trainings?: boolean | ClubCountOutputTypeCountTrainingsArgs
    trainingCategories?: boolean | ClubCountOutputTypeCountTrainingCategoriesArgs
    users?: boolean | ClubCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountExerciseCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseCategoryWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountExerciseTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTagWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountTrainingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingCategoryWhereInput
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    events: number
    exercises: number
    mediaUploads: number
    playerDocuments: number
    teamCoaches: number
    trainings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | UserCountOutputTypeCountEventsArgs
    exercises?: boolean | UserCountOutputTypeCountExercisesArgs
    mediaUploads?: boolean | UserCountOutputTypeCountMediaUploadsArgs
    playerDocuments?: boolean | UserCountOutputTypeCountPlayerDocumentsArgs
    teamCoaches?: boolean | UserCountOutputTypeCountTeamCoachesArgs
    trainings?: boolean | UserCountOutputTypeCountTrainingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMediaUploadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlayerDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamCoachesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamCoachWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    events: number
    matches: number
    players: number
    coaches: number
    trainings: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | TeamCountOutputTypeCountEventsArgs
    matches?: boolean | TeamCountOutputTypeCountMatchesArgs
    players?: boolean | TeamCountOutputTypeCountPlayersArgs
    coaches?: boolean | TeamCountOutputTypeCountCoachesArgs
    trainings?: boolean | TeamCountOutputTypeCountTrainingsArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountCoachesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamCoachWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    mediaItems: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mediaItems?: boolean | EventCountOutputTypeCountMediaItemsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }


  /**
   * Count Type TrainingCategoryCountOutputType
   */

  export type TrainingCategoryCountOutputType = {
    trainings: number
  }

  export type TrainingCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainings?: boolean | TrainingCategoryCountOutputTypeCountTrainingsArgs
  }

  // Custom InputTypes
  /**
   * TrainingCategoryCountOutputType without action
   */
  export type TrainingCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategoryCountOutputType
     */
    select?: TrainingCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrainingCategoryCountOutputType without action
   */
  export type TrainingCategoryCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }


  /**
   * Count Type TrainingCountOutputType
   */

  export type TrainingCountOutputType = {
    attendances: number
    exercises: number
  }

  export type TrainingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | TrainingCountOutputTypeCountAttendancesArgs
    exercises?: boolean | TrainingCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCountOutputType
     */
    select?: TrainingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAttendanceWhereInput
  }

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingExerciseWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    mediaItems: number
    trainings: number
    tags: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mediaItems?: boolean | ExerciseCountOutputTypeCountMediaItemsArgs
    trainings?: boolean | ExerciseCountOutputTypeCountTrainingsArgs
    tags?: boolean | ExerciseCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingExerciseWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTagWhereInput
  }


  /**
   * Count Type ExerciseCategoryCountOutputType
   */

  export type ExerciseCategoryCountOutputType = {
    exercises: number
    tags: number
  }

  export type ExerciseCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | ExerciseCategoryCountOutputTypeCountExercisesArgs
    tags?: boolean | ExerciseCategoryCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCategoryCountOutputType without action
   */
  export type ExerciseCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategoryCountOutputType
     */
    select?: ExerciseCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCategoryCountOutputType without action
   */
  export type ExerciseCategoryCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * ExerciseCategoryCountOutputType without action
   */
  export type ExerciseCategoryCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTagWhereInput
  }


  /**
   * Count Type ExerciseTagCountOutputType
   */

  export type ExerciseTagCountOutputType = {
    exercises: number
  }

  export type ExerciseTagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | ExerciseTagCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * ExerciseTagCountOutputType without action
   */
  export type ExerciseTagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTagCountOutputType
     */
    select?: ExerciseTagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseTagCountOutputType without action
   */
  export type ExerciseTagCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    attendances: number
    documents: number
    matchStats: number
    morningSurveys: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | PlayerCountOutputTypeCountAttendancesArgs
    documents?: boolean | PlayerCountOutputTypeCountDocumentsArgs
    matchStats?: boolean | PlayerCountOutputTypeCountMatchStatsArgs
    morningSurveys?: boolean | PlayerCountOutputTypeCountMorningSurveysArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAttendanceWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerDocumentWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMatchStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerMatchStatWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMorningSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MorningSurveyResponseWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    playerStats: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playerStats?: boolean | MatchCountOutputTypeCountPlayerStatsArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountPlayerStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerMatchStatWhereInput
  }


  /**
   * Count Type ScheduleCountOutputType
   */

  export type ScheduleCountOutputType = {
    events: number
  }

  export type ScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | ScheduleCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     */
    select?: ScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleEventWhereInput
  }


  /**
   * Count Type MorningSurveyResponseCountOutputType
   */

  export type MorningSurveyResponseCountOutputType = {
    painAreas: number
  }

  export type MorningSurveyResponseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    painAreas?: boolean | MorningSurveyResponseCountOutputTypeCountPainAreasArgs
  }

  // Custom InputTypes
  /**
   * MorningSurveyResponseCountOutputType without action
   */
  export type MorningSurveyResponseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponseCountOutputType
     */
    select?: MorningSurveyResponseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MorningSurveyResponseCountOutputType without action
   */
  export type MorningSurveyResponseCountOutputTypeCountPainAreasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PainAreaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubMinAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    broadcastTime: string | null
  }

  export type ClubMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    broadcastTime: string | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    name: number
    subdomain: number
    logoUrl: number
    createdAt: number
    updatedAt: number
    broadcastTime: number
    _all: number
  }


  export type ClubMinAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
    broadcastTime?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
    broadcastTime?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
    broadcastTime?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: string
    name: string
    subdomain: string
    logoUrl: string | null
    createdAt: Date
    updatedAt: Date
    broadcastTime: string | null
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broadcastTime?: boolean
    events?: boolean | Club$eventsArgs<ExtArgs>
    exercises?: boolean | Club$exercisesArgs<ExtArgs>
    exerciseCategories?: boolean | Club$exerciseCategoriesArgs<ExtArgs>
    exerciseTags?: boolean | Club$exerciseTagsArgs<ExtArgs>
    matches?: boolean | Club$matchesArgs<ExtArgs>
    mediaItems?: boolean | Club$mediaItemsArgs<ExtArgs>
    teams?: boolean | Club$teamsArgs<ExtArgs>
    trainings?: boolean | Club$trainingsArgs<ExtArgs>
    trainingCategories?: boolean | Club$trainingCategoriesArgs<ExtArgs>
    users?: boolean | Club$usersArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broadcastTime?: boolean
  }, ExtArgs["result"]["club"]>

  export type ClubSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broadcastTime?: boolean
  }, ExtArgs["result"]["club"]>

  export type ClubSelectScalar = {
    id?: boolean
    name?: boolean
    subdomain?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broadcastTime?: boolean
  }

  export type ClubOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subdomain" | "logoUrl" | "createdAt" | "updatedAt" | "broadcastTime", ExtArgs["result"]["club"]>
  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Club$eventsArgs<ExtArgs>
    exercises?: boolean | Club$exercisesArgs<ExtArgs>
    exerciseCategories?: boolean | Club$exerciseCategoriesArgs<ExtArgs>
    exerciseTags?: boolean | Club$exerciseTagsArgs<ExtArgs>
    matches?: boolean | Club$matchesArgs<ExtArgs>
    mediaItems?: boolean | Club$mediaItemsArgs<ExtArgs>
    teams?: boolean | Club$teamsArgs<ExtArgs>
    trainings?: boolean | Club$trainingsArgs<ExtArgs>
    trainingCategories?: boolean | Club$trainingCategoriesArgs<ExtArgs>
    users?: boolean | Club$usersArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClubIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      exerciseCategories: Prisma.$ExerciseCategoryPayload<ExtArgs>[]
      exerciseTags: Prisma.$ExerciseTagPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
      trainings: Prisma.$TrainingPayload<ExtArgs>[]
      trainingCategories: Prisma.$TrainingCategoryPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subdomain: string
      logoUrl: string | null
      createdAt: Date
      updatedAt: Date
      broadcastTime: string | null
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clubs and returns the data saved in the database.
     * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs and returns the data updated in the database.
     * @param {ClubUpdateManyAndReturnArgs} args - Arguments to update many Clubs.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClubUpdateManyAndReturnArgs>(args: SelectSubset<T, ClubUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Club$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Club$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exercises<T extends Club$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Club$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exerciseCategories<T extends Club$exerciseCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Club$exerciseCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exerciseTags<T extends Club$exerciseTagsArgs<ExtArgs> = {}>(args?: Subset<T, Club$exerciseTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Club$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Club$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mediaItems<T extends Club$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Club$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Club$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Club$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainings<T extends Club$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, Club$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainingCategories<T extends Club$trainingCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Club$trainingCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Club$usersArgs<ExtArgs> = {}>(args?: Subset<T, Club$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'String'>
    readonly name: FieldRef<"Club", 'String'>
    readonly subdomain: FieldRef<"Club", 'String'>
    readonly logoUrl: FieldRef<"Club", 'String'>
    readonly createdAt: FieldRef<"Club", 'DateTime'>
    readonly updatedAt: FieldRef<"Club", 'DateTime'>
    readonly broadcastTime: FieldRef<"Club", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club createManyAndReturn
   */
  export type ClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to update.
     */
    limit?: number
  }

  /**
   * Club updateManyAndReturn
   */
  export type ClubUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to update.
     */
    limit?: number
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to delete.
     */
    limit?: number
  }

  /**
   * Club.events
   */
  export type Club$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Club.exercises
   */
  export type Club$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Club.exerciseCategories
   */
  export type Club$exerciseCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    where?: ExerciseCategoryWhereInput
    orderBy?: ExerciseCategoryOrderByWithRelationInput | ExerciseCategoryOrderByWithRelationInput[]
    cursor?: ExerciseCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseCategoryScalarFieldEnum | ExerciseCategoryScalarFieldEnum[]
  }

  /**
   * Club.exerciseTags
   */
  export type Club$exerciseTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    where?: ExerciseTagWhereInput
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    cursor?: ExerciseTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * Club.matches
   */
  export type Club$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Club.mediaItems
   */
  export type Club$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Club.teams
   */
  export type Club$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Club.trainings
   */
  export type Club$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Club.trainingCategories
   */
  export type Club$trainingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    where?: TrainingCategoryWhereInput
    orderBy?: TrainingCategoryOrderByWithRelationInput | TrainingCategoryOrderByWithRelationInput[]
    cursor?: TrainingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingCategoryScalarFieldEnum | TrainingCategoryScalarFieldEnum[]
  }

  /**
   * Club.users
   */
  export type Club$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    emailVerified: Date | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    emailVerified: Date | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    emailVerified: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    clubId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    role: $Enums.Role
    emailVerified: Date | null
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    clubId: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    events?: boolean | User$eventsArgs<ExtArgs>
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    mediaUploads?: boolean | User$mediaUploadsArgs<ExtArgs>
    playerDocuments?: boolean | User$playerDocumentsArgs<ExtArgs>
    teamCoaches?: boolean | User$teamCoachesArgs<ExtArgs>
    trainings?: boolean | User$trainingsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "emailVerified" | "imageUrl" | "createdAt" | "updatedAt" | "clubId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | User$eventsArgs<ExtArgs>
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    mediaUploads?: boolean | User$mediaUploadsArgs<ExtArgs>
    playerDocuments?: boolean | User$playerDocumentsArgs<ExtArgs>
    teamCoaches?: boolean | User$teamCoachesArgs<ExtArgs>
    trainings?: boolean | User$trainingsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      mediaUploads: Prisma.$MediaItemPayload<ExtArgs>[]
      playerDocuments: Prisma.$PlayerDocumentPayload<ExtArgs>[]
      teamCoaches: Prisma.$TeamCoachPayload<ExtArgs>[]
      trainings: Prisma.$TrainingPayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      role: $Enums.Role
      emailVerified: Date | null
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      clubId: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exercises<T extends User$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, User$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mediaUploads<T extends User$mediaUploadsArgs<ExtArgs> = {}>(args?: Subset<T, User$mediaUploadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playerDocuments<T extends User$playerDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, User$playerDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamCoaches<T extends User$teamCoachesArgs<ExtArgs> = {}>(args?: Subset<T, User$teamCoachesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainings<T extends User$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, User$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly imageUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly clubId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.exercises
   */
  export type User$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * User.mediaUploads
   */
  export type User$mediaUploadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * User.playerDocuments
   */
  export type User$playerDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    where?: PlayerDocumentWhereInput
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    cursor?: PlayerDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerDocumentScalarFieldEnum | PlayerDocumentScalarFieldEnum[]
  }

  /**
   * User.teamCoaches
   */
  export type User$teamCoachesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    where?: TeamCoachWhereInput
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    cursor?: TeamCoachWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamCoachScalarFieldEnum | TeamCoachScalarFieldEnum[]
  }

  /**
   * User.trainings
   */
  export type User$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    order: number | null
  }

  export type TeamSumAggregateOutputType = {
    order: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    order: number | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    order: number | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    clubId: number
    order: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    order?: true
  }

  export type TeamSumAggregateInputType = {
    order?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    order?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    order?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    order?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    clubId: string
    order: number
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    order?: boolean
    events?: boolean | Team$eventsArgs<ExtArgs>
    matches?: boolean | Team$matchesArgs<ExtArgs>
    players?: boolean | Team$playersArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    coaches?: boolean | Team$coachesArgs<ExtArgs>
    trainings?: boolean | Team$trainingsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    order?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    order?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    order?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "clubId" | "order", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Team$eventsArgs<ExtArgs>
    matches?: boolean | Team$matchesArgs<ExtArgs>
    players?: boolean | Team$playersArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    coaches?: boolean | Team$coachesArgs<ExtArgs>
    trainings?: boolean | Team$trainingsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
      players: Prisma.$PlayerPayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
      coaches: Prisma.$TeamCoachPayload<ExtArgs>[]
      trainings: Prisma.$TrainingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      clubId: string
      order: number
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Team$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Team$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Team$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Team$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    players<T extends Team$playersArgs<ExtArgs> = {}>(args?: Subset<T, Team$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coaches<T extends Team$coachesArgs<ExtArgs> = {}>(args?: Subset<T, Team$coachesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainings<T extends Team$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, Team$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
    readonly clubId: FieldRef<"Team", 'String'>
    readonly order: FieldRef<"Team", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.events
   */
  export type Team$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Team.matches
   */
  export type Team$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Team.players
   */
  export type Team$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Team.coaches
   */
  export type Team$coachesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    where?: TeamCoachWhereInput
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    cursor?: TeamCoachWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamCoachScalarFieldEnum | TeamCoachScalarFieldEnum[]
  }

  /**
   * Team.trainings
   */
  export type Team$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    teamId: string | null
    createdById: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    teamId: string | null
    createdById: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startDate: number
    endDate: number
    location: number
    createdAt: number
    updatedAt: number
    clubId: number
    teamId: number
    createdById: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    createdById?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    createdById?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    createdById?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    startDate: Date
    endDate: Date | null
    location: string | null
    createdAt: Date
    updatedAt: Date
    clubId: string
    teamId: string | null
    createdById: string
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    createdById?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
    mediaItems?: boolean | Event$mediaItemsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    createdById?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    createdById?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    createdById?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startDate" | "endDate" | "location" | "createdAt" | "updatedAt" | "clubId" | "teamId" | "createdById", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
    mediaItems?: boolean | Event$mediaItemsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | Event$teamArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs> | null
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      startDate: Date
      endDate: Date | null
      location: string | null
      createdAt: Date
      updatedAt: Date
      clubId: string
      teamId: string | null
      createdById: string
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends Event$teamArgs<ExtArgs> = {}>(args?: Subset<T, Event$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mediaItems<T extends Event$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Event$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly startDate: FieldRef<"Event", 'DateTime'>
    readonly endDate: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly clubId: FieldRef<"Event", 'String'>
    readonly teamId: FieldRef<"Event", 'String'>
    readonly createdById: FieldRef<"Event", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.team
   */
  export type Event$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Event.mediaItems
   */
  export type Event$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model MediaItem
   */

  export type AggregateMediaItem = {
    _count: MediaItemCountAggregateOutputType | null
    _avg: MediaItemAvgAggregateOutputType | null
    _sum: MediaItemSumAggregateOutputType | null
    _min: MediaItemMinAggregateOutputType | null
    _max: MediaItemMaxAggregateOutputType | null
  }

  export type MediaItemAvgAggregateOutputType = {
    size: number | null
  }

  export type MediaItemSumAggregateOutputType = {
    size: number | null
  }

  export type MediaItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.MediaType | null
    url: string | null
    size: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    eventId: string | null
    uploadedById: string | null
    exerciseId: string | null
    publicUrl: string | null
  }

  export type MediaItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.MediaType | null
    url: string | null
    size: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    eventId: string | null
    uploadedById: string | null
    exerciseId: string | null
    publicUrl: string | null
  }

  export type MediaItemCountAggregateOutputType = {
    id: number
    name: number
    type: number
    url: number
    size: number
    description: number
    createdAt: number
    updatedAt: number
    clubId: number
    eventId: number
    uploadedById: number
    exerciseId: number
    publicUrl: number
    _all: number
  }


  export type MediaItemAvgAggregateInputType = {
    size?: true
  }

  export type MediaItemSumAggregateInputType = {
    size?: true
  }

  export type MediaItemMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    size?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    eventId?: true
    uploadedById?: true
    exerciseId?: true
    publicUrl?: true
  }

  export type MediaItemMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    size?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    eventId?: true
    uploadedById?: true
    exerciseId?: true
    publicUrl?: true
  }

  export type MediaItemCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    size?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    eventId?: true
    uploadedById?: true
    exerciseId?: true
    publicUrl?: true
    _all?: true
  }

  export type MediaItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaItem to aggregate.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaItems
    **/
    _count?: true | MediaItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaItemMaxAggregateInputType
  }

  export type GetMediaItemAggregateType<T extends MediaItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaItem[P]>
      : GetScalarType<T[P], AggregateMediaItem[P]>
  }




  export type MediaItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithAggregationInput | MediaItemOrderByWithAggregationInput[]
    by: MediaItemScalarFieldEnum[] | MediaItemScalarFieldEnum
    having?: MediaItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaItemCountAggregateInputType | true
    _avg?: MediaItemAvgAggregateInputType
    _sum?: MediaItemSumAggregateInputType
    _min?: MediaItemMinAggregateInputType
    _max?: MediaItemMaxAggregateInputType
  }

  export type MediaItemGroupByOutputType = {
    id: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description: string | null
    createdAt: Date
    updatedAt: Date
    clubId: string
    eventId: string | null
    uploadedById: string
    exerciseId: string | null
    publicUrl: string | null
    _count: MediaItemCountAggregateOutputType | null
    _avg: MediaItemAvgAggregateOutputType | null
    _sum: MediaItemSumAggregateOutputType | null
    _min: MediaItemMinAggregateOutputType | null
    _max: MediaItemMaxAggregateOutputType | null
  }

  type GetMediaItemGroupByPayload<T extends MediaItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaItemGroupByOutputType[P]>
            : GetScalarType<T[P], MediaItemGroupByOutputType[P]>
        }
      >
    >


  export type MediaItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    size?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    eventId?: boolean
    uploadedById?: boolean
    exerciseId?: boolean
    publicUrl?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaItem"]>

  export type MediaItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    size?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    eventId?: boolean
    uploadedById?: boolean
    exerciseId?: boolean
    publicUrl?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaItem"]>

  export type MediaItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    size?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    eventId?: boolean
    uploadedById?: boolean
    exerciseId?: boolean
    publicUrl?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaItem"]>

  export type MediaItemSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    size?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    eventId?: boolean
    uploadedById?: boolean
    exerciseId?: boolean
    publicUrl?: boolean
  }

  export type MediaItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "url" | "size" | "description" | "createdAt" | "updatedAt" | "clubId" | "eventId" | "uploadedById" | "exerciseId" | "publicUrl", ExtArgs["result"]["mediaItem"]>
  export type MediaItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MediaItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MediaItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    event?: boolean | MediaItem$eventArgs<ExtArgs>
    exercise?: boolean | MediaItem$exerciseArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MediaItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaItem"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs> | null
      exercise: Prisma.$ExercisePayload<ExtArgs> | null
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.MediaType
      url: string
      size: number
      description: string | null
      createdAt: Date
      updatedAt: Date
      clubId: string
      eventId: string | null
      uploadedById: string
      exerciseId: string | null
      publicUrl: string | null
    }, ExtArgs["result"]["mediaItem"]>
    composites: {}
  }

  type MediaItemGetPayload<S extends boolean | null | undefined | MediaItemDefaultArgs> = $Result.GetResult<Prisma.$MediaItemPayload, S>

  type MediaItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MediaItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MediaItemCountAggregateInputType | true
    }

  export interface MediaItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaItem'], meta: { name: 'MediaItem' } }
    /**
     * Find zero or one MediaItem that matches the filter.
     * @param {MediaItemFindUniqueArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaItemFindUniqueArgs>(args: SelectSubset<T, MediaItemFindUniqueArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MediaItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MediaItemFindUniqueOrThrowArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindFirstArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaItemFindFirstArgs>(args?: SelectSubset<T, MediaItemFindFirstArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindFirstOrThrowArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MediaItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaItems
     * const mediaItems = await prisma.mediaItem.findMany()
     * 
     * // Get first 10 MediaItems
     * const mediaItems = await prisma.mediaItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaItemWithIdOnly = await prisma.mediaItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaItemFindManyArgs>(args?: SelectSubset<T, MediaItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MediaItem.
     * @param {MediaItemCreateArgs} args - Arguments to create a MediaItem.
     * @example
     * // Create one MediaItem
     * const MediaItem = await prisma.mediaItem.create({
     *   data: {
     *     // ... data to create a MediaItem
     *   }
     * })
     * 
     */
    create<T extends MediaItemCreateArgs>(args: SelectSubset<T, MediaItemCreateArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MediaItems.
     * @param {MediaItemCreateManyArgs} args - Arguments to create many MediaItems.
     * @example
     * // Create many MediaItems
     * const mediaItem = await prisma.mediaItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaItemCreateManyArgs>(args?: SelectSubset<T, MediaItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MediaItems and returns the data saved in the database.
     * @param {MediaItemCreateManyAndReturnArgs} args - Arguments to create many MediaItems.
     * @example
     * // Create many MediaItems
     * const mediaItem = await prisma.mediaItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MediaItems and only return the `id`
     * const mediaItemWithIdOnly = await prisma.mediaItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MediaItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MediaItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MediaItem.
     * @param {MediaItemDeleteArgs} args - Arguments to delete one MediaItem.
     * @example
     * // Delete one MediaItem
     * const MediaItem = await prisma.mediaItem.delete({
     *   where: {
     *     // ... filter to delete one MediaItem
     *   }
     * })
     * 
     */
    delete<T extends MediaItemDeleteArgs>(args: SelectSubset<T, MediaItemDeleteArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MediaItem.
     * @param {MediaItemUpdateArgs} args - Arguments to update one MediaItem.
     * @example
     * // Update one MediaItem
     * const mediaItem = await prisma.mediaItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaItemUpdateArgs>(args: SelectSubset<T, MediaItemUpdateArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MediaItems.
     * @param {MediaItemDeleteManyArgs} args - Arguments to filter MediaItems to delete.
     * @example
     * // Delete a few MediaItems
     * const { count } = await prisma.mediaItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaItemDeleteManyArgs>(args?: SelectSubset<T, MediaItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaItems
     * const mediaItem = await prisma.mediaItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaItemUpdateManyArgs>(args: SelectSubset<T, MediaItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaItems and returns the data updated in the database.
     * @param {MediaItemUpdateManyAndReturnArgs} args - Arguments to update many MediaItems.
     * @example
     * // Update many MediaItems
     * const mediaItem = await prisma.mediaItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MediaItems and only return the `id`
     * const mediaItemWithIdOnly = await prisma.mediaItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MediaItemUpdateManyAndReturnArgs>(args: SelectSubset<T, MediaItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MediaItem.
     * @param {MediaItemUpsertArgs} args - Arguments to update or create a MediaItem.
     * @example
     * // Update or create a MediaItem
     * const mediaItem = await prisma.mediaItem.upsert({
     *   create: {
     *     // ... data to create a MediaItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaItem we want to update
     *   }
     * })
     */
    upsert<T extends MediaItemUpsertArgs>(args: SelectSubset<T, MediaItemUpsertArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MediaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemCountArgs} args - Arguments to filter MediaItems to count.
     * @example
     * // Count the number of MediaItems
     * const count = await prisma.mediaItem.count({
     *   where: {
     *     // ... the filter for the MediaItems we want to count
     *   }
     * })
    **/
    count<T extends MediaItemCountArgs>(
      args?: Subset<T, MediaItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaItemAggregateArgs>(args: Subset<T, MediaItemAggregateArgs>): Prisma.PrismaPromise<GetMediaItemAggregateType<T>>

    /**
     * Group by MediaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaItemGroupByArgs['orderBy'] }
        : { orderBy?: MediaItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaItem model
   */
  readonly fields: MediaItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends MediaItem$eventArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    exercise<T extends MediaItem$exerciseArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$exerciseArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MediaItem model
   */
  interface MediaItemFieldRefs {
    readonly id: FieldRef<"MediaItem", 'String'>
    readonly name: FieldRef<"MediaItem", 'String'>
    readonly type: FieldRef<"MediaItem", 'MediaType'>
    readonly url: FieldRef<"MediaItem", 'String'>
    readonly size: FieldRef<"MediaItem", 'Int'>
    readonly description: FieldRef<"MediaItem", 'String'>
    readonly createdAt: FieldRef<"MediaItem", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaItem", 'DateTime'>
    readonly clubId: FieldRef<"MediaItem", 'String'>
    readonly eventId: FieldRef<"MediaItem", 'String'>
    readonly uploadedById: FieldRef<"MediaItem", 'String'>
    readonly exerciseId: FieldRef<"MediaItem", 'String'>
    readonly publicUrl: FieldRef<"MediaItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MediaItem findUnique
   */
  export type MediaItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem findUniqueOrThrow
   */
  export type MediaItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem findFirst
   */
  export type MediaItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaItems.
     */
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem findFirstOrThrow
   */
  export type MediaItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaItems.
     */
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem findMany
   */
  export type MediaItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItems to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem create
   */
  export type MediaItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaItem.
     */
    data: XOR<MediaItemCreateInput, MediaItemUncheckedCreateInput>
  }

  /**
   * MediaItem createMany
   */
  export type MediaItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaItems.
     */
    data: MediaItemCreateManyInput | MediaItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaItem createManyAndReturn
   */
  export type MediaItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * The data used to create many MediaItems.
     */
    data: MediaItemCreateManyInput | MediaItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MediaItem update
   */
  export type MediaItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaItem.
     */
    data: XOR<MediaItemUpdateInput, MediaItemUncheckedUpdateInput>
    /**
     * Choose, which MediaItem to update.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem updateMany
   */
  export type MediaItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaItems.
     */
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyInput>
    /**
     * Filter which MediaItems to update
     */
    where?: MediaItemWhereInput
    /**
     * Limit how many MediaItems to update.
     */
    limit?: number
  }

  /**
   * MediaItem updateManyAndReturn
   */
  export type MediaItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * The data used to update MediaItems.
     */
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyInput>
    /**
     * Filter which MediaItems to update
     */
    where?: MediaItemWhereInput
    /**
     * Limit how many MediaItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MediaItem upsert
   */
  export type MediaItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaItem to update in case it exists.
     */
    where: MediaItemWhereUniqueInput
    /**
     * In case the MediaItem found by the `where` argument doesn't exist, create a new MediaItem with this data.
     */
    create: XOR<MediaItemCreateInput, MediaItemUncheckedCreateInput>
    /**
     * In case the MediaItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaItemUpdateInput, MediaItemUncheckedUpdateInput>
  }

  /**
   * MediaItem delete
   */
  export type MediaItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter which MediaItem to delete.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem deleteMany
   */
  export type MediaItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaItems to delete
     */
    where?: MediaItemWhereInput
    /**
     * Limit how many MediaItems to delete.
     */
    limit?: number
  }

  /**
   * MediaItem.event
   */
  export type MediaItem$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * MediaItem.exercise
   */
  export type MediaItem$exerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
  }

  /**
   * MediaItem without action
   */
  export type MediaItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
  }


  /**
   * Model TrainingCategory
   */

  export type AggregateTrainingCategory = {
    _count: TrainingCategoryCountAggregateOutputType | null
    _min: TrainingCategoryMinAggregateOutputType | null
    _max: TrainingCategoryMaxAggregateOutputType | null
  }

  export type TrainingCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type TrainingCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type TrainingCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    clubId: number
    _all: number
  }


  export type TrainingCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type TrainingCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type TrainingCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    _all?: true
  }

  export type TrainingCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingCategory to aggregate.
     */
    where?: TrainingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingCategories to fetch.
     */
    orderBy?: TrainingCategoryOrderByWithRelationInput | TrainingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingCategories
    **/
    _count?: true | TrainingCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingCategoryMaxAggregateInputType
  }

  export type GetTrainingCategoryAggregateType<T extends TrainingCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingCategory[P]>
      : GetScalarType<T[P], AggregateTrainingCategory[P]>
  }




  export type TrainingCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingCategoryWhereInput
    orderBy?: TrainingCategoryOrderByWithAggregationInput | TrainingCategoryOrderByWithAggregationInput[]
    by: TrainingCategoryScalarFieldEnum[] | TrainingCategoryScalarFieldEnum
    having?: TrainingCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCategoryCountAggregateInputType | true
    _min?: TrainingCategoryMinAggregateInputType
    _max?: TrainingCategoryMaxAggregateInputType
  }

  export type TrainingCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    clubId: string
    _count: TrainingCategoryCountAggregateOutputType | null
    _min: TrainingCategoryMinAggregateOutputType | null
    _max: TrainingCategoryMaxAggregateOutputType | null
  }

  type GetTrainingCategoryGroupByPayload<T extends TrainingCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingCategoryGroupByOutputType[P]>
        }
      >
    >


  export type TrainingCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    trainings?: boolean | TrainingCategory$trainingsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | TrainingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingCategory"]>

  export type TrainingCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingCategory"]>

  export type TrainingCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingCategory"]>

  export type TrainingCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
  }

  export type TrainingCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "clubId", ExtArgs["result"]["trainingCategory"]>
  export type TrainingCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trainings?: boolean | TrainingCategory$trainingsArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    _count?: boolean | TrainingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrainingCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type TrainingCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $TrainingCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrainingCategory"
    objects: {
      trainings: Prisma.$TrainingPayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      clubId: string
    }, ExtArgs["result"]["trainingCategory"]>
    composites: {}
  }

  type TrainingCategoryGetPayload<S extends boolean | null | undefined | TrainingCategoryDefaultArgs> = $Result.GetResult<Prisma.$TrainingCategoryPayload, S>

  type TrainingCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrainingCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrainingCategoryCountAggregateInputType | true
    }

  export interface TrainingCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrainingCategory'], meta: { name: 'TrainingCategory' } }
    /**
     * Find zero or one TrainingCategory that matches the filter.
     * @param {TrainingCategoryFindUniqueArgs} args - Arguments to find a TrainingCategory
     * @example
     * // Get one TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingCategoryFindUniqueArgs>(args: SelectSubset<T, TrainingCategoryFindUniqueArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrainingCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrainingCategoryFindUniqueOrThrowArgs} args - Arguments to find a TrainingCategory
     * @example
     * // Get one TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryFindFirstArgs} args - Arguments to find a TrainingCategory
     * @example
     * // Get one TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingCategoryFindFirstArgs>(args?: SelectSubset<T, TrainingCategoryFindFirstArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryFindFirstOrThrowArgs} args - Arguments to find a TrainingCategory
     * @example
     * // Get one TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrainingCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingCategories
     * const trainingCategories = await prisma.trainingCategory.findMany()
     * 
     * // Get first 10 TrainingCategories
     * const trainingCategories = await prisma.trainingCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingCategoryWithIdOnly = await prisma.trainingCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingCategoryFindManyArgs>(args?: SelectSubset<T, TrainingCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrainingCategory.
     * @param {TrainingCategoryCreateArgs} args - Arguments to create a TrainingCategory.
     * @example
     * // Create one TrainingCategory
     * const TrainingCategory = await prisma.trainingCategory.create({
     *   data: {
     *     // ... data to create a TrainingCategory
     *   }
     * })
     * 
     */
    create<T extends TrainingCategoryCreateArgs>(args: SelectSubset<T, TrainingCategoryCreateArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrainingCategories.
     * @param {TrainingCategoryCreateManyArgs} args - Arguments to create many TrainingCategories.
     * @example
     * // Create many TrainingCategories
     * const trainingCategory = await prisma.trainingCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingCategoryCreateManyArgs>(args?: SelectSubset<T, TrainingCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrainingCategories and returns the data saved in the database.
     * @param {TrainingCategoryCreateManyAndReturnArgs} args - Arguments to create many TrainingCategories.
     * @example
     * // Create many TrainingCategories
     * const trainingCategory = await prisma.trainingCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrainingCategories and only return the `id`
     * const trainingCategoryWithIdOnly = await prisma.trainingCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrainingCategory.
     * @param {TrainingCategoryDeleteArgs} args - Arguments to delete one TrainingCategory.
     * @example
     * // Delete one TrainingCategory
     * const TrainingCategory = await prisma.trainingCategory.delete({
     *   where: {
     *     // ... filter to delete one TrainingCategory
     *   }
     * })
     * 
     */
    delete<T extends TrainingCategoryDeleteArgs>(args: SelectSubset<T, TrainingCategoryDeleteArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrainingCategory.
     * @param {TrainingCategoryUpdateArgs} args - Arguments to update one TrainingCategory.
     * @example
     * // Update one TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingCategoryUpdateArgs>(args: SelectSubset<T, TrainingCategoryUpdateArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrainingCategories.
     * @param {TrainingCategoryDeleteManyArgs} args - Arguments to filter TrainingCategories to delete.
     * @example
     * // Delete a few TrainingCategories
     * const { count } = await prisma.trainingCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingCategoryDeleteManyArgs>(args?: SelectSubset<T, TrainingCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingCategories
     * const trainingCategory = await prisma.trainingCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingCategoryUpdateManyArgs>(args: SelectSubset<T, TrainingCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingCategories and returns the data updated in the database.
     * @param {TrainingCategoryUpdateManyAndReturnArgs} args - Arguments to update many TrainingCategories.
     * @example
     * // Update many TrainingCategories
     * const trainingCategory = await prisma.trainingCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrainingCategories and only return the `id`
     * const trainingCategoryWithIdOnly = await prisma.trainingCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrainingCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, TrainingCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrainingCategory.
     * @param {TrainingCategoryUpsertArgs} args - Arguments to update or create a TrainingCategory.
     * @example
     * // Update or create a TrainingCategory
     * const trainingCategory = await prisma.trainingCategory.upsert({
     *   create: {
     *     // ... data to create a TrainingCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingCategory we want to update
     *   }
     * })
     */
    upsert<T extends TrainingCategoryUpsertArgs>(args: SelectSubset<T, TrainingCategoryUpsertArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrainingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryCountArgs} args - Arguments to filter TrainingCategories to count.
     * @example
     * // Count the number of TrainingCategories
     * const count = await prisma.trainingCategory.count({
     *   where: {
     *     // ... the filter for the TrainingCategories we want to count
     *   }
     * })
    **/
    count<T extends TrainingCategoryCountArgs>(
      args?: Subset<T, TrainingCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingCategoryAggregateArgs>(args: Subset<T, TrainingCategoryAggregateArgs>): Prisma.PrismaPromise<GetTrainingCategoryAggregateType<T>>

    /**
     * Group by TrainingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingCategoryGroupByArgs['orderBy'] }
        : { orderBy?: TrainingCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrainingCategory model
   */
  readonly fields: TrainingCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trainings<T extends TrainingCategory$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, TrainingCategory$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrainingCategory model
   */
  interface TrainingCategoryFieldRefs {
    readonly id: FieldRef<"TrainingCategory", 'String'>
    readonly name: FieldRef<"TrainingCategory", 'String'>
    readonly createdAt: FieldRef<"TrainingCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"TrainingCategory", 'DateTime'>
    readonly clubId: FieldRef<"TrainingCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TrainingCategory findUnique
   */
  export type TrainingCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TrainingCategory to fetch.
     */
    where: TrainingCategoryWhereUniqueInput
  }

  /**
   * TrainingCategory findUniqueOrThrow
   */
  export type TrainingCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TrainingCategory to fetch.
     */
    where: TrainingCategoryWhereUniqueInput
  }

  /**
   * TrainingCategory findFirst
   */
  export type TrainingCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TrainingCategory to fetch.
     */
    where?: TrainingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingCategories to fetch.
     */
    orderBy?: TrainingCategoryOrderByWithRelationInput | TrainingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingCategories.
     */
    cursor?: TrainingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingCategories.
     */
    distinct?: TrainingCategoryScalarFieldEnum | TrainingCategoryScalarFieldEnum[]
  }

  /**
   * TrainingCategory findFirstOrThrow
   */
  export type TrainingCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TrainingCategory to fetch.
     */
    where?: TrainingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingCategories to fetch.
     */
    orderBy?: TrainingCategoryOrderByWithRelationInput | TrainingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingCategories.
     */
    cursor?: TrainingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingCategories.
     */
    distinct?: TrainingCategoryScalarFieldEnum | TrainingCategoryScalarFieldEnum[]
  }

  /**
   * TrainingCategory findMany
   */
  export type TrainingCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TrainingCategories to fetch.
     */
    where?: TrainingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingCategories to fetch.
     */
    orderBy?: TrainingCategoryOrderByWithRelationInput | TrainingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingCategories.
     */
    cursor?: TrainingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingCategories.
     */
    skip?: number
    distinct?: TrainingCategoryScalarFieldEnum | TrainingCategoryScalarFieldEnum[]
  }

  /**
   * TrainingCategory create
   */
  export type TrainingCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a TrainingCategory.
     */
    data: XOR<TrainingCategoryCreateInput, TrainingCategoryUncheckedCreateInput>
  }

  /**
   * TrainingCategory createMany
   */
  export type TrainingCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrainingCategories.
     */
    data: TrainingCategoryCreateManyInput | TrainingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrainingCategory createManyAndReturn
   */
  export type TrainingCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many TrainingCategories.
     */
    data: TrainingCategoryCreateManyInput | TrainingCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingCategory update
   */
  export type TrainingCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a TrainingCategory.
     */
    data: XOR<TrainingCategoryUpdateInput, TrainingCategoryUncheckedUpdateInput>
    /**
     * Choose, which TrainingCategory to update.
     */
    where: TrainingCategoryWhereUniqueInput
  }

  /**
   * TrainingCategory updateMany
   */
  export type TrainingCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrainingCategories.
     */
    data: XOR<TrainingCategoryUpdateManyMutationInput, TrainingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which TrainingCategories to update
     */
    where?: TrainingCategoryWhereInput
    /**
     * Limit how many TrainingCategories to update.
     */
    limit?: number
  }

  /**
   * TrainingCategory updateManyAndReturn
   */
  export type TrainingCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * The data used to update TrainingCategories.
     */
    data: XOR<TrainingCategoryUpdateManyMutationInput, TrainingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which TrainingCategories to update
     */
    where?: TrainingCategoryWhereInput
    /**
     * Limit how many TrainingCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingCategory upsert
   */
  export type TrainingCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the TrainingCategory to update in case it exists.
     */
    where: TrainingCategoryWhereUniqueInput
    /**
     * In case the TrainingCategory found by the `where` argument doesn't exist, create a new TrainingCategory with this data.
     */
    create: XOR<TrainingCategoryCreateInput, TrainingCategoryUncheckedCreateInput>
    /**
     * In case the TrainingCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingCategoryUpdateInput, TrainingCategoryUncheckedUpdateInput>
  }

  /**
   * TrainingCategory delete
   */
  export type TrainingCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
    /**
     * Filter which TrainingCategory to delete.
     */
    where: TrainingCategoryWhereUniqueInput
  }

  /**
   * TrainingCategory deleteMany
   */
  export type TrainingCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingCategories to delete
     */
    where?: TrainingCategoryWhereInput
    /**
     * Limit how many TrainingCategories to delete.
     */
    limit?: number
  }

  /**
   * TrainingCategory.trainings
   */
  export type TrainingCategory$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * TrainingCategory without action
   */
  export type TrainingCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCategory
     */
    select?: TrainingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingCategory
     */
    omit?: TrainingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Training
   */

  export type AggregateTraining = {
    _count: TrainingCountAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  export type TrainingMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    time: string | null
    location: string | null
    notes: string | null
    status: $Enums.TrainingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    teamId: string | null
    categoryId: string | null
    createdById: string | null
    type: string | null
  }

  export type TrainingMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    time: string | null
    location: string | null
    notes: string | null
    status: $Enums.TrainingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    teamId: string | null
    categoryId: string | null
    createdById: string | null
    type: string | null
  }

  export type TrainingCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    time: number
    location: number
    notes: number
    status: number
    createdAt: number
    updatedAt: number
    clubId: number
    teamId: number
    categoryId: number
    createdById: number
    type: number
    _all: number
  }


  export type TrainingMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    time?: true
    location?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    categoryId?: true
    createdById?: true
    type?: true
  }

  export type TrainingMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    time?: true
    location?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    categoryId?: true
    createdById?: true
    type?: true
  }

  export type TrainingCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    time?: true
    location?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    teamId?: true
    categoryId?: true
    createdById?: true
    type?: true
    _all?: true
  }

  export type TrainingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Training to aggregate.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trainings
    **/
    _count?: true | TrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingMaxAggregateInputType
  }

  export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraining[P]>
      : GetScalarType<T[P], AggregateTraining[P]>
  }




  export type TrainingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithAggregationInput | TrainingOrderByWithAggregationInput[]
    by: TrainingScalarFieldEnum[] | TrainingScalarFieldEnum
    having?: TrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCountAggregateInputType | true
    _min?: TrainingMinAggregateInputType
    _max?: TrainingMaxAggregateInputType
  }

  export type TrainingGroupByOutputType = {
    id: string
    title: string
    description: string | null
    date: Date
    time: string
    location: string | null
    notes: string | null
    status: $Enums.TrainingStatus
    createdAt: Date
    updatedAt: Date
    clubId: string
    teamId: string
    categoryId: string
    createdById: string
    type: string
    _count: TrainingCountAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    categoryId?: boolean
    createdById?: boolean
    type?: boolean
    attendances?: boolean | Training$attendancesArgs<ExtArgs>
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    exercises?: boolean | Training$exercisesArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    categoryId?: boolean
    createdById?: boolean
    type?: boolean
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    categoryId?: boolean
    createdById?: boolean
    type?: boolean
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    teamId?: boolean
    categoryId?: boolean
    createdById?: boolean
    type?: boolean
  }

  export type TrainingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "date" | "time" | "location" | "notes" | "status" | "createdAt" | "updatedAt" | "clubId" | "teamId" | "categoryId" | "createdById" | "type", ExtArgs["result"]["training"]>
  export type TrainingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | Training$attendancesArgs<ExtArgs>
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    exercises?: boolean | Training$exercisesArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrainingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TrainingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | TrainingCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TrainingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Training"
    objects: {
      attendances: Prisma.$PlayerAttendancePayload<ExtArgs>[]
      category: Prisma.$TrainingCategoryPayload<ExtArgs>
      club: Prisma.$ClubPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
      exercises: Prisma.$TrainingExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      date: Date
      time: string
      location: string | null
      notes: string | null
      status: $Enums.TrainingStatus
      createdAt: Date
      updatedAt: Date
      clubId: string
      teamId: string
      categoryId: string
      createdById: string
      type: string
    }, ExtArgs["result"]["training"]>
    composites: {}
  }

  type TrainingGetPayload<S extends boolean | null | undefined | TrainingDefaultArgs> = $Result.GetResult<Prisma.$TrainingPayload, S>

  type TrainingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrainingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrainingCountAggregateInputType | true
    }

  export interface TrainingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Training'], meta: { name: 'Training' } }
    /**
     * Find zero or one Training that matches the filter.
     * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingFindUniqueArgs>(args: SelectSubset<T, TrainingFindUniqueArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Training that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrainingFindUniqueOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Training that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingFindFirstArgs>(args?: SelectSubset<T, TrainingFindFirstArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Training that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trainings
     * const trainings = await prisma.training.findMany()
     * 
     * // Get first 10 Trainings
     * const trainings = await prisma.training.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingFindManyArgs>(args?: SelectSubset<T, TrainingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Training.
     * @param {TrainingCreateArgs} args - Arguments to create a Training.
     * @example
     * // Create one Training
     * const Training = await prisma.training.create({
     *   data: {
     *     // ... data to create a Training
     *   }
     * })
     * 
     */
    create<T extends TrainingCreateArgs>(args: SelectSubset<T, TrainingCreateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trainings.
     * @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingCreateManyArgs>(args?: SelectSubset<T, TrainingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trainings and returns the data saved in the database.
     * @param {TrainingCreateManyAndReturnArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trainings and only return the `id`
     * const trainingWithIdOnly = await prisma.training.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Training.
     * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
     * @example
     * // Delete one Training
     * const Training = await prisma.training.delete({
     *   where: {
     *     // ... filter to delete one Training
     *   }
     * })
     * 
     */
    delete<T extends TrainingDeleteArgs>(args: SelectSubset<T, TrainingDeleteArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Training.
     * @param {TrainingUpdateArgs} args - Arguments to update one Training.
     * @example
     * // Update one Training
     * const training = await prisma.training.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingUpdateArgs>(args: SelectSubset<T, TrainingUpdateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trainings.
     * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
     * @example
     * // Delete a few Trainings
     * const { count } = await prisma.training.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingDeleteManyArgs>(args?: SelectSubset<T, TrainingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingUpdateManyArgs>(args: SelectSubset<T, TrainingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings and returns the data updated in the database.
     * @param {TrainingUpdateManyAndReturnArgs} args - Arguments to update many Trainings.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trainings and only return the `id`
     * const trainingWithIdOnly = await prisma.training.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrainingUpdateManyAndReturnArgs>(args: SelectSubset<T, TrainingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Training.
     * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
     * @example
     * // Update or create a Training
     * const training = await prisma.training.upsert({
     *   create: {
     *     // ... data to create a Training
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Training we want to update
     *   }
     * })
     */
    upsert<T extends TrainingUpsertArgs>(args: SelectSubset<T, TrainingUpsertArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
     * @example
     * // Count the number of Trainings
     * const count = await prisma.training.count({
     *   where: {
     *     // ... the filter for the Trainings we want to count
     *   }
     * })
    **/
    count<T extends TrainingCountArgs>(
      args?: Subset<T, TrainingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingAggregateArgs>(args: Subset<T, TrainingAggregateArgs>): Prisma.PrismaPromise<GetTrainingAggregateType<T>>

    /**
     * Group by Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingGroupByArgs['orderBy'] }
        : { orderBy?: TrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Training model
   */
  readonly fields: TrainingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Training.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendances<T extends Training$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, Training$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category<T extends TrainingCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrainingCategoryDefaultArgs<ExtArgs>>): Prisma__TrainingCategoryClient<$Result.GetResult<Prisma.$TrainingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercises<T extends Training$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Training$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Training model
   */
  interface TrainingFieldRefs {
    readonly id: FieldRef<"Training", 'String'>
    readonly title: FieldRef<"Training", 'String'>
    readonly description: FieldRef<"Training", 'String'>
    readonly date: FieldRef<"Training", 'DateTime'>
    readonly time: FieldRef<"Training", 'String'>
    readonly location: FieldRef<"Training", 'String'>
    readonly notes: FieldRef<"Training", 'String'>
    readonly status: FieldRef<"Training", 'TrainingStatus'>
    readonly createdAt: FieldRef<"Training", 'DateTime'>
    readonly updatedAt: FieldRef<"Training", 'DateTime'>
    readonly clubId: FieldRef<"Training", 'String'>
    readonly teamId: FieldRef<"Training", 'String'>
    readonly categoryId: FieldRef<"Training", 'String'>
    readonly createdById: FieldRef<"Training", 'String'>
    readonly type: FieldRef<"Training", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Training findUnique
   */
  export type TrainingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findUniqueOrThrow
   */
  export type TrainingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findFirst
   */
  export type TrainingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findFirstOrThrow
   */
  export type TrainingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findMany
   */
  export type TrainingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Trainings to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training create
   */
  export type TrainingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to create a Training.
     */
    data: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
  }

  /**
   * Training createMany
   */
  export type TrainingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Training createManyAndReturn
   */
  export type TrainingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Training update
   */
  export type TrainingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to update a Training.
     */
    data: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
    /**
     * Choose, which Training to update.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training updateMany
   */
  export type TrainingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trainings.
     */
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to update.
     */
    limit?: number
  }

  /**
   * Training updateManyAndReturn
   */
  export type TrainingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * The data used to update Trainings.
     */
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Training upsert
   */
  export type TrainingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The filter to search for the Training to update in case it exists.
     */
    where: TrainingWhereUniqueInput
    /**
     * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
     */
    create: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
    /**
     * In case the Training was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
  }

  /**
   * Training delete
   */
  export type TrainingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter which Training to delete.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training deleteMany
   */
  export type TrainingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trainings to delete
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to delete.
     */
    limit?: number
  }

  /**
   * Training.attendances
   */
  export type Training$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    where?: PlayerAttendanceWhereInput
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    cursor?: PlayerAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerAttendanceScalarFieldEnum | PlayerAttendanceScalarFieldEnum[]
  }

  /**
   * Training.exercises
   */
  export type Training$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    where?: TrainingExerciseWhereInput
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    cursor?: TrainingExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingExerciseScalarFieldEnum | TrainingExerciseScalarFieldEnum[]
  }

  /**
   * Training without action
   */
  export type TrainingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    length: number | null
    width: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    length: number | null
    width: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    authorId: string | null
    clubId: string | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    length: number | null
    width: number | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    authorId: string | null
    clubId: string | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    length: number | null
    width: number | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    authorId: number
    clubId: number
    categoryId: number
    createdAt: number
    updatedAt: number
    length: number
    width: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    length?: true
    width?: true
  }

  export type ExerciseSumAggregateInputType = {
    length?: true
    width?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    authorId?: true
    clubId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    length?: true
    width?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    authorId?: true
    clubId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    length?: true
    width?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    authorId?: true
    clubId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    length?: true
    width?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt: Date
    updatedAt: Date
    length: number | null
    width: number | null
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    authorId?: boolean
    clubId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    length?: boolean
    width?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    mediaItems?: boolean | Exercise$mediaItemsArgs<ExtArgs>
    trainings?: boolean | Exercise$trainingsArgs<ExtArgs>
    tags?: boolean | Exercise$tagsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    authorId?: boolean
    clubId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    length?: boolean
    width?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    authorId?: boolean
    clubId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    length?: boolean
    width?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    authorId?: boolean
    clubId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    length?: boolean
    width?: boolean
  }

  export type ExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "authorId" | "clubId" | "categoryId" | "createdAt" | "updatedAt" | "length" | "width", ExtArgs["result"]["exercise"]>
  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    mediaItems?: boolean | Exercise$mediaItemsArgs<ExtArgs>
    trainings?: boolean | Exercise$trainingsArgs<ExtArgs>
    tags?: boolean | Exercise$tagsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$ExerciseCategoryPayload<ExtArgs>
      club: Prisma.$ClubPayload<ExtArgs>
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      trainings: Prisma.$TrainingExercisePayload<ExtArgs>[]
      tags: Prisma.$ExerciseTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      authorId: string
      clubId: string
      categoryId: string
      createdAt: Date
      updatedAt: Date
      length: number | null
      width: number | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends ExerciseCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseCategoryDefaultArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    mediaItems<T extends Exercise$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainings<T extends Exercise$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends Exercise$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly title: FieldRef<"Exercise", 'String'>
    readonly description: FieldRef<"Exercise", 'String'>
    readonly authorId: FieldRef<"Exercise", 'String'>
    readonly clubId: FieldRef<"Exercise", 'String'>
    readonly categoryId: FieldRef<"Exercise", 'String'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedAt: FieldRef<"Exercise", 'DateTime'>
    readonly length: FieldRef<"Exercise", 'Float'>
    readonly width: FieldRef<"Exercise", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise updateManyAndReturn
   */
  export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to delete.
     */
    limit?: number
  }

  /**
   * Exercise.mediaItems
   */
  export type Exercise$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Exercise.trainings
   */
  export type Exercise$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    where?: TrainingExerciseWhereInput
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    cursor?: TrainingExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingExerciseScalarFieldEnum | TrainingExerciseScalarFieldEnum[]
  }

  /**
   * Exercise.tags
   */
  export type Exercise$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    where?: ExerciseTagWhereInput
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    cursor?: ExerciseTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model ExerciseCategory
   */

  export type AggregateExerciseCategory = {
    _count: ExerciseCategoryCountAggregateOutputType | null
    _min: ExerciseCategoryMinAggregateOutputType | null
    _max: ExerciseCategoryMaxAggregateOutputType | null
  }

  export type ExerciseCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type ExerciseCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
  }

  export type ExerciseCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    clubId: number
    _all: number
  }


  export type ExerciseCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type ExerciseCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
  }

  export type ExerciseCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    _all?: true
  }

  export type ExerciseCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseCategory to aggregate.
     */
    where?: ExerciseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseCategories to fetch.
     */
    orderBy?: ExerciseCategoryOrderByWithRelationInput | ExerciseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseCategories
    **/
    _count?: true | ExerciseCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseCategoryMaxAggregateInputType
  }

  export type GetExerciseCategoryAggregateType<T extends ExerciseCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseCategory[P]>
      : GetScalarType<T[P], AggregateExerciseCategory[P]>
  }




  export type ExerciseCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseCategoryWhereInput
    orderBy?: ExerciseCategoryOrderByWithAggregationInput | ExerciseCategoryOrderByWithAggregationInput[]
    by: ExerciseCategoryScalarFieldEnum[] | ExerciseCategoryScalarFieldEnum
    having?: ExerciseCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCategoryCountAggregateInputType | true
    _min?: ExerciseCategoryMinAggregateInputType
    _max?: ExerciseCategoryMaxAggregateInputType
  }

  export type ExerciseCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    clubId: string
    _count: ExerciseCategoryCountAggregateOutputType | null
    _min: ExerciseCategoryMinAggregateOutputType | null
    _max: ExerciseCategoryMaxAggregateOutputType | null
  }

  type GetExerciseCategoryGroupByPayload<T extends ExerciseCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    exercises?: boolean | ExerciseCategory$exercisesArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    tags?: boolean | ExerciseCategory$tagsArgs<ExtArgs>
    _count?: boolean | ExerciseCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseCategory"]>

  export type ExerciseCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseCategory"]>

  export type ExerciseCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseCategory"]>

  export type ExerciseCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
  }

  export type ExerciseCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "clubId", ExtArgs["result"]["exerciseCategory"]>
  export type ExerciseCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | ExerciseCategory$exercisesArgs<ExtArgs>
    club?: boolean | ClubDefaultArgs<ExtArgs>
    tags?: boolean | ExerciseCategory$tagsArgs<ExtArgs>
    _count?: boolean | ExerciseCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type ExerciseCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $ExerciseCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExerciseCategory"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      club: Prisma.$ClubPayload<ExtArgs>
      tags: Prisma.$ExerciseTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      clubId: string
    }, ExtArgs["result"]["exerciseCategory"]>
    composites: {}
  }

  type ExerciseCategoryGetPayload<S extends boolean | null | undefined | ExerciseCategoryDefaultArgs> = $Result.GetResult<Prisma.$ExerciseCategoryPayload, S>

  type ExerciseCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCategoryCountAggregateInputType | true
    }

  export interface ExerciseCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseCategory'], meta: { name: 'ExerciseCategory' } }
    /**
     * Find zero or one ExerciseCategory that matches the filter.
     * @param {ExerciseCategoryFindUniqueArgs} args - Arguments to find a ExerciseCategory
     * @example
     * // Get one ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseCategoryFindUniqueArgs>(args: SelectSubset<T, ExerciseCategoryFindUniqueArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExerciseCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseCategoryFindUniqueOrThrowArgs} args - Arguments to find a ExerciseCategory
     * @example
     * // Get one ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExerciseCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryFindFirstArgs} args - Arguments to find a ExerciseCategory
     * @example
     * // Get one ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseCategoryFindFirstArgs>(args?: SelectSubset<T, ExerciseCategoryFindFirstArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExerciseCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryFindFirstOrThrowArgs} args - Arguments to find a ExerciseCategory
     * @example
     * // Get one ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExerciseCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseCategories
     * const exerciseCategories = await prisma.exerciseCategory.findMany()
     * 
     * // Get first 10 ExerciseCategories
     * const exerciseCategories = await prisma.exerciseCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseCategoryWithIdOnly = await prisma.exerciseCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseCategoryFindManyArgs>(args?: SelectSubset<T, ExerciseCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExerciseCategory.
     * @param {ExerciseCategoryCreateArgs} args - Arguments to create a ExerciseCategory.
     * @example
     * // Create one ExerciseCategory
     * const ExerciseCategory = await prisma.exerciseCategory.create({
     *   data: {
     *     // ... data to create a ExerciseCategory
     *   }
     * })
     * 
     */
    create<T extends ExerciseCategoryCreateArgs>(args: SelectSubset<T, ExerciseCategoryCreateArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExerciseCategories.
     * @param {ExerciseCategoryCreateManyArgs} args - Arguments to create many ExerciseCategories.
     * @example
     * // Create many ExerciseCategories
     * const exerciseCategory = await prisma.exerciseCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCategoryCreateManyArgs>(args?: SelectSubset<T, ExerciseCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExerciseCategories and returns the data saved in the database.
     * @param {ExerciseCategoryCreateManyAndReturnArgs} args - Arguments to create many ExerciseCategories.
     * @example
     * // Create many ExerciseCategories
     * const exerciseCategory = await prisma.exerciseCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExerciseCategories and only return the `id`
     * const exerciseCategoryWithIdOnly = await prisma.exerciseCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExerciseCategory.
     * @param {ExerciseCategoryDeleteArgs} args - Arguments to delete one ExerciseCategory.
     * @example
     * // Delete one ExerciseCategory
     * const ExerciseCategory = await prisma.exerciseCategory.delete({
     *   where: {
     *     // ... filter to delete one ExerciseCategory
     *   }
     * })
     * 
     */
    delete<T extends ExerciseCategoryDeleteArgs>(args: SelectSubset<T, ExerciseCategoryDeleteArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExerciseCategory.
     * @param {ExerciseCategoryUpdateArgs} args - Arguments to update one ExerciseCategory.
     * @example
     * // Update one ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseCategoryUpdateArgs>(args: SelectSubset<T, ExerciseCategoryUpdateArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExerciseCategories.
     * @param {ExerciseCategoryDeleteManyArgs} args - Arguments to filter ExerciseCategories to delete.
     * @example
     * // Delete a few ExerciseCategories
     * const { count } = await prisma.exerciseCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseCategoryDeleteManyArgs>(args?: SelectSubset<T, ExerciseCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseCategories
     * const exerciseCategory = await prisma.exerciseCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseCategoryUpdateManyArgs>(args: SelectSubset<T, ExerciseCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseCategories and returns the data updated in the database.
     * @param {ExerciseCategoryUpdateManyAndReturnArgs} args - Arguments to update many ExerciseCategories.
     * @example
     * // Update many ExerciseCategories
     * const exerciseCategory = await prisma.exerciseCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExerciseCategories and only return the `id`
     * const exerciseCategoryWithIdOnly = await prisma.exerciseCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExerciseCategory.
     * @param {ExerciseCategoryUpsertArgs} args - Arguments to update or create a ExerciseCategory.
     * @example
     * // Update or create a ExerciseCategory
     * const exerciseCategory = await prisma.exerciseCategory.upsert({
     *   create: {
     *     // ... data to create a ExerciseCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseCategory we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseCategoryUpsertArgs>(args: SelectSubset<T, ExerciseCategoryUpsertArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExerciseCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryCountArgs} args - Arguments to filter ExerciseCategories to count.
     * @example
     * // Count the number of ExerciseCategories
     * const count = await prisma.exerciseCategory.count({
     *   where: {
     *     // ... the filter for the ExerciseCategories we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCategoryCountArgs>(
      args?: Subset<T, ExerciseCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseCategoryAggregateArgs>(args: Subset<T, ExerciseCategoryAggregateArgs>): Prisma.PrismaPromise<GetExerciseCategoryAggregateType<T>>

    /**
     * Group by ExerciseCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExerciseCategory model
   */
  readonly fields: ExerciseCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends ExerciseCategory$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseCategory$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tags<T extends ExerciseCategory$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseCategory$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExerciseCategory model
   */
  interface ExerciseCategoryFieldRefs {
    readonly id: FieldRef<"ExerciseCategory", 'String'>
    readonly name: FieldRef<"ExerciseCategory", 'String'>
    readonly createdAt: FieldRef<"ExerciseCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ExerciseCategory", 'DateTime'>
    readonly clubId: FieldRef<"ExerciseCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExerciseCategory findUnique
   */
  export type ExerciseCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseCategory to fetch.
     */
    where: ExerciseCategoryWhereUniqueInput
  }

  /**
   * ExerciseCategory findUniqueOrThrow
   */
  export type ExerciseCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseCategory to fetch.
     */
    where: ExerciseCategoryWhereUniqueInput
  }

  /**
   * ExerciseCategory findFirst
   */
  export type ExerciseCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseCategory to fetch.
     */
    where?: ExerciseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseCategories to fetch.
     */
    orderBy?: ExerciseCategoryOrderByWithRelationInput | ExerciseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseCategories.
     */
    cursor?: ExerciseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseCategories.
     */
    distinct?: ExerciseCategoryScalarFieldEnum | ExerciseCategoryScalarFieldEnum[]
  }

  /**
   * ExerciseCategory findFirstOrThrow
   */
  export type ExerciseCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseCategory to fetch.
     */
    where?: ExerciseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseCategories to fetch.
     */
    orderBy?: ExerciseCategoryOrderByWithRelationInput | ExerciseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseCategories.
     */
    cursor?: ExerciseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseCategories.
     */
    distinct?: ExerciseCategoryScalarFieldEnum | ExerciseCategoryScalarFieldEnum[]
  }

  /**
   * ExerciseCategory findMany
   */
  export type ExerciseCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseCategories to fetch.
     */
    where?: ExerciseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseCategories to fetch.
     */
    orderBy?: ExerciseCategoryOrderByWithRelationInput | ExerciseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseCategories.
     */
    cursor?: ExerciseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseCategories.
     */
    skip?: number
    distinct?: ExerciseCategoryScalarFieldEnum | ExerciseCategoryScalarFieldEnum[]
  }

  /**
   * ExerciseCategory create
   */
  export type ExerciseCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ExerciseCategory.
     */
    data: XOR<ExerciseCategoryCreateInput, ExerciseCategoryUncheckedCreateInput>
  }

  /**
   * ExerciseCategory createMany
   */
  export type ExerciseCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExerciseCategories.
     */
    data: ExerciseCategoryCreateManyInput | ExerciseCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExerciseCategory createManyAndReturn
   */
  export type ExerciseCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ExerciseCategories.
     */
    data: ExerciseCategoryCreateManyInput | ExerciseCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExerciseCategory update
   */
  export type ExerciseCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ExerciseCategory.
     */
    data: XOR<ExerciseCategoryUpdateInput, ExerciseCategoryUncheckedUpdateInput>
    /**
     * Choose, which ExerciseCategory to update.
     */
    where: ExerciseCategoryWhereUniqueInput
  }

  /**
   * ExerciseCategory updateMany
   */
  export type ExerciseCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExerciseCategories.
     */
    data: XOR<ExerciseCategoryUpdateManyMutationInput, ExerciseCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseCategories to update
     */
    where?: ExerciseCategoryWhereInput
    /**
     * Limit how many ExerciseCategories to update.
     */
    limit?: number
  }

  /**
   * ExerciseCategory updateManyAndReturn
   */
  export type ExerciseCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ExerciseCategories.
     */
    data: XOR<ExerciseCategoryUpdateManyMutationInput, ExerciseCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseCategories to update
     */
    where?: ExerciseCategoryWhereInput
    /**
     * Limit how many ExerciseCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExerciseCategory upsert
   */
  export type ExerciseCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ExerciseCategory to update in case it exists.
     */
    where: ExerciseCategoryWhereUniqueInput
    /**
     * In case the ExerciseCategory found by the `where` argument doesn't exist, create a new ExerciseCategory with this data.
     */
    create: XOR<ExerciseCategoryCreateInput, ExerciseCategoryUncheckedCreateInput>
    /**
     * In case the ExerciseCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseCategoryUpdateInput, ExerciseCategoryUncheckedUpdateInput>
  }

  /**
   * ExerciseCategory delete
   */
  export type ExerciseCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
    /**
     * Filter which ExerciseCategory to delete.
     */
    where: ExerciseCategoryWhereUniqueInput
  }

  /**
   * ExerciseCategory deleteMany
   */
  export type ExerciseCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseCategories to delete
     */
    where?: ExerciseCategoryWhereInput
    /**
     * Limit how many ExerciseCategories to delete.
     */
    limit?: number
  }

  /**
   * ExerciseCategory.exercises
   */
  export type ExerciseCategory$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * ExerciseCategory.tags
   */
  export type ExerciseCategory$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    where?: ExerciseTagWhereInput
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    cursor?: ExerciseTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * ExerciseCategory without action
   */
  export type ExerciseCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCategory
     */
    select?: ExerciseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseCategory
     */
    omit?: ExerciseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseCategoryInclude<ExtArgs> | null
  }


  /**
   * Model ExerciseTag
   */

  export type AggregateExerciseTag = {
    _count: ExerciseTagCountAggregateOutputType | null
    _min: ExerciseTagMinAggregateOutputType | null
    _max: ExerciseTagMaxAggregateOutputType | null
  }

  export type ExerciseTagMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    exerciseCategoryId: string | null
  }

  export type ExerciseTagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    exerciseCategoryId: string | null
  }

  export type ExerciseTagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    clubId: number
    exerciseCategoryId: number
    _all: number
  }


  export type ExerciseTagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    exerciseCategoryId?: true
  }

  export type ExerciseTagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    exerciseCategoryId?: true
  }

  export type ExerciseTagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    exerciseCategoryId?: true
    _all?: true
  }

  export type ExerciseTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseTag to aggregate.
     */
    where?: ExerciseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTags to fetch.
     */
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseTags
    **/
    _count?: true | ExerciseTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseTagMaxAggregateInputType
  }

  export type GetExerciseTagAggregateType<T extends ExerciseTagAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseTag[P]>
      : GetScalarType<T[P], AggregateExerciseTag[P]>
  }




  export type ExerciseTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTagWhereInput
    orderBy?: ExerciseTagOrderByWithAggregationInput | ExerciseTagOrderByWithAggregationInput[]
    by: ExerciseTagScalarFieldEnum[] | ExerciseTagScalarFieldEnum
    having?: ExerciseTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseTagCountAggregateInputType | true
    _min?: ExerciseTagMinAggregateInputType
    _max?: ExerciseTagMaxAggregateInputType
  }

  export type ExerciseTagGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    clubId: string
    exerciseCategoryId: string
    _count: ExerciseTagCountAggregateOutputType | null
    _min: ExerciseTagMinAggregateOutputType | null
    _max: ExerciseTagMaxAggregateOutputType | null
  }

  type GetExerciseTagGroupByPayload<T extends ExerciseTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseTagGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseTagGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    exerciseCategoryId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    exercises?: boolean | ExerciseTag$exercisesArgs<ExtArgs>
    _count?: boolean | ExerciseTagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseTag"]>

  export type ExerciseTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    exerciseCategoryId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseTag"]>

  export type ExerciseTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    exerciseCategoryId?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseTag"]>

  export type ExerciseTagSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    exerciseCategoryId?: boolean
  }

  export type ExerciseTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "clubId" | "exerciseCategoryId", ExtArgs["result"]["exerciseTag"]>
  export type ExerciseTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
    exercises?: boolean | ExerciseTag$exercisesArgs<ExtArgs>
    _count?: boolean | ExerciseTagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
  }
  export type ExerciseTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    exerciseCategory?: boolean | ExerciseCategoryDefaultArgs<ExtArgs>
  }

  export type $ExerciseTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExerciseTag"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      exerciseCategory: Prisma.$ExerciseCategoryPayload<ExtArgs>
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      clubId: string
      exerciseCategoryId: string
    }, ExtArgs["result"]["exerciseTag"]>
    composites: {}
  }

  type ExerciseTagGetPayload<S extends boolean | null | undefined | ExerciseTagDefaultArgs> = $Result.GetResult<Prisma.$ExerciseTagPayload, S>

  type ExerciseTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseTagCountAggregateInputType | true
    }

  export interface ExerciseTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseTag'], meta: { name: 'ExerciseTag' } }
    /**
     * Find zero or one ExerciseTag that matches the filter.
     * @param {ExerciseTagFindUniqueArgs} args - Arguments to find a ExerciseTag
     * @example
     * // Get one ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseTagFindUniqueArgs>(args: SelectSubset<T, ExerciseTagFindUniqueArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExerciseTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseTagFindUniqueOrThrowArgs} args - Arguments to find a ExerciseTag
     * @example
     * // Get one ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExerciseTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagFindFirstArgs} args - Arguments to find a ExerciseTag
     * @example
     * // Get one ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseTagFindFirstArgs>(args?: SelectSubset<T, ExerciseTagFindFirstArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExerciseTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagFindFirstOrThrowArgs} args - Arguments to find a ExerciseTag
     * @example
     * // Get one ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExerciseTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseTags
     * const exerciseTags = await prisma.exerciseTag.findMany()
     * 
     * // Get first 10 ExerciseTags
     * const exerciseTags = await prisma.exerciseTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseTagWithIdOnly = await prisma.exerciseTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseTagFindManyArgs>(args?: SelectSubset<T, ExerciseTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExerciseTag.
     * @param {ExerciseTagCreateArgs} args - Arguments to create a ExerciseTag.
     * @example
     * // Create one ExerciseTag
     * const ExerciseTag = await prisma.exerciseTag.create({
     *   data: {
     *     // ... data to create a ExerciseTag
     *   }
     * })
     * 
     */
    create<T extends ExerciseTagCreateArgs>(args: SelectSubset<T, ExerciseTagCreateArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExerciseTags.
     * @param {ExerciseTagCreateManyArgs} args - Arguments to create many ExerciseTags.
     * @example
     * // Create many ExerciseTags
     * const exerciseTag = await prisma.exerciseTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseTagCreateManyArgs>(args?: SelectSubset<T, ExerciseTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExerciseTags and returns the data saved in the database.
     * @param {ExerciseTagCreateManyAndReturnArgs} args - Arguments to create many ExerciseTags.
     * @example
     * // Create many ExerciseTags
     * const exerciseTag = await prisma.exerciseTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExerciseTags and only return the `id`
     * const exerciseTagWithIdOnly = await prisma.exerciseTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseTagCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExerciseTag.
     * @param {ExerciseTagDeleteArgs} args - Arguments to delete one ExerciseTag.
     * @example
     * // Delete one ExerciseTag
     * const ExerciseTag = await prisma.exerciseTag.delete({
     *   where: {
     *     // ... filter to delete one ExerciseTag
     *   }
     * })
     * 
     */
    delete<T extends ExerciseTagDeleteArgs>(args: SelectSubset<T, ExerciseTagDeleteArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExerciseTag.
     * @param {ExerciseTagUpdateArgs} args - Arguments to update one ExerciseTag.
     * @example
     * // Update one ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseTagUpdateArgs>(args: SelectSubset<T, ExerciseTagUpdateArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExerciseTags.
     * @param {ExerciseTagDeleteManyArgs} args - Arguments to filter ExerciseTags to delete.
     * @example
     * // Delete a few ExerciseTags
     * const { count } = await prisma.exerciseTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseTagDeleteManyArgs>(args?: SelectSubset<T, ExerciseTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseTags
     * const exerciseTag = await prisma.exerciseTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseTagUpdateManyArgs>(args: SelectSubset<T, ExerciseTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseTags and returns the data updated in the database.
     * @param {ExerciseTagUpdateManyAndReturnArgs} args - Arguments to update many ExerciseTags.
     * @example
     * // Update many ExerciseTags
     * const exerciseTag = await prisma.exerciseTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExerciseTags and only return the `id`
     * const exerciseTagWithIdOnly = await prisma.exerciseTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseTagUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExerciseTag.
     * @param {ExerciseTagUpsertArgs} args - Arguments to update or create a ExerciseTag.
     * @example
     * // Update or create a ExerciseTag
     * const exerciseTag = await prisma.exerciseTag.upsert({
     *   create: {
     *     // ... data to create a ExerciseTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseTag we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseTagUpsertArgs>(args: SelectSubset<T, ExerciseTagUpsertArgs<ExtArgs>>): Prisma__ExerciseTagClient<$Result.GetResult<Prisma.$ExerciseTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExerciseTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagCountArgs} args - Arguments to filter ExerciseTags to count.
     * @example
     * // Count the number of ExerciseTags
     * const count = await prisma.exerciseTag.count({
     *   where: {
     *     // ... the filter for the ExerciseTags we want to count
     *   }
     * })
    **/
    count<T extends ExerciseTagCountArgs>(
      args?: Subset<T, ExerciseTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseTagAggregateArgs>(args: Subset<T, ExerciseTagAggregateArgs>): Prisma.PrismaPromise<GetExerciseTagAggregateType<T>>

    /**
     * Group by ExerciseTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseTagGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExerciseTag model
   */
  readonly fields: ExerciseTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exerciseCategory<T extends ExerciseCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseCategoryDefaultArgs<ExtArgs>>): Prisma__ExerciseCategoryClient<$Result.GetResult<Prisma.$ExerciseCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercises<T extends ExerciseTag$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseTag$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExerciseTag model
   */
  interface ExerciseTagFieldRefs {
    readonly id: FieldRef<"ExerciseTag", 'String'>
    readonly name: FieldRef<"ExerciseTag", 'String'>
    readonly createdAt: FieldRef<"ExerciseTag", 'DateTime'>
    readonly updatedAt: FieldRef<"ExerciseTag", 'DateTime'>
    readonly clubId: FieldRef<"ExerciseTag", 'String'>
    readonly exerciseCategoryId: FieldRef<"ExerciseTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExerciseTag findUnique
   */
  export type ExerciseTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTag to fetch.
     */
    where: ExerciseTagWhereUniqueInput
  }

  /**
   * ExerciseTag findUniqueOrThrow
   */
  export type ExerciseTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTag to fetch.
     */
    where: ExerciseTagWhereUniqueInput
  }

  /**
   * ExerciseTag findFirst
   */
  export type ExerciseTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTag to fetch.
     */
    where?: ExerciseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTags to fetch.
     */
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseTags.
     */
    cursor?: ExerciseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseTags.
     */
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * ExerciseTag findFirstOrThrow
   */
  export type ExerciseTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTag to fetch.
     */
    where?: ExerciseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTags to fetch.
     */
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseTags.
     */
    cursor?: ExerciseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseTags.
     */
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * ExerciseTag findMany
   */
  export type ExerciseTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTags to fetch.
     */
    where?: ExerciseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTags to fetch.
     */
    orderBy?: ExerciseTagOrderByWithRelationInput | ExerciseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseTags.
     */
    cursor?: ExerciseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTags.
     */
    skip?: number
    distinct?: ExerciseTagScalarFieldEnum | ExerciseTagScalarFieldEnum[]
  }

  /**
   * ExerciseTag create
   */
  export type ExerciseTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ExerciseTag.
     */
    data: XOR<ExerciseTagCreateInput, ExerciseTagUncheckedCreateInput>
  }

  /**
   * ExerciseTag createMany
   */
  export type ExerciseTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExerciseTags.
     */
    data: ExerciseTagCreateManyInput | ExerciseTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExerciseTag createManyAndReturn
   */
  export type ExerciseTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * The data used to create many ExerciseTags.
     */
    data: ExerciseTagCreateManyInput | ExerciseTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExerciseTag update
   */
  export type ExerciseTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ExerciseTag.
     */
    data: XOR<ExerciseTagUpdateInput, ExerciseTagUncheckedUpdateInput>
    /**
     * Choose, which ExerciseTag to update.
     */
    where: ExerciseTagWhereUniqueInput
  }

  /**
   * ExerciseTag updateMany
   */
  export type ExerciseTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExerciseTags.
     */
    data: XOR<ExerciseTagUpdateManyMutationInput, ExerciseTagUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseTags to update
     */
    where?: ExerciseTagWhereInput
    /**
     * Limit how many ExerciseTags to update.
     */
    limit?: number
  }

  /**
   * ExerciseTag updateManyAndReturn
   */
  export type ExerciseTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * The data used to update ExerciseTags.
     */
    data: XOR<ExerciseTagUpdateManyMutationInput, ExerciseTagUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseTags to update
     */
    where?: ExerciseTagWhereInput
    /**
     * Limit how many ExerciseTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExerciseTag upsert
   */
  export type ExerciseTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ExerciseTag to update in case it exists.
     */
    where: ExerciseTagWhereUniqueInput
    /**
     * In case the ExerciseTag found by the `where` argument doesn't exist, create a new ExerciseTag with this data.
     */
    create: XOR<ExerciseTagCreateInput, ExerciseTagUncheckedCreateInput>
    /**
     * In case the ExerciseTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseTagUpdateInput, ExerciseTagUncheckedUpdateInput>
  }

  /**
   * ExerciseTag delete
   */
  export type ExerciseTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
    /**
     * Filter which ExerciseTag to delete.
     */
    where: ExerciseTagWhereUniqueInput
  }

  /**
   * ExerciseTag deleteMany
   */
  export type ExerciseTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseTags to delete
     */
    where?: ExerciseTagWhereInput
    /**
     * Limit how many ExerciseTags to delete.
     */
    limit?: number
  }

  /**
   * ExerciseTag.exercises
   */
  export type ExerciseTag$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * ExerciseTag without action
   */
  export type ExerciseTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTag
     */
    select?: ExerciseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExerciseTag
     */
    omit?: ExerciseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseTagInclude<ExtArgs> | null
  }


  /**
   * Model TrainingExercise
   */

  export type AggregateTrainingExercise = {
    _count: TrainingExerciseCountAggregateOutputType | null
    _avg: TrainingExerciseAvgAggregateOutputType | null
    _sum: TrainingExerciseSumAggregateOutputType | null
    _min: TrainingExerciseMinAggregateOutputType | null
    _max: TrainingExerciseMaxAggregateOutputType | null
  }

  export type TrainingExerciseAvgAggregateOutputType = {
    position: number | null
  }

  export type TrainingExerciseSumAggregateOutputType = {
    position: number | null
  }

  export type TrainingExerciseMinAggregateOutputType = {
    id: string | null
    position: number | null
    trainingId: string | null
    exerciseId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingExerciseMaxAggregateOutputType = {
    id: string | null
    position: number | null
    trainingId: string | null
    exerciseId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingExerciseCountAggregateOutputType = {
    id: number
    position: number
    trainingId: number
    exerciseId: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingExerciseAvgAggregateInputType = {
    position?: true
  }

  export type TrainingExerciseSumAggregateInputType = {
    position?: true
  }

  export type TrainingExerciseMinAggregateInputType = {
    id?: true
    position?: true
    trainingId?: true
    exerciseId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingExerciseMaxAggregateInputType = {
    id?: true
    position?: true
    trainingId?: true
    exerciseId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingExerciseCountAggregateInputType = {
    id?: true
    position?: true
    trainingId?: true
    exerciseId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingExercise to aggregate.
     */
    where?: TrainingExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingExercises to fetch.
     */
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingExercises
    **/
    _count?: true | TrainingExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingExerciseMaxAggregateInputType
  }

  export type GetTrainingExerciseAggregateType<T extends TrainingExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingExercise[P]>
      : GetScalarType<T[P], AggregateTrainingExercise[P]>
  }




  export type TrainingExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingExerciseWhereInput
    orderBy?: TrainingExerciseOrderByWithAggregationInput | TrainingExerciseOrderByWithAggregationInput[]
    by: TrainingExerciseScalarFieldEnum[] | TrainingExerciseScalarFieldEnum
    having?: TrainingExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingExerciseCountAggregateInputType | true
    _avg?: TrainingExerciseAvgAggregateInputType
    _sum?: TrainingExerciseSumAggregateInputType
    _min?: TrainingExerciseMinAggregateInputType
    _max?: TrainingExerciseMaxAggregateInputType
  }

  export type TrainingExerciseGroupByOutputType = {
    id: string
    position: number
    trainingId: string
    exerciseId: string
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: TrainingExerciseCountAggregateOutputType | null
    _avg: TrainingExerciseAvgAggregateOutputType | null
    _sum: TrainingExerciseSumAggregateOutputType | null
    _min: TrainingExerciseMinAggregateOutputType | null
    _max: TrainingExerciseMaxAggregateOutputType | null
  }

  type GetTrainingExerciseGroupByPayload<T extends TrainingExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingExerciseGroupByOutputType[P]>
        }
      >
    >


  export type TrainingExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    trainingId?: boolean
    exerciseId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingExercise"]>

  export type TrainingExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    trainingId?: boolean
    exerciseId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingExercise"]>

  export type TrainingExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    trainingId?: boolean
    exerciseId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingExercise"]>

  export type TrainingExerciseSelectScalar = {
    id?: boolean
    position?: boolean
    trainingId?: boolean
    exerciseId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrainingExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "position" | "trainingId" | "exerciseId" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["trainingExercise"]>
  export type TrainingExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type TrainingExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type TrainingExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }

  export type $TrainingExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrainingExercise"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
      training: Prisma.$TrainingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      position: number
      trainingId: string
      exerciseId: string
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["trainingExercise"]>
    composites: {}
  }

  type TrainingExerciseGetPayload<S extends boolean | null | undefined | TrainingExerciseDefaultArgs> = $Result.GetResult<Prisma.$TrainingExercisePayload, S>

  type TrainingExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrainingExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrainingExerciseCountAggregateInputType | true
    }

  export interface TrainingExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrainingExercise'], meta: { name: 'TrainingExercise' } }
    /**
     * Find zero or one TrainingExercise that matches the filter.
     * @param {TrainingExerciseFindUniqueArgs} args - Arguments to find a TrainingExercise
     * @example
     * // Get one TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingExerciseFindUniqueArgs>(args: SelectSubset<T, TrainingExerciseFindUniqueArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrainingExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrainingExerciseFindUniqueOrThrowArgs} args - Arguments to find a TrainingExercise
     * @example
     * // Get one TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseFindFirstArgs} args - Arguments to find a TrainingExercise
     * @example
     * // Get one TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingExerciseFindFirstArgs>(args?: SelectSubset<T, TrainingExerciseFindFirstArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseFindFirstOrThrowArgs} args - Arguments to find a TrainingExercise
     * @example
     * // Get one TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrainingExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingExercises
     * const trainingExercises = await prisma.trainingExercise.findMany()
     * 
     * // Get first 10 TrainingExercises
     * const trainingExercises = await prisma.trainingExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingExerciseWithIdOnly = await prisma.trainingExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingExerciseFindManyArgs>(args?: SelectSubset<T, TrainingExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrainingExercise.
     * @param {TrainingExerciseCreateArgs} args - Arguments to create a TrainingExercise.
     * @example
     * // Create one TrainingExercise
     * const TrainingExercise = await prisma.trainingExercise.create({
     *   data: {
     *     // ... data to create a TrainingExercise
     *   }
     * })
     * 
     */
    create<T extends TrainingExerciseCreateArgs>(args: SelectSubset<T, TrainingExerciseCreateArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrainingExercises.
     * @param {TrainingExerciseCreateManyArgs} args - Arguments to create many TrainingExercises.
     * @example
     * // Create many TrainingExercises
     * const trainingExercise = await prisma.trainingExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingExerciseCreateManyArgs>(args?: SelectSubset<T, TrainingExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrainingExercises and returns the data saved in the database.
     * @param {TrainingExerciseCreateManyAndReturnArgs} args - Arguments to create many TrainingExercises.
     * @example
     * // Create many TrainingExercises
     * const trainingExercise = await prisma.trainingExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrainingExercises and only return the `id`
     * const trainingExerciseWithIdOnly = await prisma.trainingExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrainingExercise.
     * @param {TrainingExerciseDeleteArgs} args - Arguments to delete one TrainingExercise.
     * @example
     * // Delete one TrainingExercise
     * const TrainingExercise = await prisma.trainingExercise.delete({
     *   where: {
     *     // ... filter to delete one TrainingExercise
     *   }
     * })
     * 
     */
    delete<T extends TrainingExerciseDeleteArgs>(args: SelectSubset<T, TrainingExerciseDeleteArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrainingExercise.
     * @param {TrainingExerciseUpdateArgs} args - Arguments to update one TrainingExercise.
     * @example
     * // Update one TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingExerciseUpdateArgs>(args: SelectSubset<T, TrainingExerciseUpdateArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrainingExercises.
     * @param {TrainingExerciseDeleteManyArgs} args - Arguments to filter TrainingExercises to delete.
     * @example
     * // Delete a few TrainingExercises
     * const { count } = await prisma.trainingExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingExerciseDeleteManyArgs>(args?: SelectSubset<T, TrainingExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingExercises
     * const trainingExercise = await prisma.trainingExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingExerciseUpdateManyArgs>(args: SelectSubset<T, TrainingExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingExercises and returns the data updated in the database.
     * @param {TrainingExerciseUpdateManyAndReturnArgs} args - Arguments to update many TrainingExercises.
     * @example
     * // Update many TrainingExercises
     * const trainingExercise = await prisma.trainingExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrainingExercises and only return the `id`
     * const trainingExerciseWithIdOnly = await prisma.trainingExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrainingExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, TrainingExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrainingExercise.
     * @param {TrainingExerciseUpsertArgs} args - Arguments to update or create a TrainingExercise.
     * @example
     * // Update or create a TrainingExercise
     * const trainingExercise = await prisma.trainingExercise.upsert({
     *   create: {
     *     // ... data to create a TrainingExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingExercise we want to update
     *   }
     * })
     */
    upsert<T extends TrainingExerciseUpsertArgs>(args: SelectSubset<T, TrainingExerciseUpsertArgs<ExtArgs>>): Prisma__TrainingExerciseClient<$Result.GetResult<Prisma.$TrainingExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrainingExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseCountArgs} args - Arguments to filter TrainingExercises to count.
     * @example
     * // Count the number of TrainingExercises
     * const count = await prisma.trainingExercise.count({
     *   where: {
     *     // ... the filter for the TrainingExercises we want to count
     *   }
     * })
    **/
    count<T extends TrainingExerciseCountArgs>(
      args?: Subset<T, TrainingExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingExerciseAggregateArgs>(args: Subset<T, TrainingExerciseAggregateArgs>): Prisma.PrismaPromise<GetTrainingExerciseAggregateType<T>>

    /**
     * Group by TrainingExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingExerciseGroupByArgs['orderBy'] }
        : { orderBy?: TrainingExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrainingExercise model
   */
  readonly fields: TrainingExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    training<T extends TrainingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDefaultArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrainingExercise model
   */
  interface TrainingExerciseFieldRefs {
    readonly id: FieldRef<"TrainingExercise", 'String'>
    readonly position: FieldRef<"TrainingExercise", 'Int'>
    readonly trainingId: FieldRef<"TrainingExercise", 'String'>
    readonly exerciseId: FieldRef<"TrainingExercise", 'String'>
    readonly notes: FieldRef<"TrainingExercise", 'String'>
    readonly createdAt: FieldRef<"TrainingExercise", 'DateTime'>
    readonly updatedAt: FieldRef<"TrainingExercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrainingExercise findUnique
   */
  export type TrainingExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter, which TrainingExercise to fetch.
     */
    where: TrainingExerciseWhereUniqueInput
  }

  /**
   * TrainingExercise findUniqueOrThrow
   */
  export type TrainingExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter, which TrainingExercise to fetch.
     */
    where: TrainingExerciseWhereUniqueInput
  }

  /**
   * TrainingExercise findFirst
   */
  export type TrainingExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter, which TrainingExercise to fetch.
     */
    where?: TrainingExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingExercises to fetch.
     */
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingExercises.
     */
    cursor?: TrainingExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingExercises.
     */
    distinct?: TrainingExerciseScalarFieldEnum | TrainingExerciseScalarFieldEnum[]
  }

  /**
   * TrainingExercise findFirstOrThrow
   */
  export type TrainingExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter, which TrainingExercise to fetch.
     */
    where?: TrainingExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingExercises to fetch.
     */
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingExercises.
     */
    cursor?: TrainingExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingExercises.
     */
    distinct?: TrainingExerciseScalarFieldEnum | TrainingExerciseScalarFieldEnum[]
  }

  /**
   * TrainingExercise findMany
   */
  export type TrainingExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter, which TrainingExercises to fetch.
     */
    where?: TrainingExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingExercises to fetch.
     */
    orderBy?: TrainingExerciseOrderByWithRelationInput | TrainingExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingExercises.
     */
    cursor?: TrainingExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingExercises.
     */
    skip?: number
    distinct?: TrainingExerciseScalarFieldEnum | TrainingExerciseScalarFieldEnum[]
  }

  /**
   * TrainingExercise create
   */
  export type TrainingExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a TrainingExercise.
     */
    data: XOR<TrainingExerciseCreateInput, TrainingExerciseUncheckedCreateInput>
  }

  /**
   * TrainingExercise createMany
   */
  export type TrainingExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrainingExercises.
     */
    data: TrainingExerciseCreateManyInput | TrainingExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrainingExercise createManyAndReturn
   */
  export type TrainingExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many TrainingExercises.
     */
    data: TrainingExerciseCreateManyInput | TrainingExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingExercise update
   */
  export type TrainingExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a TrainingExercise.
     */
    data: XOR<TrainingExerciseUpdateInput, TrainingExerciseUncheckedUpdateInput>
    /**
     * Choose, which TrainingExercise to update.
     */
    where: TrainingExerciseWhereUniqueInput
  }

  /**
   * TrainingExercise updateMany
   */
  export type TrainingExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrainingExercises.
     */
    data: XOR<TrainingExerciseUpdateManyMutationInput, TrainingExerciseUncheckedUpdateManyInput>
    /**
     * Filter which TrainingExercises to update
     */
    where?: TrainingExerciseWhereInput
    /**
     * Limit how many TrainingExercises to update.
     */
    limit?: number
  }

  /**
   * TrainingExercise updateManyAndReturn
   */
  export type TrainingExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * The data used to update TrainingExercises.
     */
    data: XOR<TrainingExerciseUpdateManyMutationInput, TrainingExerciseUncheckedUpdateManyInput>
    /**
     * Filter which TrainingExercises to update
     */
    where?: TrainingExerciseWhereInput
    /**
     * Limit how many TrainingExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingExercise upsert
   */
  export type TrainingExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the TrainingExercise to update in case it exists.
     */
    where: TrainingExerciseWhereUniqueInput
    /**
     * In case the TrainingExercise found by the `where` argument doesn't exist, create a new TrainingExercise with this data.
     */
    create: XOR<TrainingExerciseCreateInput, TrainingExerciseUncheckedCreateInput>
    /**
     * In case the TrainingExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingExerciseUpdateInput, TrainingExerciseUncheckedUpdateInput>
  }

  /**
   * TrainingExercise delete
   */
  export type TrainingExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
    /**
     * Filter which TrainingExercise to delete.
     */
    where: TrainingExerciseWhereUniqueInput
  }

  /**
   * TrainingExercise deleteMany
   */
  export type TrainingExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingExercises to delete
     */
    where?: TrainingExerciseWhereInput
    /**
     * Limit how many TrainingExercises to delete.
     */
    limit?: number
  }

  /**
   * TrainingExercise without action
   */
  export type TrainingExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingExercise
     */
    select?: TrainingExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingExercise
     */
    omit?: TrainingExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingExerciseInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    number: number | null
  }

  export type PlayerSumAggregateOutputType = {
    number: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    number: number | null
    position: string | null
    strongFoot: string | null
    dateOfBirth: Date | null
    academyJoinDate: Date | null
    nationality: string | null
    imageUrl: string | null
    status: string | null
    birthCertificateNumber: string | null
    pinCode: string | null
    telegramId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: string | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    number: number | null
    position: string | null
    strongFoot: string | null
    dateOfBirth: Date | null
    academyJoinDate: Date | null
    nationality: string | null
    imageUrl: string | null
    status: string | null
    birthCertificateNumber: string | null
    pinCode: string | null
    telegramId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: string | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    middleName: number
    number: number
    position: number
    strongFoot: number
    dateOfBirth: number
    academyJoinDate: number
    nationality: number
    imageUrl: number
    status: number
    birthCertificateNumber: number
    pinCode: number
    telegramId: number
    createdAt: number
    updatedAt: number
    teamId: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    number?: true
  }

  export type PlayerSumAggregateInputType = {
    number?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    number?: true
    position?: true
    strongFoot?: true
    dateOfBirth?: true
    academyJoinDate?: true
    nationality?: true
    imageUrl?: true
    status?: true
    birthCertificateNumber?: true
    pinCode?: true
    telegramId?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    number?: true
    position?: true
    strongFoot?: true
    dateOfBirth?: true
    academyJoinDate?: true
    nationality?: true
    imageUrl?: true
    status?: true
    birthCertificateNumber?: true
    pinCode?: true
    telegramId?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    number?: true
    position?: true
    strongFoot?: true
    dateOfBirth?: true
    academyJoinDate?: true
    nationality?: true
    imageUrl?: true
    status?: true
    birthCertificateNumber?: true
    pinCode?: true
    telegramId?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    middleName: string | null
    number: number | null
    position: string | null
    strongFoot: string | null
    dateOfBirth: Date | null
    academyJoinDate: Date | null
    nationality: string | null
    imageUrl: string | null
    status: string | null
    birthCertificateNumber: string | null
    pinCode: string
    telegramId: string | null
    createdAt: Date
    updatedAt: Date
    teamId: string
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    number?: boolean
    position?: boolean
    strongFoot?: boolean
    dateOfBirth?: boolean
    academyJoinDate?: boolean
    nationality?: boolean
    imageUrl?: boolean
    status?: boolean
    birthCertificateNumber?: boolean
    pinCode?: boolean
    telegramId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    attendances?: boolean | Player$attendancesArgs<ExtArgs>
    documents?: boolean | Player$documentsArgs<ExtArgs>
    matchStats?: boolean | Player$matchStatsArgs<ExtArgs>
    morningSurveys?: boolean | Player$morningSurveysArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    number?: boolean
    position?: boolean
    strongFoot?: boolean
    dateOfBirth?: boolean
    academyJoinDate?: boolean
    nationality?: boolean
    imageUrl?: boolean
    status?: boolean
    birthCertificateNumber?: boolean
    pinCode?: boolean
    telegramId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    number?: boolean
    position?: boolean
    strongFoot?: boolean
    dateOfBirth?: boolean
    academyJoinDate?: boolean
    nationality?: boolean
    imageUrl?: boolean
    status?: boolean
    birthCertificateNumber?: boolean
    pinCode?: boolean
    telegramId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    number?: boolean
    position?: boolean
    strongFoot?: boolean
    dateOfBirth?: boolean
    academyJoinDate?: boolean
    nationality?: boolean
    imageUrl?: boolean
    status?: boolean
    birthCertificateNumber?: boolean
    pinCode?: boolean
    telegramId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
  }

  export type PlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "middleName" | "number" | "position" | "strongFoot" | "dateOfBirth" | "academyJoinDate" | "nationality" | "imageUrl" | "status" | "birthCertificateNumber" | "pinCode" | "telegramId" | "createdAt" | "updatedAt" | "teamId", ExtArgs["result"]["player"]>
  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    attendances?: boolean | Player$attendancesArgs<ExtArgs>
    documents?: boolean | Player$documentsArgs<ExtArgs>
    matchStats?: boolean | Player$matchStatsArgs<ExtArgs>
    morningSurveys?: boolean | Player$morningSurveysArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      attendances: Prisma.$PlayerAttendancePayload<ExtArgs>[]
      documents: Prisma.$PlayerDocumentPayload<ExtArgs>[]
      matchStats: Prisma.$PlayerMatchStatPayload<ExtArgs>[]
      morningSurveys: Prisma.$MorningSurveyResponsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      middleName: string | null
      number: number | null
      position: string | null
      strongFoot: string | null
      dateOfBirth: Date | null
      academyJoinDate: Date | null
      nationality: string | null
      imageUrl: string | null
      status: string | null
      birthCertificateNumber: string | null
      pinCode: string
      telegramId: string | null
      createdAt: Date
      updatedAt: Date
      teamId: string
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players and returns the data updated in the database.
     * @param {PlayerUpdateManyAndReturnArgs} args - Arguments to update many Players.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendances<T extends Player$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, Player$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Player$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Player$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchStats<T extends Player$matchStatsArgs<ExtArgs> = {}>(args?: Subset<T, Player$matchStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    morningSurveys<T extends Player$morningSurveysArgs<ExtArgs> = {}>(args?: Subset<T, Player$morningSurveysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'String'>
    readonly firstName: FieldRef<"Player", 'String'>
    readonly lastName: FieldRef<"Player", 'String'>
    readonly middleName: FieldRef<"Player", 'String'>
    readonly number: FieldRef<"Player", 'Int'>
    readonly position: FieldRef<"Player", 'String'>
    readonly strongFoot: FieldRef<"Player", 'String'>
    readonly dateOfBirth: FieldRef<"Player", 'DateTime'>
    readonly academyJoinDate: FieldRef<"Player", 'DateTime'>
    readonly nationality: FieldRef<"Player", 'String'>
    readonly imageUrl: FieldRef<"Player", 'String'>
    readonly status: FieldRef<"Player", 'String'>
    readonly birthCertificateNumber: FieldRef<"Player", 'String'>
    readonly pinCode: FieldRef<"Player", 'String'>
    readonly telegramId: FieldRef<"Player", 'String'>
    readonly createdAt: FieldRef<"Player", 'DateTime'>
    readonly updatedAt: FieldRef<"Player", 'DateTime'>
    readonly teamId: FieldRef<"Player", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player updateManyAndReturn
   */
  export type PlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to delete.
     */
    limit?: number
  }

  /**
   * Player.attendances
   */
  export type Player$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    where?: PlayerAttendanceWhereInput
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    cursor?: PlayerAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerAttendanceScalarFieldEnum | PlayerAttendanceScalarFieldEnum[]
  }

  /**
   * Player.documents
   */
  export type Player$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    where?: PlayerDocumentWhereInput
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    cursor?: PlayerDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerDocumentScalarFieldEnum | PlayerDocumentScalarFieldEnum[]
  }

  /**
   * Player.matchStats
   */
  export type Player$matchStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    where?: PlayerMatchStatWhereInput
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    cursor?: PlayerMatchStatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerMatchStatScalarFieldEnum | PlayerMatchStatScalarFieldEnum[]
  }

  /**
   * Player.morningSurveys
   */
  export type Player$morningSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    where?: MorningSurveyResponseWhereInput
    orderBy?: MorningSurveyResponseOrderByWithRelationInput | MorningSurveyResponseOrderByWithRelationInput[]
    cursor?: MorningSurveyResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MorningSurveyResponseScalarFieldEnum | MorningSurveyResponseScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model PlayerDocument
   */

  export type AggregatePlayerDocument = {
    _count: PlayerDocumentCountAggregateOutputType | null
    _avg: PlayerDocumentAvgAggregateOutputType | null
    _sum: PlayerDocumentSumAggregateOutputType | null
    _min: PlayerDocumentMinAggregateOutputType | null
    _max: PlayerDocumentMaxAggregateOutputType | null
  }

  export type PlayerDocumentAvgAggregateOutputType = {
    size: number | null
  }

  export type PlayerDocumentSumAggregateOutputType = {
    size: number | null
  }

  export type PlayerDocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.DocumentType | null
    url: string | null
    publicUrl: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
    playerId: string | null
    clubId: string | null
    uploadedById: string | null
  }

  export type PlayerDocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.DocumentType | null
    url: string | null
    publicUrl: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
    playerId: string | null
    clubId: string | null
    uploadedById: string | null
  }

  export type PlayerDocumentCountAggregateOutputType = {
    id: number
    name: number
    type: number
    url: number
    publicUrl: number
    size: number
    createdAt: number
    updatedAt: number
    playerId: number
    clubId: number
    uploadedById: number
    _all: number
  }


  export type PlayerDocumentAvgAggregateInputType = {
    size?: true
  }

  export type PlayerDocumentSumAggregateInputType = {
    size?: true
  }

  export type PlayerDocumentMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    publicUrl?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    playerId?: true
    clubId?: true
    uploadedById?: true
  }

  export type PlayerDocumentMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    publicUrl?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    playerId?: true
    clubId?: true
    uploadedById?: true
  }

  export type PlayerDocumentCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    publicUrl?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    playerId?: true
    clubId?: true
    uploadedById?: true
    _all?: true
  }

  export type PlayerDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerDocument to aggregate.
     */
    where?: PlayerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerDocuments to fetch.
     */
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerDocuments
    **/
    _count?: true | PlayerDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerDocumentMaxAggregateInputType
  }

  export type GetPlayerDocumentAggregateType<T extends PlayerDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerDocument[P]>
      : GetScalarType<T[P], AggregatePlayerDocument[P]>
  }




  export type PlayerDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerDocumentWhereInput
    orderBy?: PlayerDocumentOrderByWithAggregationInput | PlayerDocumentOrderByWithAggregationInput[]
    by: PlayerDocumentScalarFieldEnum[] | PlayerDocumentScalarFieldEnum
    having?: PlayerDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerDocumentCountAggregateInputType | true
    _avg?: PlayerDocumentAvgAggregateInputType
    _sum?: PlayerDocumentSumAggregateInputType
    _min?: PlayerDocumentMinAggregateInputType
    _max?: PlayerDocumentMaxAggregateInputType
  }

  export type PlayerDocumentGroupByOutputType = {
    id: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt: Date
    updatedAt: Date
    playerId: string
    clubId: string
    uploadedById: string
    _count: PlayerDocumentCountAggregateOutputType | null
    _avg: PlayerDocumentAvgAggregateOutputType | null
    _sum: PlayerDocumentSumAggregateOutputType | null
    _min: PlayerDocumentMinAggregateOutputType | null
    _max: PlayerDocumentMaxAggregateOutputType | null
  }

  type GetPlayerDocumentGroupByPayload<T extends PlayerDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerDocumentGroupByOutputType[P]>
        }
      >
    >


  export type PlayerDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    publicUrl?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playerId?: boolean
    clubId?: boolean
    uploadedById?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerDocument"]>

  export type PlayerDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    publicUrl?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playerId?: boolean
    clubId?: boolean
    uploadedById?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerDocument"]>

  export type PlayerDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    publicUrl?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playerId?: boolean
    clubId?: boolean
    uploadedById?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerDocument"]>

  export type PlayerDocumentSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    publicUrl?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playerId?: boolean
    clubId?: boolean
    uploadedById?: boolean
  }

  export type PlayerDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "url" | "publicUrl" | "size" | "createdAt" | "updatedAt" | "playerId" | "clubId" | "uploadedById", ExtArgs["result"]["playerDocument"]>
  export type PlayerDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlayerDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlayerDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlayerDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerDocument"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.DocumentType
      url: string
      publicUrl: string
      size: number
      createdAt: Date
      updatedAt: Date
      playerId: string
      clubId: string
      uploadedById: string
    }, ExtArgs["result"]["playerDocument"]>
    composites: {}
  }

  type PlayerDocumentGetPayload<S extends boolean | null | undefined | PlayerDocumentDefaultArgs> = $Result.GetResult<Prisma.$PlayerDocumentPayload, S>

  type PlayerDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerDocumentCountAggregateInputType | true
    }

  export interface PlayerDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerDocument'], meta: { name: 'PlayerDocument' } }
    /**
     * Find zero or one PlayerDocument that matches the filter.
     * @param {PlayerDocumentFindUniqueArgs} args - Arguments to find a PlayerDocument
     * @example
     * // Get one PlayerDocument
     * const playerDocument = await prisma.playerDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerDocumentFindUniqueArgs>(args: SelectSubset<T, PlayerDocumentFindUniqueArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerDocumentFindUniqueOrThrowArgs} args - Arguments to find a PlayerDocument
     * @example
     * // Get one PlayerDocument
     * const playerDocument = await prisma.playerDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentFindFirstArgs} args - Arguments to find a PlayerDocument
     * @example
     * // Get one PlayerDocument
     * const playerDocument = await prisma.playerDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerDocumentFindFirstArgs>(args?: SelectSubset<T, PlayerDocumentFindFirstArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentFindFirstOrThrowArgs} args - Arguments to find a PlayerDocument
     * @example
     * // Get one PlayerDocument
     * const playerDocument = await prisma.playerDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerDocuments
     * const playerDocuments = await prisma.playerDocument.findMany()
     * 
     * // Get first 10 PlayerDocuments
     * const playerDocuments = await prisma.playerDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerDocumentWithIdOnly = await prisma.playerDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerDocumentFindManyArgs>(args?: SelectSubset<T, PlayerDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerDocument.
     * @param {PlayerDocumentCreateArgs} args - Arguments to create a PlayerDocument.
     * @example
     * // Create one PlayerDocument
     * const PlayerDocument = await prisma.playerDocument.create({
     *   data: {
     *     // ... data to create a PlayerDocument
     *   }
     * })
     * 
     */
    create<T extends PlayerDocumentCreateArgs>(args: SelectSubset<T, PlayerDocumentCreateArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerDocuments.
     * @param {PlayerDocumentCreateManyArgs} args - Arguments to create many PlayerDocuments.
     * @example
     * // Create many PlayerDocuments
     * const playerDocument = await prisma.playerDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerDocumentCreateManyArgs>(args?: SelectSubset<T, PlayerDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerDocuments and returns the data saved in the database.
     * @param {PlayerDocumentCreateManyAndReturnArgs} args - Arguments to create many PlayerDocuments.
     * @example
     * // Create many PlayerDocuments
     * const playerDocument = await prisma.playerDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerDocuments and only return the `id`
     * const playerDocumentWithIdOnly = await prisma.playerDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerDocument.
     * @param {PlayerDocumentDeleteArgs} args - Arguments to delete one PlayerDocument.
     * @example
     * // Delete one PlayerDocument
     * const PlayerDocument = await prisma.playerDocument.delete({
     *   where: {
     *     // ... filter to delete one PlayerDocument
     *   }
     * })
     * 
     */
    delete<T extends PlayerDocumentDeleteArgs>(args: SelectSubset<T, PlayerDocumentDeleteArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerDocument.
     * @param {PlayerDocumentUpdateArgs} args - Arguments to update one PlayerDocument.
     * @example
     * // Update one PlayerDocument
     * const playerDocument = await prisma.playerDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerDocumentUpdateArgs>(args: SelectSubset<T, PlayerDocumentUpdateArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerDocuments.
     * @param {PlayerDocumentDeleteManyArgs} args - Arguments to filter PlayerDocuments to delete.
     * @example
     * // Delete a few PlayerDocuments
     * const { count } = await prisma.playerDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDocumentDeleteManyArgs>(args?: SelectSubset<T, PlayerDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerDocuments
     * const playerDocument = await prisma.playerDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerDocumentUpdateManyArgs>(args: SelectSubset<T, PlayerDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerDocuments and returns the data updated in the database.
     * @param {PlayerDocumentUpdateManyAndReturnArgs} args - Arguments to update many PlayerDocuments.
     * @example
     * // Update many PlayerDocuments
     * const playerDocument = await prisma.playerDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerDocuments and only return the `id`
     * const playerDocumentWithIdOnly = await prisma.playerDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerDocument.
     * @param {PlayerDocumentUpsertArgs} args - Arguments to update or create a PlayerDocument.
     * @example
     * // Update or create a PlayerDocument
     * const playerDocument = await prisma.playerDocument.upsert({
     *   create: {
     *     // ... data to create a PlayerDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerDocument we want to update
     *   }
     * })
     */
    upsert<T extends PlayerDocumentUpsertArgs>(args: SelectSubset<T, PlayerDocumentUpsertArgs<ExtArgs>>): Prisma__PlayerDocumentClient<$Result.GetResult<Prisma.$PlayerDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentCountArgs} args - Arguments to filter PlayerDocuments to count.
     * @example
     * // Count the number of PlayerDocuments
     * const count = await prisma.playerDocument.count({
     *   where: {
     *     // ... the filter for the PlayerDocuments we want to count
     *   }
     * })
    **/
    count<T extends PlayerDocumentCountArgs>(
      args?: Subset<T, PlayerDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerDocumentAggregateArgs>(args: Subset<T, PlayerDocumentAggregateArgs>): Prisma.PrismaPromise<GetPlayerDocumentAggregateType<T>>

    /**
     * Group by PlayerDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerDocumentGroupByArgs['orderBy'] }
        : { orderBy?: PlayerDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerDocument model
   */
  readonly fields: PlayerDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerDocument model
   */
  interface PlayerDocumentFieldRefs {
    readonly id: FieldRef<"PlayerDocument", 'String'>
    readonly name: FieldRef<"PlayerDocument", 'String'>
    readonly type: FieldRef<"PlayerDocument", 'DocumentType'>
    readonly url: FieldRef<"PlayerDocument", 'String'>
    readonly publicUrl: FieldRef<"PlayerDocument", 'String'>
    readonly size: FieldRef<"PlayerDocument", 'Int'>
    readonly createdAt: FieldRef<"PlayerDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"PlayerDocument", 'DateTime'>
    readonly playerId: FieldRef<"PlayerDocument", 'String'>
    readonly clubId: FieldRef<"PlayerDocument", 'String'>
    readonly uploadedById: FieldRef<"PlayerDocument", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlayerDocument findUnique
   */
  export type PlayerDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PlayerDocument to fetch.
     */
    where: PlayerDocumentWhereUniqueInput
  }

  /**
   * PlayerDocument findUniqueOrThrow
   */
  export type PlayerDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PlayerDocument to fetch.
     */
    where: PlayerDocumentWhereUniqueInput
  }

  /**
   * PlayerDocument findFirst
   */
  export type PlayerDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PlayerDocument to fetch.
     */
    where?: PlayerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerDocuments to fetch.
     */
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerDocuments.
     */
    cursor?: PlayerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerDocuments.
     */
    distinct?: PlayerDocumentScalarFieldEnum | PlayerDocumentScalarFieldEnum[]
  }

  /**
   * PlayerDocument findFirstOrThrow
   */
  export type PlayerDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PlayerDocument to fetch.
     */
    where?: PlayerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerDocuments to fetch.
     */
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerDocuments.
     */
    cursor?: PlayerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerDocuments.
     */
    distinct?: PlayerDocumentScalarFieldEnum | PlayerDocumentScalarFieldEnum[]
  }

  /**
   * PlayerDocument findMany
   */
  export type PlayerDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PlayerDocuments to fetch.
     */
    where?: PlayerDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerDocuments to fetch.
     */
    orderBy?: PlayerDocumentOrderByWithRelationInput | PlayerDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerDocuments.
     */
    cursor?: PlayerDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerDocuments.
     */
    skip?: number
    distinct?: PlayerDocumentScalarFieldEnum | PlayerDocumentScalarFieldEnum[]
  }

  /**
   * PlayerDocument create
   */
  export type PlayerDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerDocument.
     */
    data: XOR<PlayerDocumentCreateInput, PlayerDocumentUncheckedCreateInput>
  }

  /**
   * PlayerDocument createMany
   */
  export type PlayerDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerDocuments.
     */
    data: PlayerDocumentCreateManyInput | PlayerDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerDocument createManyAndReturn
   */
  export type PlayerDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerDocuments.
     */
    data: PlayerDocumentCreateManyInput | PlayerDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerDocument update
   */
  export type PlayerDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerDocument.
     */
    data: XOR<PlayerDocumentUpdateInput, PlayerDocumentUncheckedUpdateInput>
    /**
     * Choose, which PlayerDocument to update.
     */
    where: PlayerDocumentWhereUniqueInput
  }

  /**
   * PlayerDocument updateMany
   */
  export type PlayerDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerDocuments.
     */
    data: XOR<PlayerDocumentUpdateManyMutationInput, PlayerDocumentUncheckedUpdateManyInput>
    /**
     * Filter which PlayerDocuments to update
     */
    where?: PlayerDocumentWhereInput
    /**
     * Limit how many PlayerDocuments to update.
     */
    limit?: number
  }

  /**
   * PlayerDocument updateManyAndReturn
   */
  export type PlayerDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * The data used to update PlayerDocuments.
     */
    data: XOR<PlayerDocumentUpdateManyMutationInput, PlayerDocumentUncheckedUpdateManyInput>
    /**
     * Filter which PlayerDocuments to update
     */
    where?: PlayerDocumentWhereInput
    /**
     * Limit how many PlayerDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerDocument upsert
   */
  export type PlayerDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerDocument to update in case it exists.
     */
    where: PlayerDocumentWhereUniqueInput
    /**
     * In case the PlayerDocument found by the `where` argument doesn't exist, create a new PlayerDocument with this data.
     */
    create: XOR<PlayerDocumentCreateInput, PlayerDocumentUncheckedCreateInput>
    /**
     * In case the PlayerDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerDocumentUpdateInput, PlayerDocumentUncheckedUpdateInput>
  }

  /**
   * PlayerDocument delete
   */
  export type PlayerDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
    /**
     * Filter which PlayerDocument to delete.
     */
    where: PlayerDocumentWhereUniqueInput
  }

  /**
   * PlayerDocument deleteMany
   */
  export type PlayerDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerDocuments to delete
     */
    where?: PlayerDocumentWhereInput
    /**
     * Limit how many PlayerDocuments to delete.
     */
    limit?: number
  }

  /**
   * PlayerDocument without action
   */
  export type PlayerDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerDocument
     */
    select?: PlayerDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerDocument
     */
    omit?: PlayerDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerDocumentInclude<ExtArgs> | null
  }


  /**
   * Model TeamCoach
   */

  export type AggregateTeamCoach = {
    _count: TeamCoachCountAggregateOutputType | null
    _min: TeamCoachMinAggregateOutputType | null
    _max: TeamCoachMaxAggregateOutputType | null
  }

  export type TeamCoachMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    userId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCoachMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    userId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCoachCountAggregateOutputType = {
    id: number
    teamId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamCoachMinAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCoachMaxAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCoachCountAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamCoachAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamCoach to aggregate.
     */
    where?: TeamCoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamCoaches to fetch.
     */
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamCoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamCoaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamCoaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamCoaches
    **/
    _count?: true | TeamCoachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamCoachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamCoachMaxAggregateInputType
  }

  export type GetTeamCoachAggregateType<T extends TeamCoachAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamCoach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamCoach[P]>
      : GetScalarType<T[P], AggregateTeamCoach[P]>
  }




  export type TeamCoachGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamCoachWhereInput
    orderBy?: TeamCoachOrderByWithAggregationInput | TeamCoachOrderByWithAggregationInput[]
    by: TeamCoachScalarFieldEnum[] | TeamCoachScalarFieldEnum
    having?: TeamCoachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCoachCountAggregateInputType | true
    _min?: TeamCoachMinAggregateInputType
    _max?: TeamCoachMaxAggregateInputType
  }

  export type TeamCoachGroupByOutputType = {
    id: string
    teamId: string
    userId: string
    role: string | null
    createdAt: Date
    updatedAt: Date
    _count: TeamCoachCountAggregateOutputType | null
    _min: TeamCoachMinAggregateOutputType | null
    _max: TeamCoachMaxAggregateOutputType | null
  }

  type GetTeamCoachGroupByPayload<T extends TeamCoachGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamCoachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamCoachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamCoachGroupByOutputType[P]>
            : GetScalarType<T[P], TeamCoachGroupByOutputType[P]>
        }
      >
    >


  export type TeamCoachSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamCoach"]>

  export type TeamCoachSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamCoach"]>

  export type TeamCoachSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamCoach"]>

  export type TeamCoachSelectScalar = {
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamCoachOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "userId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["teamCoach"]>
  export type TeamCoachInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeamCoachIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeamCoachIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeamCoachPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamCoach"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      userId: string
      role: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teamCoach"]>
    composites: {}
  }

  type TeamCoachGetPayload<S extends boolean | null | undefined | TeamCoachDefaultArgs> = $Result.GetResult<Prisma.$TeamCoachPayload, S>

  type TeamCoachCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamCoachFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCoachCountAggregateInputType | true
    }

  export interface TeamCoachDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamCoach'], meta: { name: 'TeamCoach' } }
    /**
     * Find zero or one TeamCoach that matches the filter.
     * @param {TeamCoachFindUniqueArgs} args - Arguments to find a TeamCoach
     * @example
     * // Get one TeamCoach
     * const teamCoach = await prisma.teamCoach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamCoachFindUniqueArgs>(args: SelectSubset<T, TeamCoachFindUniqueArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamCoach that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamCoachFindUniqueOrThrowArgs} args - Arguments to find a TeamCoach
     * @example
     * // Get one TeamCoach
     * const teamCoach = await prisma.teamCoach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamCoachFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamCoachFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamCoach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachFindFirstArgs} args - Arguments to find a TeamCoach
     * @example
     * // Get one TeamCoach
     * const teamCoach = await prisma.teamCoach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamCoachFindFirstArgs>(args?: SelectSubset<T, TeamCoachFindFirstArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamCoach that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachFindFirstOrThrowArgs} args - Arguments to find a TeamCoach
     * @example
     * // Get one TeamCoach
     * const teamCoach = await prisma.teamCoach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamCoachFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamCoachFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamCoaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamCoaches
     * const teamCoaches = await prisma.teamCoach.findMany()
     * 
     * // Get first 10 TeamCoaches
     * const teamCoaches = await prisma.teamCoach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamCoachWithIdOnly = await prisma.teamCoach.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamCoachFindManyArgs>(args?: SelectSubset<T, TeamCoachFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamCoach.
     * @param {TeamCoachCreateArgs} args - Arguments to create a TeamCoach.
     * @example
     * // Create one TeamCoach
     * const TeamCoach = await prisma.teamCoach.create({
     *   data: {
     *     // ... data to create a TeamCoach
     *   }
     * })
     * 
     */
    create<T extends TeamCoachCreateArgs>(args: SelectSubset<T, TeamCoachCreateArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamCoaches.
     * @param {TeamCoachCreateManyArgs} args - Arguments to create many TeamCoaches.
     * @example
     * // Create many TeamCoaches
     * const teamCoach = await prisma.teamCoach.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCoachCreateManyArgs>(args?: SelectSubset<T, TeamCoachCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamCoaches and returns the data saved in the database.
     * @param {TeamCoachCreateManyAndReturnArgs} args - Arguments to create many TeamCoaches.
     * @example
     * // Create many TeamCoaches
     * const teamCoach = await prisma.teamCoach.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamCoaches and only return the `id`
     * const teamCoachWithIdOnly = await prisma.teamCoach.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCoachCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCoachCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamCoach.
     * @param {TeamCoachDeleteArgs} args - Arguments to delete one TeamCoach.
     * @example
     * // Delete one TeamCoach
     * const TeamCoach = await prisma.teamCoach.delete({
     *   where: {
     *     // ... filter to delete one TeamCoach
     *   }
     * })
     * 
     */
    delete<T extends TeamCoachDeleteArgs>(args: SelectSubset<T, TeamCoachDeleteArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamCoach.
     * @param {TeamCoachUpdateArgs} args - Arguments to update one TeamCoach.
     * @example
     * // Update one TeamCoach
     * const teamCoach = await prisma.teamCoach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamCoachUpdateArgs>(args: SelectSubset<T, TeamCoachUpdateArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamCoaches.
     * @param {TeamCoachDeleteManyArgs} args - Arguments to filter TeamCoaches to delete.
     * @example
     * // Delete a few TeamCoaches
     * const { count } = await prisma.teamCoach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamCoachDeleteManyArgs>(args?: SelectSubset<T, TeamCoachDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamCoaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamCoaches
     * const teamCoach = await prisma.teamCoach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamCoachUpdateManyArgs>(args: SelectSubset<T, TeamCoachUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamCoaches and returns the data updated in the database.
     * @param {TeamCoachUpdateManyAndReturnArgs} args - Arguments to update many TeamCoaches.
     * @example
     * // Update many TeamCoaches
     * const teamCoach = await prisma.teamCoach.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamCoaches and only return the `id`
     * const teamCoachWithIdOnly = await prisma.teamCoach.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamCoachUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamCoachUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamCoach.
     * @param {TeamCoachUpsertArgs} args - Arguments to update or create a TeamCoach.
     * @example
     * // Update or create a TeamCoach
     * const teamCoach = await prisma.teamCoach.upsert({
     *   create: {
     *     // ... data to create a TeamCoach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamCoach we want to update
     *   }
     * })
     */
    upsert<T extends TeamCoachUpsertArgs>(args: SelectSubset<T, TeamCoachUpsertArgs<ExtArgs>>): Prisma__TeamCoachClient<$Result.GetResult<Prisma.$TeamCoachPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamCoaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachCountArgs} args - Arguments to filter TeamCoaches to count.
     * @example
     * // Count the number of TeamCoaches
     * const count = await prisma.teamCoach.count({
     *   where: {
     *     // ... the filter for the TeamCoaches we want to count
     *   }
     * })
    **/
    count<T extends TeamCoachCountArgs>(
      args?: Subset<T, TeamCoachCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCoachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamCoach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamCoachAggregateArgs>(args: Subset<T, TeamCoachAggregateArgs>): Prisma.PrismaPromise<GetTeamCoachAggregateType<T>>

    /**
     * Group by TeamCoach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCoachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamCoachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamCoachGroupByArgs['orderBy'] }
        : { orderBy?: TeamCoachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamCoachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamCoachGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamCoach model
   */
  readonly fields: TeamCoachFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamCoach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamCoachClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamCoach model
   */
  interface TeamCoachFieldRefs {
    readonly id: FieldRef<"TeamCoach", 'String'>
    readonly teamId: FieldRef<"TeamCoach", 'String'>
    readonly userId: FieldRef<"TeamCoach", 'String'>
    readonly role: FieldRef<"TeamCoach", 'String'>
    readonly createdAt: FieldRef<"TeamCoach", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamCoach", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamCoach findUnique
   */
  export type TeamCoachFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter, which TeamCoach to fetch.
     */
    where: TeamCoachWhereUniqueInput
  }

  /**
   * TeamCoach findUniqueOrThrow
   */
  export type TeamCoachFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter, which TeamCoach to fetch.
     */
    where: TeamCoachWhereUniqueInput
  }

  /**
   * TeamCoach findFirst
   */
  export type TeamCoachFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter, which TeamCoach to fetch.
     */
    where?: TeamCoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamCoaches to fetch.
     */
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamCoaches.
     */
    cursor?: TeamCoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamCoaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamCoaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamCoaches.
     */
    distinct?: TeamCoachScalarFieldEnum | TeamCoachScalarFieldEnum[]
  }

  /**
   * TeamCoach findFirstOrThrow
   */
  export type TeamCoachFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter, which TeamCoach to fetch.
     */
    where?: TeamCoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamCoaches to fetch.
     */
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamCoaches.
     */
    cursor?: TeamCoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamCoaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamCoaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamCoaches.
     */
    distinct?: TeamCoachScalarFieldEnum | TeamCoachScalarFieldEnum[]
  }

  /**
   * TeamCoach findMany
   */
  export type TeamCoachFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter, which TeamCoaches to fetch.
     */
    where?: TeamCoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamCoaches to fetch.
     */
    orderBy?: TeamCoachOrderByWithRelationInput | TeamCoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamCoaches.
     */
    cursor?: TeamCoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamCoaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamCoaches.
     */
    skip?: number
    distinct?: TeamCoachScalarFieldEnum | TeamCoachScalarFieldEnum[]
  }

  /**
   * TeamCoach create
   */
  export type TeamCoachCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamCoach.
     */
    data: XOR<TeamCoachCreateInput, TeamCoachUncheckedCreateInput>
  }

  /**
   * TeamCoach createMany
   */
  export type TeamCoachCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamCoaches.
     */
    data: TeamCoachCreateManyInput | TeamCoachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamCoach createManyAndReturn
   */
  export type TeamCoachCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * The data used to create many TeamCoaches.
     */
    data: TeamCoachCreateManyInput | TeamCoachCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamCoach update
   */
  export type TeamCoachUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamCoach.
     */
    data: XOR<TeamCoachUpdateInput, TeamCoachUncheckedUpdateInput>
    /**
     * Choose, which TeamCoach to update.
     */
    where: TeamCoachWhereUniqueInput
  }

  /**
   * TeamCoach updateMany
   */
  export type TeamCoachUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamCoaches.
     */
    data: XOR<TeamCoachUpdateManyMutationInput, TeamCoachUncheckedUpdateManyInput>
    /**
     * Filter which TeamCoaches to update
     */
    where?: TeamCoachWhereInput
    /**
     * Limit how many TeamCoaches to update.
     */
    limit?: number
  }

  /**
   * TeamCoach updateManyAndReturn
   */
  export type TeamCoachUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * The data used to update TeamCoaches.
     */
    data: XOR<TeamCoachUpdateManyMutationInput, TeamCoachUncheckedUpdateManyInput>
    /**
     * Filter which TeamCoaches to update
     */
    where?: TeamCoachWhereInput
    /**
     * Limit how many TeamCoaches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamCoach upsert
   */
  export type TeamCoachUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamCoach to update in case it exists.
     */
    where: TeamCoachWhereUniqueInput
    /**
     * In case the TeamCoach found by the `where` argument doesn't exist, create a new TeamCoach with this data.
     */
    create: XOR<TeamCoachCreateInput, TeamCoachUncheckedCreateInput>
    /**
     * In case the TeamCoach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamCoachUpdateInput, TeamCoachUncheckedUpdateInput>
  }

  /**
   * TeamCoach delete
   */
  export type TeamCoachDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
    /**
     * Filter which TeamCoach to delete.
     */
    where: TeamCoachWhereUniqueInput
  }

  /**
   * TeamCoach deleteMany
   */
  export type TeamCoachDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamCoaches to delete
     */
    where?: TeamCoachWhereInput
    /**
     * Limit how many TeamCoaches to delete.
     */
    limit?: number
  }

  /**
   * TeamCoach without action
   */
  export type TeamCoachDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCoach
     */
    select?: TeamCoachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamCoach
     */
    omit?: TeamCoachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamCoachInclude<ExtArgs> | null
  }


  /**
   * Model PlayerAttendance
   */

  export type AggregatePlayerAttendance = {
    _count: PlayerAttendanceCountAggregateOutputType | null
    _min: PlayerAttendanceMinAggregateOutputType | null
    _max: PlayerAttendanceMaxAggregateOutputType | null
  }

  export type PlayerAttendanceMinAggregateOutputType = {
    id: string | null
    playerId: string | null
    trainingId: string | null
    status: $Enums.AttendanceStatus | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerAttendanceMaxAggregateOutputType = {
    id: string | null
    playerId: string | null
    trainingId: string | null
    status: $Enums.AttendanceStatus | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerAttendanceCountAggregateOutputType = {
    id: number
    playerId: number
    trainingId: number
    status: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlayerAttendanceMinAggregateInputType = {
    id?: true
    playerId?: true
    trainingId?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerAttendanceMaxAggregateInputType = {
    id?: true
    playerId?: true
    trainingId?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerAttendanceCountAggregateInputType = {
    id?: true
    playerId?: true
    trainingId?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlayerAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAttendance to aggregate.
     */
    where?: PlayerAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAttendances to fetch.
     */
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerAttendances
    **/
    _count?: true | PlayerAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerAttendanceMaxAggregateInputType
  }

  export type GetPlayerAttendanceAggregateType<T extends PlayerAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerAttendance[P]>
      : GetScalarType<T[P], AggregatePlayerAttendance[P]>
  }




  export type PlayerAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAttendanceWhereInput
    orderBy?: PlayerAttendanceOrderByWithAggregationInput | PlayerAttendanceOrderByWithAggregationInput[]
    by: PlayerAttendanceScalarFieldEnum[] | PlayerAttendanceScalarFieldEnum
    having?: PlayerAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerAttendanceCountAggregateInputType | true
    _min?: PlayerAttendanceMinAggregateInputType
    _max?: PlayerAttendanceMaxAggregateInputType
  }

  export type PlayerAttendanceGroupByOutputType = {
    id: string
    playerId: string
    trainingId: string
    status: $Enums.AttendanceStatus
    comment: string | null
    createdAt: Date
    updatedAt: Date
    _count: PlayerAttendanceCountAggregateOutputType | null
    _min: PlayerAttendanceMinAggregateOutputType | null
    _max: PlayerAttendanceMaxAggregateOutputType | null
  }

  type GetPlayerAttendanceGroupByPayload<T extends PlayerAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type PlayerAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    trainingId?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAttendance"]>

  export type PlayerAttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    trainingId?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAttendance"]>

  export type PlayerAttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    trainingId?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAttendance"]>

  export type PlayerAttendanceSelectScalar = {
    id?: boolean
    playerId?: boolean
    trainingId?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlayerAttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "playerId" | "trainingId" | "status" | "comment" | "createdAt" | "updatedAt", ExtArgs["result"]["playerAttendance"]>
  export type PlayerAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type PlayerAttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type PlayerAttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }

  export type $PlayerAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerAttendance"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      training: Prisma.$TrainingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playerId: string
      trainingId: string
      status: $Enums.AttendanceStatus
      comment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playerAttendance"]>
    composites: {}
  }

  type PlayerAttendanceGetPayload<S extends boolean | null | undefined | PlayerAttendanceDefaultArgs> = $Result.GetResult<Prisma.$PlayerAttendancePayload, S>

  type PlayerAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerAttendanceCountAggregateInputType | true
    }

  export interface PlayerAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerAttendance'], meta: { name: 'PlayerAttendance' } }
    /**
     * Find zero or one PlayerAttendance that matches the filter.
     * @param {PlayerAttendanceFindUniqueArgs} args - Arguments to find a PlayerAttendance
     * @example
     * // Get one PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerAttendanceFindUniqueArgs>(args: SelectSubset<T, PlayerAttendanceFindUniqueArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerAttendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerAttendanceFindUniqueOrThrowArgs} args - Arguments to find a PlayerAttendance
     * @example
     * // Get one PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceFindFirstArgs} args - Arguments to find a PlayerAttendance
     * @example
     * // Get one PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerAttendanceFindFirstArgs>(args?: SelectSubset<T, PlayerAttendanceFindFirstArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceFindFirstOrThrowArgs} args - Arguments to find a PlayerAttendance
     * @example
     * // Get one PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerAttendances
     * const playerAttendances = await prisma.playerAttendance.findMany()
     * 
     * // Get first 10 PlayerAttendances
     * const playerAttendances = await prisma.playerAttendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerAttendanceWithIdOnly = await prisma.playerAttendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerAttendanceFindManyArgs>(args?: SelectSubset<T, PlayerAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerAttendance.
     * @param {PlayerAttendanceCreateArgs} args - Arguments to create a PlayerAttendance.
     * @example
     * // Create one PlayerAttendance
     * const PlayerAttendance = await prisma.playerAttendance.create({
     *   data: {
     *     // ... data to create a PlayerAttendance
     *   }
     * })
     * 
     */
    create<T extends PlayerAttendanceCreateArgs>(args: SelectSubset<T, PlayerAttendanceCreateArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerAttendances.
     * @param {PlayerAttendanceCreateManyArgs} args - Arguments to create many PlayerAttendances.
     * @example
     * // Create many PlayerAttendances
     * const playerAttendance = await prisma.playerAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerAttendanceCreateManyArgs>(args?: SelectSubset<T, PlayerAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerAttendances and returns the data saved in the database.
     * @param {PlayerAttendanceCreateManyAndReturnArgs} args - Arguments to create many PlayerAttendances.
     * @example
     * // Create many PlayerAttendances
     * const playerAttendance = await prisma.playerAttendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerAttendances and only return the `id`
     * const playerAttendanceWithIdOnly = await prisma.playerAttendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerAttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerAttendance.
     * @param {PlayerAttendanceDeleteArgs} args - Arguments to delete one PlayerAttendance.
     * @example
     * // Delete one PlayerAttendance
     * const PlayerAttendance = await prisma.playerAttendance.delete({
     *   where: {
     *     // ... filter to delete one PlayerAttendance
     *   }
     * })
     * 
     */
    delete<T extends PlayerAttendanceDeleteArgs>(args: SelectSubset<T, PlayerAttendanceDeleteArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerAttendance.
     * @param {PlayerAttendanceUpdateArgs} args - Arguments to update one PlayerAttendance.
     * @example
     * // Update one PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerAttendanceUpdateArgs>(args: SelectSubset<T, PlayerAttendanceUpdateArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerAttendances.
     * @param {PlayerAttendanceDeleteManyArgs} args - Arguments to filter PlayerAttendances to delete.
     * @example
     * // Delete a few PlayerAttendances
     * const { count } = await prisma.playerAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerAttendanceDeleteManyArgs>(args?: SelectSubset<T, PlayerAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerAttendances
     * const playerAttendance = await prisma.playerAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerAttendanceUpdateManyArgs>(args: SelectSubset<T, PlayerAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerAttendances and returns the data updated in the database.
     * @param {PlayerAttendanceUpdateManyAndReturnArgs} args - Arguments to update many PlayerAttendances.
     * @example
     * // Update many PlayerAttendances
     * const playerAttendance = await prisma.playerAttendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerAttendances and only return the `id`
     * const playerAttendanceWithIdOnly = await prisma.playerAttendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerAttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerAttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerAttendance.
     * @param {PlayerAttendanceUpsertArgs} args - Arguments to update or create a PlayerAttendance.
     * @example
     * // Update or create a PlayerAttendance
     * const playerAttendance = await prisma.playerAttendance.upsert({
     *   create: {
     *     // ... data to create a PlayerAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerAttendance we want to update
     *   }
     * })
     */
    upsert<T extends PlayerAttendanceUpsertArgs>(args: SelectSubset<T, PlayerAttendanceUpsertArgs<ExtArgs>>): Prisma__PlayerAttendanceClient<$Result.GetResult<Prisma.$PlayerAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceCountArgs} args - Arguments to filter PlayerAttendances to count.
     * @example
     * // Count the number of PlayerAttendances
     * const count = await prisma.playerAttendance.count({
     *   where: {
     *     // ... the filter for the PlayerAttendances we want to count
     *   }
     * })
    **/
    count<T extends PlayerAttendanceCountArgs>(
      args?: Subset<T, PlayerAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAttendanceAggregateArgs>(args: Subset<T, PlayerAttendanceAggregateArgs>): Prisma.PrismaPromise<GetPlayerAttendanceAggregateType<T>>

    /**
     * Group by PlayerAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: PlayerAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerAttendance model
   */
  readonly fields: PlayerAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    training<T extends TrainingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDefaultArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerAttendance model
   */
  interface PlayerAttendanceFieldRefs {
    readonly id: FieldRef<"PlayerAttendance", 'String'>
    readonly playerId: FieldRef<"PlayerAttendance", 'String'>
    readonly trainingId: FieldRef<"PlayerAttendance", 'String'>
    readonly status: FieldRef<"PlayerAttendance", 'AttendanceStatus'>
    readonly comment: FieldRef<"PlayerAttendance", 'String'>
    readonly createdAt: FieldRef<"PlayerAttendance", 'DateTime'>
    readonly updatedAt: FieldRef<"PlayerAttendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerAttendance findUnique
   */
  export type PlayerAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAttendance to fetch.
     */
    where: PlayerAttendanceWhereUniqueInput
  }

  /**
   * PlayerAttendance findUniqueOrThrow
   */
  export type PlayerAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAttendance to fetch.
     */
    where: PlayerAttendanceWhereUniqueInput
  }

  /**
   * PlayerAttendance findFirst
   */
  export type PlayerAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAttendance to fetch.
     */
    where?: PlayerAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAttendances to fetch.
     */
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAttendances.
     */
    cursor?: PlayerAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAttendances.
     */
    distinct?: PlayerAttendanceScalarFieldEnum | PlayerAttendanceScalarFieldEnum[]
  }

  /**
   * PlayerAttendance findFirstOrThrow
   */
  export type PlayerAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAttendance to fetch.
     */
    where?: PlayerAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAttendances to fetch.
     */
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAttendances.
     */
    cursor?: PlayerAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAttendances.
     */
    distinct?: PlayerAttendanceScalarFieldEnum | PlayerAttendanceScalarFieldEnum[]
  }

  /**
   * PlayerAttendance findMany
   */
  export type PlayerAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAttendances to fetch.
     */
    where?: PlayerAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAttendances to fetch.
     */
    orderBy?: PlayerAttendanceOrderByWithRelationInput | PlayerAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerAttendances.
     */
    cursor?: PlayerAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAttendances.
     */
    skip?: number
    distinct?: PlayerAttendanceScalarFieldEnum | PlayerAttendanceScalarFieldEnum[]
  }

  /**
   * PlayerAttendance create
   */
  export type PlayerAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerAttendance.
     */
    data: XOR<PlayerAttendanceCreateInput, PlayerAttendanceUncheckedCreateInput>
  }

  /**
   * PlayerAttendance createMany
   */
  export type PlayerAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerAttendances.
     */
    data: PlayerAttendanceCreateManyInput | PlayerAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerAttendance createManyAndReturn
   */
  export type PlayerAttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerAttendances.
     */
    data: PlayerAttendanceCreateManyInput | PlayerAttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerAttendance update
   */
  export type PlayerAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerAttendance.
     */
    data: XOR<PlayerAttendanceUpdateInput, PlayerAttendanceUncheckedUpdateInput>
    /**
     * Choose, which PlayerAttendance to update.
     */
    where: PlayerAttendanceWhereUniqueInput
  }

  /**
   * PlayerAttendance updateMany
   */
  export type PlayerAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerAttendances.
     */
    data: XOR<PlayerAttendanceUpdateManyMutationInput, PlayerAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which PlayerAttendances to update
     */
    where?: PlayerAttendanceWhereInput
    /**
     * Limit how many PlayerAttendances to update.
     */
    limit?: number
  }

  /**
   * PlayerAttendance updateManyAndReturn
   */
  export type PlayerAttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * The data used to update PlayerAttendances.
     */
    data: XOR<PlayerAttendanceUpdateManyMutationInput, PlayerAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which PlayerAttendances to update
     */
    where?: PlayerAttendanceWhereInput
    /**
     * Limit how many PlayerAttendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerAttendance upsert
   */
  export type PlayerAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerAttendance to update in case it exists.
     */
    where: PlayerAttendanceWhereUniqueInput
    /**
     * In case the PlayerAttendance found by the `where` argument doesn't exist, create a new PlayerAttendance with this data.
     */
    create: XOR<PlayerAttendanceCreateInput, PlayerAttendanceUncheckedCreateInput>
    /**
     * In case the PlayerAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerAttendanceUpdateInput, PlayerAttendanceUncheckedUpdateInput>
  }

  /**
   * PlayerAttendance delete
   */
  export type PlayerAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
    /**
     * Filter which PlayerAttendance to delete.
     */
    where: PlayerAttendanceWhereUniqueInput
  }

  /**
   * PlayerAttendance deleteMany
   */
  export type PlayerAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAttendances to delete
     */
    where?: PlayerAttendanceWhereInput
    /**
     * Limit how many PlayerAttendances to delete.
     */
    limit?: number
  }

  /**
   * PlayerAttendance without action
   */
  export type PlayerAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAttendance
     */
    select?: PlayerAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAttendance
     */
    omit?: PlayerAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    teamGoals: number | null
    opponentGoals: number | null
  }

  export type MatchSumAggregateOutputType = {
    teamGoals: number | null
    opponentGoals: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    competitionType: $Enums.CompetitionType | null
    date: Date | null
    time: string | null
    isHome: boolean | null
    teamId: string | null
    opponentName: string | null
    teamGoals: number | null
    opponentGoals: number | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    formation: string | null
    gameFormat: string | null
    markerColor: string | null
    notes: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    competitionType: $Enums.CompetitionType | null
    date: Date | null
    time: string | null
    isHome: boolean | null
    teamId: string | null
    opponentName: string | null
    teamGoals: number | null
    opponentGoals: number | null
    createdAt: Date | null
    updatedAt: Date | null
    clubId: string | null
    formation: string | null
    gameFormat: string | null
    markerColor: string | null
    notes: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    competitionType: number
    date: number
    time: number
    isHome: number
    teamId: number
    opponentName: number
    teamGoals: number
    opponentGoals: number
    createdAt: number
    updatedAt: number
    clubId: number
    formation: number
    gameFormat: number
    markerColor: number
    notes: number
    playerPositions: number
    positionAssignments: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    teamGoals?: true
    opponentGoals?: true
  }

  export type MatchSumAggregateInputType = {
    teamGoals?: true
    opponentGoals?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    competitionType?: true
    date?: true
    time?: true
    isHome?: true
    teamId?: true
    opponentName?: true
    teamGoals?: true
    opponentGoals?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    formation?: true
    gameFormat?: true
    markerColor?: true
    notes?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    competitionType?: true
    date?: true
    time?: true
    isHome?: true
    teamId?: true
    opponentName?: true
    teamGoals?: true
    opponentGoals?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    formation?: true
    gameFormat?: true
    markerColor?: true
    notes?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    competitionType?: true
    date?: true
    time?: true
    isHome?: true
    teamId?: true
    opponentName?: true
    teamGoals?: true
    opponentGoals?: true
    createdAt?: true
    updatedAt?: true
    clubId?: true
    formation?: true
    gameFormat?: true
    markerColor?: true
    notes?: true
    playerPositions?: true
    positionAssignments?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    competitionType: $Enums.CompetitionType
    date: Date
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals: number
    opponentGoals: number
    createdAt: Date
    updatedAt: Date
    clubId: string
    formation: string | null
    gameFormat: string | null
    markerColor: string | null
    notes: string | null
    playerPositions: JsonValue | null
    positionAssignments: JsonValue | null
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    competitionType?: boolean
    date?: boolean
    time?: boolean
    isHome?: boolean
    teamId?: boolean
    opponentName?: boolean
    teamGoals?: boolean
    opponentGoals?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    formation?: boolean
    gameFormat?: boolean
    markerColor?: boolean
    notes?: boolean
    playerPositions?: boolean
    positionAssignments?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    playerStats?: boolean | Match$playerStatsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    competitionType?: boolean
    date?: boolean
    time?: boolean
    isHome?: boolean
    teamId?: boolean
    opponentName?: boolean
    teamGoals?: boolean
    opponentGoals?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    formation?: boolean
    gameFormat?: boolean
    markerColor?: boolean
    notes?: boolean
    playerPositions?: boolean
    positionAssignments?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    competitionType?: boolean
    date?: boolean
    time?: boolean
    isHome?: boolean
    teamId?: boolean
    opponentName?: boolean
    teamGoals?: boolean
    opponentGoals?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    formation?: boolean
    gameFormat?: boolean
    markerColor?: boolean
    notes?: boolean
    playerPositions?: boolean
    positionAssignments?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    competitionType?: boolean
    date?: boolean
    time?: boolean
    isHome?: boolean
    teamId?: boolean
    opponentName?: boolean
    teamGoals?: boolean
    opponentGoals?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubId?: boolean
    formation?: boolean
    gameFormat?: boolean
    markerColor?: boolean
    notes?: boolean
    playerPositions?: boolean
    positionAssignments?: boolean
  }

  export type MatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "competitionType" | "date" | "time" | "isHome" | "teamId" | "opponentName" | "teamGoals" | "opponentGoals" | "createdAt" | "updatedAt" | "clubId" | "formation" | "gameFormat" | "markerColor" | "notes" | "playerPositions" | "positionAssignments", ExtArgs["result"]["match"]>
  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    playerStats?: boolean | Match$playerStatsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type MatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
      playerStats: Prisma.$PlayerMatchStatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      competitionType: $Enums.CompetitionType
      date: Date
      time: string
      isHome: boolean
      teamId: string
      opponentName: string
      teamGoals: number
      opponentGoals: number
      createdAt: Date
      updatedAt: Date
      clubId: string
      formation: string | null
      gameFormat: string | null
      markerColor: string | null
      notes: string | null
      playerPositions: Prisma.JsonValue | null
      positionAssignments: Prisma.JsonValue | null
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches and returns the data updated in the database.
     * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    playerStats<T extends Match$playerStatsArgs<ExtArgs> = {}>(args?: Subset<T, Match$playerStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly competitionType: FieldRef<"Match", 'CompetitionType'>
    readonly date: FieldRef<"Match", 'DateTime'>
    readonly time: FieldRef<"Match", 'String'>
    readonly isHome: FieldRef<"Match", 'Boolean'>
    readonly teamId: FieldRef<"Match", 'String'>
    readonly opponentName: FieldRef<"Match", 'String'>
    readonly teamGoals: FieldRef<"Match", 'Int'>
    readonly opponentGoals: FieldRef<"Match", 'Int'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
    readonly updatedAt: FieldRef<"Match", 'DateTime'>
    readonly clubId: FieldRef<"Match", 'String'>
    readonly formation: FieldRef<"Match", 'String'>
    readonly gameFormat: FieldRef<"Match", 'String'>
    readonly markerColor: FieldRef<"Match", 'String'>
    readonly notes: FieldRef<"Match", 'String'>
    readonly playerPositions: FieldRef<"Match", 'Json'>
    readonly positionAssignments: FieldRef<"Match", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
  }

  /**
   * Match updateManyAndReturn
   */
  export type MatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to delete.
     */
    limit?: number
  }

  /**
   * Match.playerStats
   */
  export type Match$playerStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    where?: PlayerMatchStatWhereInput
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    cursor?: PlayerMatchStatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerMatchStatScalarFieldEnum | PlayerMatchStatScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model PlayerMatchStat
   */

  export type AggregatePlayerMatchStat = {
    _count: PlayerMatchStatCountAggregateOutputType | null
    _avg: PlayerMatchStatAvgAggregateOutputType | null
    _sum: PlayerMatchStatSumAggregateOutputType | null
    _min: PlayerMatchStatMinAggregateOutputType | null
    _max: PlayerMatchStatMaxAggregateOutputType | null
  }

  export type PlayerMatchStatAvgAggregateOutputType = {
    minutesPlayed: number | null
    goals: number | null
    assists: number | null
    yellowCards: number | null
    redCards: number | null
  }

  export type PlayerMatchStatSumAggregateOutputType = {
    minutesPlayed: number | null
    goals: number | null
    assists: number | null
    yellowCards: number | null
    redCards: number | null
  }

  export type PlayerMatchStatMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    playerId: string | null
    isStarter: boolean | null
    minutesPlayed: number | null
    goals: number | null
    assists: number | null
    yellowCards: number | null
    redCards: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerMatchStatMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    playerId: string | null
    isStarter: boolean | null
    minutesPlayed: number | null
    goals: number | null
    assists: number | null
    yellowCards: number | null
    redCards: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerMatchStatCountAggregateOutputType = {
    id: number
    matchId: number
    playerId: number
    isStarter: number
    minutesPlayed: number
    goals: number
    assists: number
    yellowCards: number
    redCards: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlayerMatchStatAvgAggregateInputType = {
    minutesPlayed?: true
    goals?: true
    assists?: true
    yellowCards?: true
    redCards?: true
  }

  export type PlayerMatchStatSumAggregateInputType = {
    minutesPlayed?: true
    goals?: true
    assists?: true
    yellowCards?: true
    redCards?: true
  }

  export type PlayerMatchStatMinAggregateInputType = {
    id?: true
    matchId?: true
    playerId?: true
    isStarter?: true
    minutesPlayed?: true
    goals?: true
    assists?: true
    yellowCards?: true
    redCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerMatchStatMaxAggregateInputType = {
    id?: true
    matchId?: true
    playerId?: true
    isStarter?: true
    minutesPlayed?: true
    goals?: true
    assists?: true
    yellowCards?: true
    redCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerMatchStatCountAggregateInputType = {
    id?: true
    matchId?: true
    playerId?: true
    isStarter?: true
    minutesPlayed?: true
    goals?: true
    assists?: true
    yellowCards?: true
    redCards?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlayerMatchStatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerMatchStat to aggregate.
     */
    where?: PlayerMatchStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerMatchStats to fetch.
     */
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerMatchStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerMatchStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerMatchStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerMatchStats
    **/
    _count?: true | PlayerMatchStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerMatchStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerMatchStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMatchStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMatchStatMaxAggregateInputType
  }

  export type GetPlayerMatchStatAggregateType<T extends PlayerMatchStatAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerMatchStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerMatchStat[P]>
      : GetScalarType<T[P], AggregatePlayerMatchStat[P]>
  }




  export type PlayerMatchStatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerMatchStatWhereInput
    orderBy?: PlayerMatchStatOrderByWithAggregationInput | PlayerMatchStatOrderByWithAggregationInput[]
    by: PlayerMatchStatScalarFieldEnum[] | PlayerMatchStatScalarFieldEnum
    having?: PlayerMatchStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerMatchStatCountAggregateInputType | true
    _avg?: PlayerMatchStatAvgAggregateInputType
    _sum?: PlayerMatchStatSumAggregateInputType
    _min?: PlayerMatchStatMinAggregateInputType
    _max?: PlayerMatchStatMaxAggregateInputType
  }

  export type PlayerMatchStatGroupByOutputType = {
    id: string
    matchId: string
    playerId: string
    isStarter: boolean
    minutesPlayed: number
    goals: number
    assists: number
    yellowCards: number
    redCards: number
    createdAt: Date
    updatedAt: Date
    _count: PlayerMatchStatCountAggregateOutputType | null
    _avg: PlayerMatchStatAvgAggregateOutputType | null
    _sum: PlayerMatchStatSumAggregateOutputType | null
    _min: PlayerMatchStatMinAggregateOutputType | null
    _max: PlayerMatchStatMaxAggregateOutputType | null
  }

  type GetPlayerMatchStatGroupByPayload<T extends PlayerMatchStatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerMatchStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerMatchStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerMatchStatGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerMatchStatGroupByOutputType[P]>
        }
      >
    >


  export type PlayerMatchStatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    playerId?: boolean
    isStarter?: boolean
    minutesPlayed?: boolean
    goals?: boolean
    assists?: boolean
    yellowCards?: boolean
    redCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerMatchStat"]>

  export type PlayerMatchStatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    playerId?: boolean
    isStarter?: boolean
    minutesPlayed?: boolean
    goals?: boolean
    assists?: boolean
    yellowCards?: boolean
    redCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerMatchStat"]>

  export type PlayerMatchStatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    playerId?: boolean
    isStarter?: boolean
    minutesPlayed?: boolean
    goals?: boolean
    assists?: boolean
    yellowCards?: boolean
    redCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerMatchStat"]>

  export type PlayerMatchStatSelectScalar = {
    id?: boolean
    matchId?: boolean
    playerId?: boolean
    isStarter?: boolean
    minutesPlayed?: boolean
    goals?: boolean
    assists?: boolean
    yellowCards?: boolean
    redCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlayerMatchStatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "matchId" | "playerId" | "isStarter" | "minutesPlayed" | "goals" | "assists" | "yellowCards" | "redCards" | "createdAt" | "updatedAt", ExtArgs["result"]["playerMatchStat"]>
  export type PlayerMatchStatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type PlayerMatchStatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type PlayerMatchStatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $PlayerMatchStatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerMatchStat"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      playerId: string
      isStarter: boolean
      minutesPlayed: number
      goals: number
      assists: number
      yellowCards: number
      redCards: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playerMatchStat"]>
    composites: {}
  }

  type PlayerMatchStatGetPayload<S extends boolean | null | undefined | PlayerMatchStatDefaultArgs> = $Result.GetResult<Prisma.$PlayerMatchStatPayload, S>

  type PlayerMatchStatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerMatchStatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerMatchStatCountAggregateInputType | true
    }

  export interface PlayerMatchStatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerMatchStat'], meta: { name: 'PlayerMatchStat' } }
    /**
     * Find zero or one PlayerMatchStat that matches the filter.
     * @param {PlayerMatchStatFindUniqueArgs} args - Arguments to find a PlayerMatchStat
     * @example
     * // Get one PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerMatchStatFindUniqueArgs>(args: SelectSubset<T, PlayerMatchStatFindUniqueArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerMatchStat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerMatchStatFindUniqueOrThrowArgs} args - Arguments to find a PlayerMatchStat
     * @example
     * // Get one PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerMatchStatFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerMatchStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerMatchStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatFindFirstArgs} args - Arguments to find a PlayerMatchStat
     * @example
     * // Get one PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerMatchStatFindFirstArgs>(args?: SelectSubset<T, PlayerMatchStatFindFirstArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerMatchStat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatFindFirstOrThrowArgs} args - Arguments to find a PlayerMatchStat
     * @example
     * // Get one PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerMatchStatFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerMatchStatFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerMatchStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerMatchStats
     * const playerMatchStats = await prisma.playerMatchStat.findMany()
     * 
     * // Get first 10 PlayerMatchStats
     * const playerMatchStats = await prisma.playerMatchStat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerMatchStatWithIdOnly = await prisma.playerMatchStat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerMatchStatFindManyArgs>(args?: SelectSubset<T, PlayerMatchStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerMatchStat.
     * @param {PlayerMatchStatCreateArgs} args - Arguments to create a PlayerMatchStat.
     * @example
     * // Create one PlayerMatchStat
     * const PlayerMatchStat = await prisma.playerMatchStat.create({
     *   data: {
     *     // ... data to create a PlayerMatchStat
     *   }
     * })
     * 
     */
    create<T extends PlayerMatchStatCreateArgs>(args: SelectSubset<T, PlayerMatchStatCreateArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerMatchStats.
     * @param {PlayerMatchStatCreateManyArgs} args - Arguments to create many PlayerMatchStats.
     * @example
     * // Create many PlayerMatchStats
     * const playerMatchStat = await prisma.playerMatchStat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerMatchStatCreateManyArgs>(args?: SelectSubset<T, PlayerMatchStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerMatchStats and returns the data saved in the database.
     * @param {PlayerMatchStatCreateManyAndReturnArgs} args - Arguments to create many PlayerMatchStats.
     * @example
     * // Create many PlayerMatchStats
     * const playerMatchStat = await prisma.playerMatchStat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerMatchStats and only return the `id`
     * const playerMatchStatWithIdOnly = await prisma.playerMatchStat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerMatchStatCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerMatchStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerMatchStat.
     * @param {PlayerMatchStatDeleteArgs} args - Arguments to delete one PlayerMatchStat.
     * @example
     * // Delete one PlayerMatchStat
     * const PlayerMatchStat = await prisma.playerMatchStat.delete({
     *   where: {
     *     // ... filter to delete one PlayerMatchStat
     *   }
     * })
     * 
     */
    delete<T extends PlayerMatchStatDeleteArgs>(args: SelectSubset<T, PlayerMatchStatDeleteArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerMatchStat.
     * @param {PlayerMatchStatUpdateArgs} args - Arguments to update one PlayerMatchStat.
     * @example
     * // Update one PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerMatchStatUpdateArgs>(args: SelectSubset<T, PlayerMatchStatUpdateArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerMatchStats.
     * @param {PlayerMatchStatDeleteManyArgs} args - Arguments to filter PlayerMatchStats to delete.
     * @example
     * // Delete a few PlayerMatchStats
     * const { count } = await prisma.playerMatchStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerMatchStatDeleteManyArgs>(args?: SelectSubset<T, PlayerMatchStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerMatchStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerMatchStats
     * const playerMatchStat = await prisma.playerMatchStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerMatchStatUpdateManyArgs>(args: SelectSubset<T, PlayerMatchStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerMatchStats and returns the data updated in the database.
     * @param {PlayerMatchStatUpdateManyAndReturnArgs} args - Arguments to update many PlayerMatchStats.
     * @example
     * // Update many PlayerMatchStats
     * const playerMatchStat = await prisma.playerMatchStat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerMatchStats and only return the `id`
     * const playerMatchStatWithIdOnly = await prisma.playerMatchStat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerMatchStatUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerMatchStatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerMatchStat.
     * @param {PlayerMatchStatUpsertArgs} args - Arguments to update or create a PlayerMatchStat.
     * @example
     * // Update or create a PlayerMatchStat
     * const playerMatchStat = await prisma.playerMatchStat.upsert({
     *   create: {
     *     // ... data to create a PlayerMatchStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerMatchStat we want to update
     *   }
     * })
     */
    upsert<T extends PlayerMatchStatUpsertArgs>(args: SelectSubset<T, PlayerMatchStatUpsertArgs<ExtArgs>>): Prisma__PlayerMatchStatClient<$Result.GetResult<Prisma.$PlayerMatchStatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerMatchStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatCountArgs} args - Arguments to filter PlayerMatchStats to count.
     * @example
     * // Count the number of PlayerMatchStats
     * const count = await prisma.playerMatchStat.count({
     *   where: {
     *     // ... the filter for the PlayerMatchStats we want to count
     *   }
     * })
    **/
    count<T extends PlayerMatchStatCountArgs>(
      args?: Subset<T, PlayerMatchStatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerMatchStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerMatchStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerMatchStatAggregateArgs>(args: Subset<T, PlayerMatchStatAggregateArgs>): Prisma.PrismaPromise<GetPlayerMatchStatAggregateType<T>>

    /**
     * Group by PlayerMatchStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerMatchStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerMatchStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerMatchStatGroupByArgs['orderBy'] }
        : { orderBy?: PlayerMatchStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerMatchStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerMatchStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerMatchStat model
   */
  readonly fields: PlayerMatchStatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerMatchStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerMatchStatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerMatchStat model
   */
  interface PlayerMatchStatFieldRefs {
    readonly id: FieldRef<"PlayerMatchStat", 'String'>
    readonly matchId: FieldRef<"PlayerMatchStat", 'String'>
    readonly playerId: FieldRef<"PlayerMatchStat", 'String'>
    readonly isStarter: FieldRef<"PlayerMatchStat", 'Boolean'>
    readonly minutesPlayed: FieldRef<"PlayerMatchStat", 'Int'>
    readonly goals: FieldRef<"PlayerMatchStat", 'Int'>
    readonly assists: FieldRef<"PlayerMatchStat", 'Int'>
    readonly yellowCards: FieldRef<"PlayerMatchStat", 'Int'>
    readonly redCards: FieldRef<"PlayerMatchStat", 'Int'>
    readonly createdAt: FieldRef<"PlayerMatchStat", 'DateTime'>
    readonly updatedAt: FieldRef<"PlayerMatchStat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerMatchStat findUnique
   */
  export type PlayerMatchStatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerMatchStat to fetch.
     */
    where: PlayerMatchStatWhereUniqueInput
  }

  /**
   * PlayerMatchStat findUniqueOrThrow
   */
  export type PlayerMatchStatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerMatchStat to fetch.
     */
    where: PlayerMatchStatWhereUniqueInput
  }

  /**
   * PlayerMatchStat findFirst
   */
  export type PlayerMatchStatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerMatchStat to fetch.
     */
    where?: PlayerMatchStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerMatchStats to fetch.
     */
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerMatchStats.
     */
    cursor?: PlayerMatchStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerMatchStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerMatchStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerMatchStats.
     */
    distinct?: PlayerMatchStatScalarFieldEnum | PlayerMatchStatScalarFieldEnum[]
  }

  /**
   * PlayerMatchStat findFirstOrThrow
   */
  export type PlayerMatchStatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerMatchStat to fetch.
     */
    where?: PlayerMatchStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerMatchStats to fetch.
     */
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerMatchStats.
     */
    cursor?: PlayerMatchStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerMatchStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerMatchStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerMatchStats.
     */
    distinct?: PlayerMatchStatScalarFieldEnum | PlayerMatchStatScalarFieldEnum[]
  }

  /**
   * PlayerMatchStat findMany
   */
  export type PlayerMatchStatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter, which PlayerMatchStats to fetch.
     */
    where?: PlayerMatchStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerMatchStats to fetch.
     */
    orderBy?: PlayerMatchStatOrderByWithRelationInput | PlayerMatchStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerMatchStats.
     */
    cursor?: PlayerMatchStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerMatchStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerMatchStats.
     */
    skip?: number
    distinct?: PlayerMatchStatScalarFieldEnum | PlayerMatchStatScalarFieldEnum[]
  }

  /**
   * PlayerMatchStat create
   */
  export type PlayerMatchStatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerMatchStat.
     */
    data: XOR<PlayerMatchStatCreateInput, PlayerMatchStatUncheckedCreateInput>
  }

  /**
   * PlayerMatchStat createMany
   */
  export type PlayerMatchStatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerMatchStats.
     */
    data: PlayerMatchStatCreateManyInput | PlayerMatchStatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerMatchStat createManyAndReturn
   */
  export type PlayerMatchStatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerMatchStats.
     */
    data: PlayerMatchStatCreateManyInput | PlayerMatchStatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerMatchStat update
   */
  export type PlayerMatchStatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerMatchStat.
     */
    data: XOR<PlayerMatchStatUpdateInput, PlayerMatchStatUncheckedUpdateInput>
    /**
     * Choose, which PlayerMatchStat to update.
     */
    where: PlayerMatchStatWhereUniqueInput
  }

  /**
   * PlayerMatchStat updateMany
   */
  export type PlayerMatchStatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerMatchStats.
     */
    data: XOR<PlayerMatchStatUpdateManyMutationInput, PlayerMatchStatUncheckedUpdateManyInput>
    /**
     * Filter which PlayerMatchStats to update
     */
    where?: PlayerMatchStatWhereInput
    /**
     * Limit how many PlayerMatchStats to update.
     */
    limit?: number
  }

  /**
   * PlayerMatchStat updateManyAndReturn
   */
  export type PlayerMatchStatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * The data used to update PlayerMatchStats.
     */
    data: XOR<PlayerMatchStatUpdateManyMutationInput, PlayerMatchStatUncheckedUpdateManyInput>
    /**
     * Filter which PlayerMatchStats to update
     */
    where?: PlayerMatchStatWhereInput
    /**
     * Limit how many PlayerMatchStats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerMatchStat upsert
   */
  export type PlayerMatchStatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerMatchStat to update in case it exists.
     */
    where: PlayerMatchStatWhereUniqueInput
    /**
     * In case the PlayerMatchStat found by the `where` argument doesn't exist, create a new PlayerMatchStat with this data.
     */
    create: XOR<PlayerMatchStatCreateInput, PlayerMatchStatUncheckedCreateInput>
    /**
     * In case the PlayerMatchStat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerMatchStatUpdateInput, PlayerMatchStatUncheckedUpdateInput>
  }

  /**
   * PlayerMatchStat delete
   */
  export type PlayerMatchStatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
    /**
     * Filter which PlayerMatchStat to delete.
     */
    where: PlayerMatchStatWhereUniqueInput
  }

  /**
   * PlayerMatchStat deleteMany
   */
  export type PlayerMatchStatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerMatchStats to delete
     */
    where?: PlayerMatchStatWhereInput
    /**
     * Limit how many PlayerMatchStats to delete.
     */
    limit?: number
  }

  /**
   * PlayerMatchStat without action
   */
  export type PlayerMatchStatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerMatchStat
     */
    select?: PlayerMatchStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerMatchStat
     */
    omit?: PlayerMatchStatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerMatchStatInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    teamId: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleMinAggregateInputType = {
    id?: true
    teamId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    teamId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    teamId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: string
    teamId: string
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | Schedule$eventsArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    teamId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "date" | "createdAt" | "updatedAt", ExtArgs["result"]["schedule"]>
  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Schedule$eventsArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      events: Prisma.$ScheduleEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules and returns the data updated in the database.
     * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Schedule$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'String'>
    readonly teamId: FieldRef<"Schedule", 'String'>
    readonly date: FieldRef<"Schedule", 'DateTime'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
  }

  /**
   * Schedule updateManyAndReturn
   */
  export type ScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to delete.
     */
    limit?: number
  }

  /**
   * Schedule.events
   */
  export type Schedule$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    where?: ScheduleEventWhereInput
    orderBy?: ScheduleEventOrderByWithRelationInput | ScheduleEventOrderByWithRelationInput[]
    cursor?: ScheduleEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleEventScalarFieldEnum | ScheduleEventScalarFieldEnum[]
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model ScheduleEvent
   */

  export type AggregateScheduleEvent = {
    _count: ScheduleEventCountAggregateOutputType | null
    _min: ScheduleEventMinAggregateOutputType | null
    _max: ScheduleEventMaxAggregateOutputType | null
  }

  export type ScheduleEventMinAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    type: string | null
    time: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleEventMaxAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    type: string | null
    time: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleEventCountAggregateOutputType = {
    id: number
    scheduleId: number
    type: number
    time: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleEventMinAggregateInputType = {
    id?: true
    scheduleId?: true
    type?: true
    time?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleEventMaxAggregateInputType = {
    id?: true
    scheduleId?: true
    type?: true
    time?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleEventCountAggregateInputType = {
    id?: true
    scheduleId?: true
    type?: true
    time?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleEvent to aggregate.
     */
    where?: ScheduleEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleEvents to fetch.
     */
    orderBy?: ScheduleEventOrderByWithRelationInput | ScheduleEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleEvents
    **/
    _count?: true | ScheduleEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleEventMaxAggregateInputType
  }

  export type GetScheduleEventAggregateType<T extends ScheduleEventAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleEvent[P]>
      : GetScalarType<T[P], AggregateScheduleEvent[P]>
  }




  export type ScheduleEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleEventWhereInput
    orderBy?: ScheduleEventOrderByWithAggregationInput | ScheduleEventOrderByWithAggregationInput[]
    by: ScheduleEventScalarFieldEnum[] | ScheduleEventScalarFieldEnum
    having?: ScheduleEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleEventCountAggregateInputType | true
    _min?: ScheduleEventMinAggregateInputType
    _max?: ScheduleEventMaxAggregateInputType
  }

  export type ScheduleEventGroupByOutputType = {
    id: string
    scheduleId: string
    type: string
    time: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: ScheduleEventCountAggregateOutputType | null
    _min: ScheduleEventMinAggregateOutputType | null
    _max: ScheduleEventMaxAggregateOutputType | null
  }

  type GetScheduleEventGroupByPayload<T extends ScheduleEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleEventGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleEventGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    type?: boolean
    time?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleEvent"]>

  export type ScheduleEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    type?: boolean
    time?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleEvent"]>

  export type ScheduleEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    type?: boolean
    time?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleEvent"]>

  export type ScheduleEventSelectScalar = {
    id?: boolean
    scheduleId?: boolean
    type?: boolean
    time?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scheduleId" | "type" | "time" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["scheduleEvent"]>
  export type ScheduleEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }
  export type ScheduleEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }
  export type ScheduleEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
  }

  export type $ScheduleEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleEvent"
    objects: {
      schedule: Prisma.$SchedulePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scheduleId: string
      type: string
      time: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduleEvent"]>
    composites: {}
  }

  type ScheduleEventGetPayload<S extends boolean | null | undefined | ScheduleEventDefaultArgs> = $Result.GetResult<Prisma.$ScheduleEventPayload, S>

  type ScheduleEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleEventCountAggregateInputType | true
    }

  export interface ScheduleEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleEvent'], meta: { name: 'ScheduleEvent' } }
    /**
     * Find zero or one ScheduleEvent that matches the filter.
     * @param {ScheduleEventFindUniqueArgs} args - Arguments to find a ScheduleEvent
     * @example
     * // Get one ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleEventFindUniqueArgs>(args: SelectSubset<T, ScheduleEventFindUniqueArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScheduleEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleEventFindUniqueOrThrowArgs} args - Arguments to find a ScheduleEvent
     * @example
     * // Get one ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleEventFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduleEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventFindFirstArgs} args - Arguments to find a ScheduleEvent
     * @example
     * // Get one ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleEventFindFirstArgs>(args?: SelectSubset<T, ScheduleEventFindFirstArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduleEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventFindFirstOrThrowArgs} args - Arguments to find a ScheduleEvent
     * @example
     * // Get one ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleEventFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScheduleEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleEvents
     * const scheduleEvents = await prisma.scheduleEvent.findMany()
     * 
     * // Get first 10 ScheduleEvents
     * const scheduleEvents = await prisma.scheduleEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleEventWithIdOnly = await prisma.scheduleEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleEventFindManyArgs>(args?: SelectSubset<T, ScheduleEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScheduleEvent.
     * @param {ScheduleEventCreateArgs} args - Arguments to create a ScheduleEvent.
     * @example
     * // Create one ScheduleEvent
     * const ScheduleEvent = await prisma.scheduleEvent.create({
     *   data: {
     *     // ... data to create a ScheduleEvent
     *   }
     * })
     * 
     */
    create<T extends ScheduleEventCreateArgs>(args: SelectSubset<T, ScheduleEventCreateArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScheduleEvents.
     * @param {ScheduleEventCreateManyArgs} args - Arguments to create many ScheduleEvents.
     * @example
     * // Create many ScheduleEvents
     * const scheduleEvent = await prisma.scheduleEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleEventCreateManyArgs>(args?: SelectSubset<T, ScheduleEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduleEvents and returns the data saved in the database.
     * @param {ScheduleEventCreateManyAndReturnArgs} args - Arguments to create many ScheduleEvents.
     * @example
     * // Create many ScheduleEvents
     * const scheduleEvent = await prisma.scheduleEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduleEvents and only return the `id`
     * const scheduleEventWithIdOnly = await prisma.scheduleEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleEventCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScheduleEvent.
     * @param {ScheduleEventDeleteArgs} args - Arguments to delete one ScheduleEvent.
     * @example
     * // Delete one ScheduleEvent
     * const ScheduleEvent = await prisma.scheduleEvent.delete({
     *   where: {
     *     // ... filter to delete one ScheduleEvent
     *   }
     * })
     * 
     */
    delete<T extends ScheduleEventDeleteArgs>(args: SelectSubset<T, ScheduleEventDeleteArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScheduleEvent.
     * @param {ScheduleEventUpdateArgs} args - Arguments to update one ScheduleEvent.
     * @example
     * // Update one ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleEventUpdateArgs>(args: SelectSubset<T, ScheduleEventUpdateArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScheduleEvents.
     * @param {ScheduleEventDeleteManyArgs} args - Arguments to filter ScheduleEvents to delete.
     * @example
     * // Delete a few ScheduleEvents
     * const { count } = await prisma.scheduleEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleEventDeleteManyArgs>(args?: SelectSubset<T, ScheduleEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleEvents
     * const scheduleEvent = await prisma.scheduleEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleEventUpdateManyArgs>(args: SelectSubset<T, ScheduleEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleEvents and returns the data updated in the database.
     * @param {ScheduleEventUpdateManyAndReturnArgs} args - Arguments to update many ScheduleEvents.
     * @example
     * // Update many ScheduleEvents
     * const scheduleEvent = await prisma.scheduleEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScheduleEvents and only return the `id`
     * const scheduleEventWithIdOnly = await prisma.scheduleEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleEventUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScheduleEvent.
     * @param {ScheduleEventUpsertArgs} args - Arguments to update or create a ScheduleEvent.
     * @example
     * // Update or create a ScheduleEvent
     * const scheduleEvent = await prisma.scheduleEvent.upsert({
     *   create: {
     *     // ... data to create a ScheduleEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleEvent we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleEventUpsertArgs>(args: SelectSubset<T, ScheduleEventUpsertArgs<ExtArgs>>): Prisma__ScheduleEventClient<$Result.GetResult<Prisma.$ScheduleEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScheduleEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventCountArgs} args - Arguments to filter ScheduleEvents to count.
     * @example
     * // Count the number of ScheduleEvents
     * const count = await prisma.scheduleEvent.count({
     *   where: {
     *     // ... the filter for the ScheduleEvents we want to count
     *   }
     * })
    **/
    count<T extends ScheduleEventCountArgs>(
      args?: Subset<T, ScheduleEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleEventAggregateArgs>(args: Subset<T, ScheduleEventAggregateArgs>): Prisma.PrismaPromise<GetScheduleEventAggregateType<T>>

    /**
     * Group by ScheduleEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleEventGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleEvent model
   */
  readonly fields: ScheduleEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends ScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDefaultArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleEvent model
   */
  interface ScheduleEventFieldRefs {
    readonly id: FieldRef<"ScheduleEvent", 'String'>
    readonly scheduleId: FieldRef<"ScheduleEvent", 'String'>
    readonly type: FieldRef<"ScheduleEvent", 'String'>
    readonly time: FieldRef<"ScheduleEvent", 'String'>
    readonly description: FieldRef<"ScheduleEvent", 'String'>
    readonly createdAt: FieldRef<"ScheduleEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduleEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleEvent findUnique
   */
  export type ScheduleEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleEvent to fetch.
     */
    where: ScheduleEventWhereUniqueInput
  }

  /**
   * ScheduleEvent findUniqueOrThrow
   */
  export type ScheduleEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleEvent to fetch.
     */
    where: ScheduleEventWhereUniqueInput
  }

  /**
   * ScheduleEvent findFirst
   */
  export type ScheduleEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleEvent to fetch.
     */
    where?: ScheduleEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleEvents to fetch.
     */
    orderBy?: ScheduleEventOrderByWithRelationInput | ScheduleEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleEvents.
     */
    cursor?: ScheduleEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleEvents.
     */
    distinct?: ScheduleEventScalarFieldEnum | ScheduleEventScalarFieldEnum[]
  }

  /**
   * ScheduleEvent findFirstOrThrow
   */
  export type ScheduleEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleEvent to fetch.
     */
    where?: ScheduleEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleEvents to fetch.
     */
    orderBy?: ScheduleEventOrderByWithRelationInput | ScheduleEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleEvents.
     */
    cursor?: ScheduleEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleEvents.
     */
    distinct?: ScheduleEventScalarFieldEnum | ScheduleEventScalarFieldEnum[]
  }

  /**
   * ScheduleEvent findMany
   */
  export type ScheduleEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleEvents to fetch.
     */
    where?: ScheduleEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleEvents to fetch.
     */
    orderBy?: ScheduleEventOrderByWithRelationInput | ScheduleEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleEvents.
     */
    cursor?: ScheduleEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleEvents.
     */
    skip?: number
    distinct?: ScheduleEventScalarFieldEnum | ScheduleEventScalarFieldEnum[]
  }

  /**
   * ScheduleEvent create
   */
  export type ScheduleEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleEvent.
     */
    data: XOR<ScheduleEventCreateInput, ScheduleEventUncheckedCreateInput>
  }

  /**
   * ScheduleEvent createMany
   */
  export type ScheduleEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleEvents.
     */
    data: ScheduleEventCreateManyInput | ScheduleEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleEvent createManyAndReturn
   */
  export type ScheduleEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * The data used to create many ScheduleEvents.
     */
    data: ScheduleEventCreateManyInput | ScheduleEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduleEvent update
   */
  export type ScheduleEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleEvent.
     */
    data: XOR<ScheduleEventUpdateInput, ScheduleEventUncheckedUpdateInput>
    /**
     * Choose, which ScheduleEvent to update.
     */
    where: ScheduleEventWhereUniqueInput
  }

  /**
   * ScheduleEvent updateMany
   */
  export type ScheduleEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleEvents.
     */
    data: XOR<ScheduleEventUpdateManyMutationInput, ScheduleEventUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleEvents to update
     */
    where?: ScheduleEventWhereInput
    /**
     * Limit how many ScheduleEvents to update.
     */
    limit?: number
  }

  /**
   * ScheduleEvent updateManyAndReturn
   */
  export type ScheduleEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * The data used to update ScheduleEvents.
     */
    data: XOR<ScheduleEventUpdateManyMutationInput, ScheduleEventUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleEvents to update
     */
    where?: ScheduleEventWhereInput
    /**
     * Limit how many ScheduleEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduleEvent upsert
   */
  export type ScheduleEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleEvent to update in case it exists.
     */
    where: ScheduleEventWhereUniqueInput
    /**
     * In case the ScheduleEvent found by the `where` argument doesn't exist, create a new ScheduleEvent with this data.
     */
    create: XOR<ScheduleEventCreateInput, ScheduleEventUncheckedCreateInput>
    /**
     * In case the ScheduleEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleEventUpdateInput, ScheduleEventUncheckedUpdateInput>
  }

  /**
   * ScheduleEvent delete
   */
  export type ScheduleEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
    /**
     * Filter which ScheduleEvent to delete.
     */
    where: ScheduleEventWhereUniqueInput
  }

  /**
   * ScheduleEvent deleteMany
   */
  export type ScheduleEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleEvents to delete
     */
    where?: ScheduleEventWhereInput
    /**
     * Limit how many ScheduleEvents to delete.
     */
    limit?: number
  }

  /**
   * ScheduleEvent without action
   */
  export type ScheduleEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleEvent
     */
    select?: ScheduleEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleEvent
     */
    omit?: ScheduleEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleEventInclude<ExtArgs> | null
  }


  /**
   * Model MorningSurveyResponse
   */

  export type AggregateMorningSurveyResponse = {
    _count: MorningSurveyResponseCountAggregateOutputType | null
    _avg: MorningSurveyResponseAvgAggregateOutputType | null
    _sum: MorningSurveyResponseSumAggregateOutputType | null
    _min: MorningSurveyResponseMinAggregateOutputType | null
    _max: MorningSurveyResponseMaxAggregateOutputType | null
  }

  export type MorningSurveyResponseAvgAggregateOutputType = {
    sleepDuration: number | null
    sleepQuality: number | null
    recovery: number | null
    mood: number | null
    muscleCondition: number | null
  }

  export type MorningSurveyResponseSumAggregateOutputType = {
    sleepDuration: number | null
    sleepQuality: number | null
    recovery: number | null
    mood: number | null
    muscleCondition: number | null
  }

  export type MorningSurveyResponseMinAggregateOutputType = {
    id: string | null
    playerId: string | null
    createdAt: Date | null
    readAt: Date | null
    completedAt: Date | null
    sleepDuration: number | null
    sleepQuality: number | null
    recovery: number | null
    mood: number | null
    muscleCondition: number | null
    surveyId: string | null
    tenantId: string | null
  }

  export type MorningSurveyResponseMaxAggregateOutputType = {
    id: string | null
    playerId: string | null
    createdAt: Date | null
    readAt: Date | null
    completedAt: Date | null
    sleepDuration: number | null
    sleepQuality: number | null
    recovery: number | null
    mood: number | null
    muscleCondition: number | null
    surveyId: string | null
    tenantId: string | null
  }

  export type MorningSurveyResponseCountAggregateOutputType = {
    id: number
    playerId: number
    createdAt: number
    readAt: number
    completedAt: number
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: number
    tenantId: number
    _all: number
  }


  export type MorningSurveyResponseAvgAggregateInputType = {
    sleepDuration?: true
    sleepQuality?: true
    recovery?: true
    mood?: true
    muscleCondition?: true
  }

  export type MorningSurveyResponseSumAggregateInputType = {
    sleepDuration?: true
    sleepQuality?: true
    recovery?: true
    mood?: true
    muscleCondition?: true
  }

  export type MorningSurveyResponseMinAggregateInputType = {
    id?: true
    playerId?: true
    createdAt?: true
    readAt?: true
    completedAt?: true
    sleepDuration?: true
    sleepQuality?: true
    recovery?: true
    mood?: true
    muscleCondition?: true
    surveyId?: true
    tenantId?: true
  }

  export type MorningSurveyResponseMaxAggregateInputType = {
    id?: true
    playerId?: true
    createdAt?: true
    readAt?: true
    completedAt?: true
    sleepDuration?: true
    sleepQuality?: true
    recovery?: true
    mood?: true
    muscleCondition?: true
    surveyId?: true
    tenantId?: true
  }

  export type MorningSurveyResponseCountAggregateInputType = {
    id?: true
    playerId?: true
    createdAt?: true
    readAt?: true
    completedAt?: true
    sleepDuration?: true
    sleepQuality?: true
    recovery?: true
    mood?: true
    muscleCondition?: true
    surveyId?: true
    tenantId?: true
    _all?: true
  }

  export type MorningSurveyResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MorningSurveyResponse to aggregate.
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MorningSurveyResponses to fetch.
     */
    orderBy?: MorningSurveyResponseOrderByWithRelationInput | MorningSurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MorningSurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MorningSurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MorningSurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MorningSurveyResponses
    **/
    _count?: true | MorningSurveyResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MorningSurveyResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MorningSurveyResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MorningSurveyResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MorningSurveyResponseMaxAggregateInputType
  }

  export type GetMorningSurveyResponseAggregateType<T extends MorningSurveyResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateMorningSurveyResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMorningSurveyResponse[P]>
      : GetScalarType<T[P], AggregateMorningSurveyResponse[P]>
  }




  export type MorningSurveyResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MorningSurveyResponseWhereInput
    orderBy?: MorningSurveyResponseOrderByWithAggregationInput | MorningSurveyResponseOrderByWithAggregationInput[]
    by: MorningSurveyResponseScalarFieldEnum[] | MorningSurveyResponseScalarFieldEnum
    having?: MorningSurveyResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MorningSurveyResponseCountAggregateInputType | true
    _avg?: MorningSurveyResponseAvgAggregateInputType
    _sum?: MorningSurveyResponseSumAggregateInputType
    _min?: MorningSurveyResponseMinAggregateInputType
    _max?: MorningSurveyResponseMaxAggregateInputType
  }

  export type MorningSurveyResponseGroupByOutputType = {
    id: string
    playerId: string
    createdAt: Date
    readAt: Date | null
    completedAt: Date | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    _count: MorningSurveyResponseCountAggregateOutputType | null
    _avg: MorningSurveyResponseAvgAggregateOutputType | null
    _sum: MorningSurveyResponseSumAggregateOutputType | null
    _min: MorningSurveyResponseMinAggregateOutputType | null
    _max: MorningSurveyResponseMaxAggregateOutputType | null
  }

  type GetMorningSurveyResponseGroupByPayload<T extends MorningSurveyResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MorningSurveyResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MorningSurveyResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MorningSurveyResponseGroupByOutputType[P]>
            : GetScalarType<T[P], MorningSurveyResponseGroupByOutputType[P]>
        }
      >
    >


  export type MorningSurveyResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    createdAt?: boolean
    readAt?: boolean
    completedAt?: boolean
    sleepDuration?: boolean
    sleepQuality?: boolean
    recovery?: boolean
    mood?: boolean
    muscleCondition?: boolean
    surveyId?: boolean
    tenantId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    painAreas?: boolean | MorningSurveyResponse$painAreasArgs<ExtArgs>
    _count?: boolean | MorningSurveyResponseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["morningSurveyResponse"]>

  export type MorningSurveyResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    createdAt?: boolean
    readAt?: boolean
    completedAt?: boolean
    sleepDuration?: boolean
    sleepQuality?: boolean
    recovery?: boolean
    mood?: boolean
    muscleCondition?: boolean
    surveyId?: boolean
    tenantId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["morningSurveyResponse"]>

  export type MorningSurveyResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    createdAt?: boolean
    readAt?: boolean
    completedAt?: boolean
    sleepDuration?: boolean
    sleepQuality?: boolean
    recovery?: boolean
    mood?: boolean
    muscleCondition?: boolean
    surveyId?: boolean
    tenantId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["morningSurveyResponse"]>

  export type MorningSurveyResponseSelectScalar = {
    id?: boolean
    playerId?: boolean
    createdAt?: boolean
    readAt?: boolean
    completedAt?: boolean
    sleepDuration?: boolean
    sleepQuality?: boolean
    recovery?: boolean
    mood?: boolean
    muscleCondition?: boolean
    surveyId?: boolean
    tenantId?: boolean
  }

  export type MorningSurveyResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "playerId" | "createdAt" | "readAt" | "completedAt" | "sleepDuration" | "sleepQuality" | "recovery" | "mood" | "muscleCondition" | "surveyId" | "tenantId", ExtArgs["result"]["morningSurveyResponse"]>
  export type MorningSurveyResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    painAreas?: boolean | MorningSurveyResponse$painAreasArgs<ExtArgs>
    _count?: boolean | MorningSurveyResponseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MorningSurveyResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type MorningSurveyResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $MorningSurveyResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MorningSurveyResponse"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      painAreas: Prisma.$PainAreaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playerId: string
      createdAt: Date
      readAt: Date | null
      completedAt: Date | null
      sleepDuration: number
      sleepQuality: number
      recovery: number
      mood: number
      muscleCondition: number
      surveyId: string
      tenantId: string
    }, ExtArgs["result"]["morningSurveyResponse"]>
    composites: {}
  }

  type MorningSurveyResponseGetPayload<S extends boolean | null | undefined | MorningSurveyResponseDefaultArgs> = $Result.GetResult<Prisma.$MorningSurveyResponsePayload, S>

  type MorningSurveyResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MorningSurveyResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MorningSurveyResponseCountAggregateInputType | true
    }

  export interface MorningSurveyResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MorningSurveyResponse'], meta: { name: 'MorningSurveyResponse' } }
    /**
     * Find zero or one MorningSurveyResponse that matches the filter.
     * @param {MorningSurveyResponseFindUniqueArgs} args - Arguments to find a MorningSurveyResponse
     * @example
     * // Get one MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MorningSurveyResponseFindUniqueArgs>(args: SelectSubset<T, MorningSurveyResponseFindUniqueArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MorningSurveyResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MorningSurveyResponseFindUniqueOrThrowArgs} args - Arguments to find a MorningSurveyResponse
     * @example
     * // Get one MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MorningSurveyResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, MorningSurveyResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MorningSurveyResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseFindFirstArgs} args - Arguments to find a MorningSurveyResponse
     * @example
     * // Get one MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MorningSurveyResponseFindFirstArgs>(args?: SelectSubset<T, MorningSurveyResponseFindFirstArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MorningSurveyResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseFindFirstOrThrowArgs} args - Arguments to find a MorningSurveyResponse
     * @example
     * // Get one MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MorningSurveyResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, MorningSurveyResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MorningSurveyResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MorningSurveyResponses
     * const morningSurveyResponses = await prisma.morningSurveyResponse.findMany()
     * 
     * // Get first 10 MorningSurveyResponses
     * const morningSurveyResponses = await prisma.morningSurveyResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const morningSurveyResponseWithIdOnly = await prisma.morningSurveyResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MorningSurveyResponseFindManyArgs>(args?: SelectSubset<T, MorningSurveyResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MorningSurveyResponse.
     * @param {MorningSurveyResponseCreateArgs} args - Arguments to create a MorningSurveyResponse.
     * @example
     * // Create one MorningSurveyResponse
     * const MorningSurveyResponse = await prisma.morningSurveyResponse.create({
     *   data: {
     *     // ... data to create a MorningSurveyResponse
     *   }
     * })
     * 
     */
    create<T extends MorningSurveyResponseCreateArgs>(args: SelectSubset<T, MorningSurveyResponseCreateArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MorningSurveyResponses.
     * @param {MorningSurveyResponseCreateManyArgs} args - Arguments to create many MorningSurveyResponses.
     * @example
     * // Create many MorningSurveyResponses
     * const morningSurveyResponse = await prisma.morningSurveyResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MorningSurveyResponseCreateManyArgs>(args?: SelectSubset<T, MorningSurveyResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MorningSurveyResponses and returns the data saved in the database.
     * @param {MorningSurveyResponseCreateManyAndReturnArgs} args - Arguments to create many MorningSurveyResponses.
     * @example
     * // Create many MorningSurveyResponses
     * const morningSurveyResponse = await prisma.morningSurveyResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MorningSurveyResponses and only return the `id`
     * const morningSurveyResponseWithIdOnly = await prisma.morningSurveyResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MorningSurveyResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, MorningSurveyResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MorningSurveyResponse.
     * @param {MorningSurveyResponseDeleteArgs} args - Arguments to delete one MorningSurveyResponse.
     * @example
     * // Delete one MorningSurveyResponse
     * const MorningSurveyResponse = await prisma.morningSurveyResponse.delete({
     *   where: {
     *     // ... filter to delete one MorningSurveyResponse
     *   }
     * })
     * 
     */
    delete<T extends MorningSurveyResponseDeleteArgs>(args: SelectSubset<T, MorningSurveyResponseDeleteArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MorningSurveyResponse.
     * @param {MorningSurveyResponseUpdateArgs} args - Arguments to update one MorningSurveyResponse.
     * @example
     * // Update one MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MorningSurveyResponseUpdateArgs>(args: SelectSubset<T, MorningSurveyResponseUpdateArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MorningSurveyResponses.
     * @param {MorningSurveyResponseDeleteManyArgs} args - Arguments to filter MorningSurveyResponses to delete.
     * @example
     * // Delete a few MorningSurveyResponses
     * const { count } = await prisma.morningSurveyResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MorningSurveyResponseDeleteManyArgs>(args?: SelectSubset<T, MorningSurveyResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MorningSurveyResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MorningSurveyResponses
     * const morningSurveyResponse = await prisma.morningSurveyResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MorningSurveyResponseUpdateManyArgs>(args: SelectSubset<T, MorningSurveyResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MorningSurveyResponses and returns the data updated in the database.
     * @param {MorningSurveyResponseUpdateManyAndReturnArgs} args - Arguments to update many MorningSurveyResponses.
     * @example
     * // Update many MorningSurveyResponses
     * const morningSurveyResponse = await prisma.morningSurveyResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MorningSurveyResponses and only return the `id`
     * const morningSurveyResponseWithIdOnly = await prisma.morningSurveyResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MorningSurveyResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, MorningSurveyResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MorningSurveyResponse.
     * @param {MorningSurveyResponseUpsertArgs} args - Arguments to update or create a MorningSurveyResponse.
     * @example
     * // Update or create a MorningSurveyResponse
     * const morningSurveyResponse = await prisma.morningSurveyResponse.upsert({
     *   create: {
     *     // ... data to create a MorningSurveyResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MorningSurveyResponse we want to update
     *   }
     * })
     */
    upsert<T extends MorningSurveyResponseUpsertArgs>(args: SelectSubset<T, MorningSurveyResponseUpsertArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MorningSurveyResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseCountArgs} args - Arguments to filter MorningSurveyResponses to count.
     * @example
     * // Count the number of MorningSurveyResponses
     * const count = await prisma.morningSurveyResponse.count({
     *   where: {
     *     // ... the filter for the MorningSurveyResponses we want to count
     *   }
     * })
    **/
    count<T extends MorningSurveyResponseCountArgs>(
      args?: Subset<T, MorningSurveyResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MorningSurveyResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MorningSurveyResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MorningSurveyResponseAggregateArgs>(args: Subset<T, MorningSurveyResponseAggregateArgs>): Prisma.PrismaPromise<GetMorningSurveyResponseAggregateType<T>>

    /**
     * Group by MorningSurveyResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MorningSurveyResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MorningSurveyResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MorningSurveyResponseGroupByArgs['orderBy'] }
        : { orderBy?: MorningSurveyResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MorningSurveyResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMorningSurveyResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MorningSurveyResponse model
   */
  readonly fields: MorningSurveyResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MorningSurveyResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MorningSurveyResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    painAreas<T extends MorningSurveyResponse$painAreasArgs<ExtArgs> = {}>(args?: Subset<T, MorningSurveyResponse$painAreasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MorningSurveyResponse model
   */
  interface MorningSurveyResponseFieldRefs {
    readonly id: FieldRef<"MorningSurveyResponse", 'String'>
    readonly playerId: FieldRef<"MorningSurveyResponse", 'String'>
    readonly createdAt: FieldRef<"MorningSurveyResponse", 'DateTime'>
    readonly readAt: FieldRef<"MorningSurveyResponse", 'DateTime'>
    readonly completedAt: FieldRef<"MorningSurveyResponse", 'DateTime'>
    readonly sleepDuration: FieldRef<"MorningSurveyResponse", 'Float'>
    readonly sleepQuality: FieldRef<"MorningSurveyResponse", 'Int'>
    readonly recovery: FieldRef<"MorningSurveyResponse", 'Int'>
    readonly mood: FieldRef<"MorningSurveyResponse", 'Int'>
    readonly muscleCondition: FieldRef<"MorningSurveyResponse", 'Int'>
    readonly surveyId: FieldRef<"MorningSurveyResponse", 'String'>
    readonly tenantId: FieldRef<"MorningSurveyResponse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MorningSurveyResponse findUnique
   */
  export type MorningSurveyResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which MorningSurveyResponse to fetch.
     */
    where: MorningSurveyResponseWhereUniqueInput
  }

  /**
   * MorningSurveyResponse findUniqueOrThrow
   */
  export type MorningSurveyResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which MorningSurveyResponse to fetch.
     */
    where: MorningSurveyResponseWhereUniqueInput
  }

  /**
   * MorningSurveyResponse findFirst
   */
  export type MorningSurveyResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which MorningSurveyResponse to fetch.
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MorningSurveyResponses to fetch.
     */
    orderBy?: MorningSurveyResponseOrderByWithRelationInput | MorningSurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MorningSurveyResponses.
     */
    cursor?: MorningSurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MorningSurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MorningSurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MorningSurveyResponses.
     */
    distinct?: MorningSurveyResponseScalarFieldEnum | MorningSurveyResponseScalarFieldEnum[]
  }

  /**
   * MorningSurveyResponse findFirstOrThrow
   */
  export type MorningSurveyResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which MorningSurveyResponse to fetch.
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MorningSurveyResponses to fetch.
     */
    orderBy?: MorningSurveyResponseOrderByWithRelationInput | MorningSurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MorningSurveyResponses.
     */
    cursor?: MorningSurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MorningSurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MorningSurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MorningSurveyResponses.
     */
    distinct?: MorningSurveyResponseScalarFieldEnum | MorningSurveyResponseScalarFieldEnum[]
  }

  /**
   * MorningSurveyResponse findMany
   */
  export type MorningSurveyResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which MorningSurveyResponses to fetch.
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MorningSurveyResponses to fetch.
     */
    orderBy?: MorningSurveyResponseOrderByWithRelationInput | MorningSurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MorningSurveyResponses.
     */
    cursor?: MorningSurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MorningSurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MorningSurveyResponses.
     */
    skip?: number
    distinct?: MorningSurveyResponseScalarFieldEnum | MorningSurveyResponseScalarFieldEnum[]
  }

  /**
   * MorningSurveyResponse create
   */
  export type MorningSurveyResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a MorningSurveyResponse.
     */
    data: XOR<MorningSurveyResponseCreateInput, MorningSurveyResponseUncheckedCreateInput>
  }

  /**
   * MorningSurveyResponse createMany
   */
  export type MorningSurveyResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MorningSurveyResponses.
     */
    data: MorningSurveyResponseCreateManyInput | MorningSurveyResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MorningSurveyResponse createManyAndReturn
   */
  export type MorningSurveyResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * The data used to create many MorningSurveyResponses.
     */
    data: MorningSurveyResponseCreateManyInput | MorningSurveyResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MorningSurveyResponse update
   */
  export type MorningSurveyResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a MorningSurveyResponse.
     */
    data: XOR<MorningSurveyResponseUpdateInput, MorningSurveyResponseUncheckedUpdateInput>
    /**
     * Choose, which MorningSurveyResponse to update.
     */
    where: MorningSurveyResponseWhereUniqueInput
  }

  /**
   * MorningSurveyResponse updateMany
   */
  export type MorningSurveyResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MorningSurveyResponses.
     */
    data: XOR<MorningSurveyResponseUpdateManyMutationInput, MorningSurveyResponseUncheckedUpdateManyInput>
    /**
     * Filter which MorningSurveyResponses to update
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * Limit how many MorningSurveyResponses to update.
     */
    limit?: number
  }

  /**
   * MorningSurveyResponse updateManyAndReturn
   */
  export type MorningSurveyResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * The data used to update MorningSurveyResponses.
     */
    data: XOR<MorningSurveyResponseUpdateManyMutationInput, MorningSurveyResponseUncheckedUpdateManyInput>
    /**
     * Filter which MorningSurveyResponses to update
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * Limit how many MorningSurveyResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MorningSurveyResponse upsert
   */
  export type MorningSurveyResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the MorningSurveyResponse to update in case it exists.
     */
    where: MorningSurveyResponseWhereUniqueInput
    /**
     * In case the MorningSurveyResponse found by the `where` argument doesn't exist, create a new MorningSurveyResponse with this data.
     */
    create: XOR<MorningSurveyResponseCreateInput, MorningSurveyResponseUncheckedCreateInput>
    /**
     * In case the MorningSurveyResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MorningSurveyResponseUpdateInput, MorningSurveyResponseUncheckedUpdateInput>
  }

  /**
   * MorningSurveyResponse delete
   */
  export type MorningSurveyResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
    /**
     * Filter which MorningSurveyResponse to delete.
     */
    where: MorningSurveyResponseWhereUniqueInput
  }

  /**
   * MorningSurveyResponse deleteMany
   */
  export type MorningSurveyResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MorningSurveyResponses to delete
     */
    where?: MorningSurveyResponseWhereInput
    /**
     * Limit how many MorningSurveyResponses to delete.
     */
    limit?: number
  }

  /**
   * MorningSurveyResponse.painAreas
   */
  export type MorningSurveyResponse$painAreasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    where?: PainAreaWhereInput
    orderBy?: PainAreaOrderByWithRelationInput | PainAreaOrderByWithRelationInput[]
    cursor?: PainAreaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PainAreaScalarFieldEnum | PainAreaScalarFieldEnum[]
  }

  /**
   * MorningSurveyResponse without action
   */
  export type MorningSurveyResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MorningSurveyResponse
     */
    select?: MorningSurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MorningSurveyResponse
     */
    omit?: MorningSurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MorningSurveyResponseInclude<ExtArgs> | null
  }


  /**
   * Model PainArea
   */

  export type AggregatePainArea = {
    _count: PainAreaCountAggregateOutputType | null
    _avg: PainAreaAvgAggregateOutputType | null
    _sum: PainAreaSumAggregateOutputType | null
    _min: PainAreaMinAggregateOutputType | null
    _max: PainAreaMaxAggregateOutputType | null
  }

  export type PainAreaAvgAggregateOutputType = {
    painLevel: number | null
  }

  export type PainAreaSumAggregateOutputType = {
    painLevel: number | null
  }

  export type PainAreaMinAggregateOutputType = {
    id: string | null
    surveyId: string | null
    areaName: string | null
    painLevel: number | null
    createdAt: Date | null
  }

  export type PainAreaMaxAggregateOutputType = {
    id: string | null
    surveyId: string | null
    areaName: string | null
    painLevel: number | null
    createdAt: Date | null
  }

  export type PainAreaCountAggregateOutputType = {
    id: number
    surveyId: number
    areaName: number
    painLevel: number
    createdAt: number
    _all: number
  }


  export type PainAreaAvgAggregateInputType = {
    painLevel?: true
  }

  export type PainAreaSumAggregateInputType = {
    painLevel?: true
  }

  export type PainAreaMinAggregateInputType = {
    id?: true
    surveyId?: true
    areaName?: true
    painLevel?: true
    createdAt?: true
  }

  export type PainAreaMaxAggregateInputType = {
    id?: true
    surveyId?: true
    areaName?: true
    painLevel?: true
    createdAt?: true
  }

  export type PainAreaCountAggregateInputType = {
    id?: true
    surveyId?: true
    areaName?: true
    painLevel?: true
    createdAt?: true
    _all?: true
  }

  export type PainAreaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PainArea to aggregate.
     */
    where?: PainAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PainAreas to fetch.
     */
    orderBy?: PainAreaOrderByWithRelationInput | PainAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PainAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PainAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PainAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PainAreas
    **/
    _count?: true | PainAreaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PainAreaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PainAreaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PainAreaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PainAreaMaxAggregateInputType
  }

  export type GetPainAreaAggregateType<T extends PainAreaAggregateArgs> = {
        [P in keyof T & keyof AggregatePainArea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePainArea[P]>
      : GetScalarType<T[P], AggregatePainArea[P]>
  }




  export type PainAreaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PainAreaWhereInput
    orderBy?: PainAreaOrderByWithAggregationInput | PainAreaOrderByWithAggregationInput[]
    by: PainAreaScalarFieldEnum[] | PainAreaScalarFieldEnum
    having?: PainAreaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PainAreaCountAggregateInputType | true
    _avg?: PainAreaAvgAggregateInputType
    _sum?: PainAreaSumAggregateInputType
    _min?: PainAreaMinAggregateInputType
    _max?: PainAreaMaxAggregateInputType
  }

  export type PainAreaGroupByOutputType = {
    id: string
    surveyId: string
    areaName: string
    painLevel: number
    createdAt: Date
    _count: PainAreaCountAggregateOutputType | null
    _avg: PainAreaAvgAggregateOutputType | null
    _sum: PainAreaSumAggregateOutputType | null
    _min: PainAreaMinAggregateOutputType | null
    _max: PainAreaMaxAggregateOutputType | null
  }

  type GetPainAreaGroupByPayload<T extends PainAreaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PainAreaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PainAreaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PainAreaGroupByOutputType[P]>
            : GetScalarType<T[P], PainAreaGroupByOutputType[P]>
        }
      >
    >


  export type PainAreaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    areaName?: boolean
    painLevel?: boolean
    createdAt?: boolean
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["painArea"]>

  export type PainAreaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    areaName?: boolean
    painLevel?: boolean
    createdAt?: boolean
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["painArea"]>

  export type PainAreaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    areaName?: boolean
    painLevel?: boolean
    createdAt?: boolean
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["painArea"]>

  export type PainAreaSelectScalar = {
    id?: boolean
    surveyId?: boolean
    areaName?: boolean
    painLevel?: boolean
    createdAt?: boolean
  }

  export type PainAreaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "surveyId" | "areaName" | "painLevel" | "createdAt", ExtArgs["result"]["painArea"]>
  export type PainAreaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }
  export type PainAreaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }
  export type PainAreaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | MorningSurveyResponseDefaultArgs<ExtArgs>
  }

  export type $PainAreaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PainArea"
    objects: {
      survey: Prisma.$MorningSurveyResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      surveyId: string
      areaName: string
      painLevel: number
      createdAt: Date
    }, ExtArgs["result"]["painArea"]>
    composites: {}
  }

  type PainAreaGetPayload<S extends boolean | null | undefined | PainAreaDefaultArgs> = $Result.GetResult<Prisma.$PainAreaPayload, S>

  type PainAreaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PainAreaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PainAreaCountAggregateInputType | true
    }

  export interface PainAreaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PainArea'], meta: { name: 'PainArea' } }
    /**
     * Find zero or one PainArea that matches the filter.
     * @param {PainAreaFindUniqueArgs} args - Arguments to find a PainArea
     * @example
     * // Get one PainArea
     * const painArea = await prisma.painArea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PainAreaFindUniqueArgs>(args: SelectSubset<T, PainAreaFindUniqueArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PainArea that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PainAreaFindUniqueOrThrowArgs} args - Arguments to find a PainArea
     * @example
     * // Get one PainArea
     * const painArea = await prisma.painArea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PainAreaFindUniqueOrThrowArgs>(args: SelectSubset<T, PainAreaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PainArea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaFindFirstArgs} args - Arguments to find a PainArea
     * @example
     * // Get one PainArea
     * const painArea = await prisma.painArea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PainAreaFindFirstArgs>(args?: SelectSubset<T, PainAreaFindFirstArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PainArea that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaFindFirstOrThrowArgs} args - Arguments to find a PainArea
     * @example
     * // Get one PainArea
     * const painArea = await prisma.painArea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PainAreaFindFirstOrThrowArgs>(args?: SelectSubset<T, PainAreaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PainAreas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PainAreas
     * const painAreas = await prisma.painArea.findMany()
     * 
     * // Get first 10 PainAreas
     * const painAreas = await prisma.painArea.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const painAreaWithIdOnly = await prisma.painArea.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PainAreaFindManyArgs>(args?: SelectSubset<T, PainAreaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PainArea.
     * @param {PainAreaCreateArgs} args - Arguments to create a PainArea.
     * @example
     * // Create one PainArea
     * const PainArea = await prisma.painArea.create({
     *   data: {
     *     // ... data to create a PainArea
     *   }
     * })
     * 
     */
    create<T extends PainAreaCreateArgs>(args: SelectSubset<T, PainAreaCreateArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PainAreas.
     * @param {PainAreaCreateManyArgs} args - Arguments to create many PainAreas.
     * @example
     * // Create many PainAreas
     * const painArea = await prisma.painArea.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PainAreaCreateManyArgs>(args?: SelectSubset<T, PainAreaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PainAreas and returns the data saved in the database.
     * @param {PainAreaCreateManyAndReturnArgs} args - Arguments to create many PainAreas.
     * @example
     * // Create many PainAreas
     * const painArea = await prisma.painArea.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PainAreas and only return the `id`
     * const painAreaWithIdOnly = await prisma.painArea.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PainAreaCreateManyAndReturnArgs>(args?: SelectSubset<T, PainAreaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PainArea.
     * @param {PainAreaDeleteArgs} args - Arguments to delete one PainArea.
     * @example
     * // Delete one PainArea
     * const PainArea = await prisma.painArea.delete({
     *   where: {
     *     // ... filter to delete one PainArea
     *   }
     * })
     * 
     */
    delete<T extends PainAreaDeleteArgs>(args: SelectSubset<T, PainAreaDeleteArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PainArea.
     * @param {PainAreaUpdateArgs} args - Arguments to update one PainArea.
     * @example
     * // Update one PainArea
     * const painArea = await prisma.painArea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PainAreaUpdateArgs>(args: SelectSubset<T, PainAreaUpdateArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PainAreas.
     * @param {PainAreaDeleteManyArgs} args - Arguments to filter PainAreas to delete.
     * @example
     * // Delete a few PainAreas
     * const { count } = await prisma.painArea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PainAreaDeleteManyArgs>(args?: SelectSubset<T, PainAreaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PainAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PainAreas
     * const painArea = await prisma.painArea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PainAreaUpdateManyArgs>(args: SelectSubset<T, PainAreaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PainAreas and returns the data updated in the database.
     * @param {PainAreaUpdateManyAndReturnArgs} args - Arguments to update many PainAreas.
     * @example
     * // Update many PainAreas
     * const painArea = await prisma.painArea.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PainAreas and only return the `id`
     * const painAreaWithIdOnly = await prisma.painArea.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PainAreaUpdateManyAndReturnArgs>(args: SelectSubset<T, PainAreaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PainArea.
     * @param {PainAreaUpsertArgs} args - Arguments to update or create a PainArea.
     * @example
     * // Update or create a PainArea
     * const painArea = await prisma.painArea.upsert({
     *   create: {
     *     // ... data to create a PainArea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PainArea we want to update
     *   }
     * })
     */
    upsert<T extends PainAreaUpsertArgs>(args: SelectSubset<T, PainAreaUpsertArgs<ExtArgs>>): Prisma__PainAreaClient<$Result.GetResult<Prisma.$PainAreaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PainAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaCountArgs} args - Arguments to filter PainAreas to count.
     * @example
     * // Count the number of PainAreas
     * const count = await prisma.painArea.count({
     *   where: {
     *     // ... the filter for the PainAreas we want to count
     *   }
     * })
    **/
    count<T extends PainAreaCountArgs>(
      args?: Subset<T, PainAreaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PainAreaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PainArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PainAreaAggregateArgs>(args: Subset<T, PainAreaAggregateArgs>): Prisma.PrismaPromise<GetPainAreaAggregateType<T>>

    /**
     * Group by PainArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PainAreaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PainAreaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PainAreaGroupByArgs['orderBy'] }
        : { orderBy?: PainAreaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PainAreaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPainAreaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PainArea model
   */
  readonly fields: PainAreaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PainArea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PainAreaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survey<T extends MorningSurveyResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MorningSurveyResponseDefaultArgs<ExtArgs>>): Prisma__MorningSurveyResponseClient<$Result.GetResult<Prisma.$MorningSurveyResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PainArea model
   */
  interface PainAreaFieldRefs {
    readonly id: FieldRef<"PainArea", 'String'>
    readonly surveyId: FieldRef<"PainArea", 'String'>
    readonly areaName: FieldRef<"PainArea", 'String'>
    readonly painLevel: FieldRef<"PainArea", 'Int'>
    readonly createdAt: FieldRef<"PainArea", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PainArea findUnique
   */
  export type PainAreaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter, which PainArea to fetch.
     */
    where: PainAreaWhereUniqueInput
  }

  /**
   * PainArea findUniqueOrThrow
   */
  export type PainAreaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter, which PainArea to fetch.
     */
    where: PainAreaWhereUniqueInput
  }

  /**
   * PainArea findFirst
   */
  export type PainAreaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter, which PainArea to fetch.
     */
    where?: PainAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PainAreas to fetch.
     */
    orderBy?: PainAreaOrderByWithRelationInput | PainAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PainAreas.
     */
    cursor?: PainAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PainAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PainAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PainAreas.
     */
    distinct?: PainAreaScalarFieldEnum | PainAreaScalarFieldEnum[]
  }

  /**
   * PainArea findFirstOrThrow
   */
  export type PainAreaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter, which PainArea to fetch.
     */
    where?: PainAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PainAreas to fetch.
     */
    orderBy?: PainAreaOrderByWithRelationInput | PainAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PainAreas.
     */
    cursor?: PainAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PainAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PainAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PainAreas.
     */
    distinct?: PainAreaScalarFieldEnum | PainAreaScalarFieldEnum[]
  }

  /**
   * PainArea findMany
   */
  export type PainAreaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter, which PainAreas to fetch.
     */
    where?: PainAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PainAreas to fetch.
     */
    orderBy?: PainAreaOrderByWithRelationInput | PainAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PainAreas.
     */
    cursor?: PainAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PainAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PainAreas.
     */
    skip?: number
    distinct?: PainAreaScalarFieldEnum | PainAreaScalarFieldEnum[]
  }

  /**
   * PainArea create
   */
  export type PainAreaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * The data needed to create a PainArea.
     */
    data: XOR<PainAreaCreateInput, PainAreaUncheckedCreateInput>
  }

  /**
   * PainArea createMany
   */
  export type PainAreaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PainAreas.
     */
    data: PainAreaCreateManyInput | PainAreaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PainArea createManyAndReturn
   */
  export type PainAreaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * The data used to create many PainAreas.
     */
    data: PainAreaCreateManyInput | PainAreaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PainArea update
   */
  export type PainAreaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * The data needed to update a PainArea.
     */
    data: XOR<PainAreaUpdateInput, PainAreaUncheckedUpdateInput>
    /**
     * Choose, which PainArea to update.
     */
    where: PainAreaWhereUniqueInput
  }

  /**
   * PainArea updateMany
   */
  export type PainAreaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PainAreas.
     */
    data: XOR<PainAreaUpdateManyMutationInput, PainAreaUncheckedUpdateManyInput>
    /**
     * Filter which PainAreas to update
     */
    where?: PainAreaWhereInput
    /**
     * Limit how many PainAreas to update.
     */
    limit?: number
  }

  /**
   * PainArea updateManyAndReturn
   */
  export type PainAreaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * The data used to update PainAreas.
     */
    data: XOR<PainAreaUpdateManyMutationInput, PainAreaUncheckedUpdateManyInput>
    /**
     * Filter which PainAreas to update
     */
    where?: PainAreaWhereInput
    /**
     * Limit how many PainAreas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PainArea upsert
   */
  export type PainAreaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * The filter to search for the PainArea to update in case it exists.
     */
    where: PainAreaWhereUniqueInput
    /**
     * In case the PainArea found by the `where` argument doesn't exist, create a new PainArea with this data.
     */
    create: XOR<PainAreaCreateInput, PainAreaUncheckedCreateInput>
    /**
     * In case the PainArea was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PainAreaUpdateInput, PainAreaUncheckedUpdateInput>
  }

  /**
   * PainArea delete
   */
  export type PainAreaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
    /**
     * Filter which PainArea to delete.
     */
    where: PainAreaWhereUniqueInput
  }

  /**
   * PainArea deleteMany
   */
  export type PainAreaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PainAreas to delete
     */
    where?: PainAreaWhereInput
    /**
     * Limit how many PainAreas to delete.
     */
    limit?: number
  }

  /**
   * PainArea without action
   */
  export type PainAreaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PainArea
     */
    select?: PainAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PainArea
     */
    omit?: PainAreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PainAreaInclude<ExtArgs> | null
  }


  /**
   * Model MuscleArea
   */

  export type AggregateMuscleArea = {
    _count: MuscleAreaCountAggregateOutputType | null
    _avg: MuscleAreaAvgAggregateOutputType | null
    _sum: MuscleAreaSumAggregateOutputType | null
    _min: MuscleAreaMinAggregateOutputType | null
    _max: MuscleAreaMaxAggregateOutputType | null
  }

  export type MuscleAreaAvgAggregateOutputType = {
    number: number | null
  }

  export type MuscleAreaSumAggregateOutputType = {
    number: number | null
  }

  export type MuscleAreaMinAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
    view: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleAreaMaxAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
    view: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleAreaCountAggregateOutputType = {
    id: number
    number: number
    name: number
    view: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MuscleAreaAvgAggregateInputType = {
    number?: true
  }

  export type MuscleAreaSumAggregateInputType = {
    number?: true
  }

  export type MuscleAreaMinAggregateInputType = {
    id?: true
    number?: true
    name?: true
    view?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleAreaMaxAggregateInputType = {
    id?: true
    number?: true
    name?: true
    view?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleAreaCountAggregateInputType = {
    id?: true
    number?: true
    name?: true
    view?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MuscleAreaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MuscleArea to aggregate.
     */
    where?: MuscleAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAreas to fetch.
     */
    orderBy?: MuscleAreaOrderByWithRelationInput | MuscleAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MuscleAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MuscleAreas
    **/
    _count?: true | MuscleAreaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MuscleAreaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MuscleAreaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MuscleAreaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MuscleAreaMaxAggregateInputType
  }

  export type GetMuscleAreaAggregateType<T extends MuscleAreaAggregateArgs> = {
        [P in keyof T & keyof AggregateMuscleArea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuscleArea[P]>
      : GetScalarType<T[P], AggregateMuscleArea[P]>
  }




  export type MuscleAreaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleAreaWhereInput
    orderBy?: MuscleAreaOrderByWithAggregationInput | MuscleAreaOrderByWithAggregationInput[]
    by: MuscleAreaScalarFieldEnum[] | MuscleAreaScalarFieldEnum
    having?: MuscleAreaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MuscleAreaCountAggregateInputType | true
    _avg?: MuscleAreaAvgAggregateInputType
    _sum?: MuscleAreaSumAggregateInputType
    _min?: MuscleAreaMinAggregateInputType
    _max?: MuscleAreaMaxAggregateInputType
  }

  export type MuscleAreaGroupByOutputType = {
    id: string
    number: number
    name: string
    view: string
    createdAt: Date
    updatedAt: Date
    _count: MuscleAreaCountAggregateOutputType | null
    _avg: MuscleAreaAvgAggregateOutputType | null
    _sum: MuscleAreaSumAggregateOutputType | null
    _min: MuscleAreaMinAggregateOutputType | null
    _max: MuscleAreaMaxAggregateOutputType | null
  }

  type GetMuscleAreaGroupByPayload<T extends MuscleAreaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MuscleAreaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MuscleAreaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MuscleAreaGroupByOutputType[P]>
            : GetScalarType<T[P], MuscleAreaGroupByOutputType[P]>
        }
      >
    >


  export type MuscleAreaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    view?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["muscleArea"]>

  export type MuscleAreaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    view?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["muscleArea"]>

  export type MuscleAreaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    view?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["muscleArea"]>

  export type MuscleAreaSelectScalar = {
    id?: boolean
    number?: boolean
    name?: boolean
    view?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MuscleAreaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "name" | "view" | "createdAt" | "updatedAt", ExtArgs["result"]["muscleArea"]>

  export type $MuscleAreaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MuscleArea"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      number: number
      name: string
      view: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["muscleArea"]>
    composites: {}
  }

  type MuscleAreaGetPayload<S extends boolean | null | undefined | MuscleAreaDefaultArgs> = $Result.GetResult<Prisma.$MuscleAreaPayload, S>

  type MuscleAreaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MuscleAreaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MuscleAreaCountAggregateInputType | true
    }

  export interface MuscleAreaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MuscleArea'], meta: { name: 'MuscleArea' } }
    /**
     * Find zero or one MuscleArea that matches the filter.
     * @param {MuscleAreaFindUniqueArgs} args - Arguments to find a MuscleArea
     * @example
     * // Get one MuscleArea
     * const muscleArea = await prisma.muscleArea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MuscleAreaFindUniqueArgs>(args: SelectSubset<T, MuscleAreaFindUniqueArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MuscleArea that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MuscleAreaFindUniqueOrThrowArgs} args - Arguments to find a MuscleArea
     * @example
     * // Get one MuscleArea
     * const muscleArea = await prisma.muscleArea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MuscleAreaFindUniqueOrThrowArgs>(args: SelectSubset<T, MuscleAreaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MuscleArea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaFindFirstArgs} args - Arguments to find a MuscleArea
     * @example
     * // Get one MuscleArea
     * const muscleArea = await prisma.muscleArea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MuscleAreaFindFirstArgs>(args?: SelectSubset<T, MuscleAreaFindFirstArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MuscleArea that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaFindFirstOrThrowArgs} args - Arguments to find a MuscleArea
     * @example
     * // Get one MuscleArea
     * const muscleArea = await prisma.muscleArea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MuscleAreaFindFirstOrThrowArgs>(args?: SelectSubset<T, MuscleAreaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MuscleAreas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MuscleAreas
     * const muscleAreas = await prisma.muscleArea.findMany()
     * 
     * // Get first 10 MuscleAreas
     * const muscleAreas = await prisma.muscleArea.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const muscleAreaWithIdOnly = await prisma.muscleArea.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MuscleAreaFindManyArgs>(args?: SelectSubset<T, MuscleAreaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MuscleArea.
     * @param {MuscleAreaCreateArgs} args - Arguments to create a MuscleArea.
     * @example
     * // Create one MuscleArea
     * const MuscleArea = await prisma.muscleArea.create({
     *   data: {
     *     // ... data to create a MuscleArea
     *   }
     * })
     * 
     */
    create<T extends MuscleAreaCreateArgs>(args: SelectSubset<T, MuscleAreaCreateArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MuscleAreas.
     * @param {MuscleAreaCreateManyArgs} args - Arguments to create many MuscleAreas.
     * @example
     * // Create many MuscleAreas
     * const muscleArea = await prisma.muscleArea.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MuscleAreaCreateManyArgs>(args?: SelectSubset<T, MuscleAreaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MuscleAreas and returns the data saved in the database.
     * @param {MuscleAreaCreateManyAndReturnArgs} args - Arguments to create many MuscleAreas.
     * @example
     * // Create many MuscleAreas
     * const muscleArea = await prisma.muscleArea.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MuscleAreas and only return the `id`
     * const muscleAreaWithIdOnly = await prisma.muscleArea.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MuscleAreaCreateManyAndReturnArgs>(args?: SelectSubset<T, MuscleAreaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MuscleArea.
     * @param {MuscleAreaDeleteArgs} args - Arguments to delete one MuscleArea.
     * @example
     * // Delete one MuscleArea
     * const MuscleArea = await prisma.muscleArea.delete({
     *   where: {
     *     // ... filter to delete one MuscleArea
     *   }
     * })
     * 
     */
    delete<T extends MuscleAreaDeleteArgs>(args: SelectSubset<T, MuscleAreaDeleteArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MuscleArea.
     * @param {MuscleAreaUpdateArgs} args - Arguments to update one MuscleArea.
     * @example
     * // Update one MuscleArea
     * const muscleArea = await prisma.muscleArea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MuscleAreaUpdateArgs>(args: SelectSubset<T, MuscleAreaUpdateArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MuscleAreas.
     * @param {MuscleAreaDeleteManyArgs} args - Arguments to filter MuscleAreas to delete.
     * @example
     * // Delete a few MuscleAreas
     * const { count } = await prisma.muscleArea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MuscleAreaDeleteManyArgs>(args?: SelectSubset<T, MuscleAreaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MuscleAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MuscleAreas
     * const muscleArea = await prisma.muscleArea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MuscleAreaUpdateManyArgs>(args: SelectSubset<T, MuscleAreaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MuscleAreas and returns the data updated in the database.
     * @param {MuscleAreaUpdateManyAndReturnArgs} args - Arguments to update many MuscleAreas.
     * @example
     * // Update many MuscleAreas
     * const muscleArea = await prisma.muscleArea.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MuscleAreas and only return the `id`
     * const muscleAreaWithIdOnly = await prisma.muscleArea.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MuscleAreaUpdateManyAndReturnArgs>(args: SelectSubset<T, MuscleAreaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MuscleArea.
     * @param {MuscleAreaUpsertArgs} args - Arguments to update or create a MuscleArea.
     * @example
     * // Update or create a MuscleArea
     * const muscleArea = await prisma.muscleArea.upsert({
     *   create: {
     *     // ... data to create a MuscleArea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MuscleArea we want to update
     *   }
     * })
     */
    upsert<T extends MuscleAreaUpsertArgs>(args: SelectSubset<T, MuscleAreaUpsertArgs<ExtArgs>>): Prisma__MuscleAreaClient<$Result.GetResult<Prisma.$MuscleAreaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MuscleAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaCountArgs} args - Arguments to filter MuscleAreas to count.
     * @example
     * // Count the number of MuscleAreas
     * const count = await prisma.muscleArea.count({
     *   where: {
     *     // ... the filter for the MuscleAreas we want to count
     *   }
     * })
    **/
    count<T extends MuscleAreaCountArgs>(
      args?: Subset<T, MuscleAreaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MuscleAreaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MuscleArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MuscleAreaAggregateArgs>(args: Subset<T, MuscleAreaAggregateArgs>): Prisma.PrismaPromise<GetMuscleAreaAggregateType<T>>

    /**
     * Group by MuscleArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAreaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MuscleAreaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MuscleAreaGroupByArgs['orderBy'] }
        : { orderBy?: MuscleAreaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MuscleAreaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMuscleAreaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MuscleArea model
   */
  readonly fields: MuscleAreaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MuscleArea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MuscleAreaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MuscleArea model
   */
  interface MuscleAreaFieldRefs {
    readonly id: FieldRef<"MuscleArea", 'String'>
    readonly number: FieldRef<"MuscleArea", 'Int'>
    readonly name: FieldRef<"MuscleArea", 'String'>
    readonly view: FieldRef<"MuscleArea", 'String'>
    readonly createdAt: FieldRef<"MuscleArea", 'DateTime'>
    readonly updatedAt: FieldRef<"MuscleArea", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MuscleArea findUnique
   */
  export type MuscleAreaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter, which MuscleArea to fetch.
     */
    where: MuscleAreaWhereUniqueInput
  }

  /**
   * MuscleArea findUniqueOrThrow
   */
  export type MuscleAreaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter, which MuscleArea to fetch.
     */
    where: MuscleAreaWhereUniqueInput
  }

  /**
   * MuscleArea findFirst
   */
  export type MuscleAreaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter, which MuscleArea to fetch.
     */
    where?: MuscleAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAreas to fetch.
     */
    orderBy?: MuscleAreaOrderByWithRelationInput | MuscleAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MuscleAreas.
     */
    cursor?: MuscleAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MuscleAreas.
     */
    distinct?: MuscleAreaScalarFieldEnum | MuscleAreaScalarFieldEnum[]
  }

  /**
   * MuscleArea findFirstOrThrow
   */
  export type MuscleAreaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter, which MuscleArea to fetch.
     */
    where?: MuscleAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAreas to fetch.
     */
    orderBy?: MuscleAreaOrderByWithRelationInput | MuscleAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MuscleAreas.
     */
    cursor?: MuscleAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAreas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MuscleAreas.
     */
    distinct?: MuscleAreaScalarFieldEnum | MuscleAreaScalarFieldEnum[]
  }

  /**
   * MuscleArea findMany
   */
  export type MuscleAreaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter, which MuscleAreas to fetch.
     */
    where?: MuscleAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAreas to fetch.
     */
    orderBy?: MuscleAreaOrderByWithRelationInput | MuscleAreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MuscleAreas.
     */
    cursor?: MuscleAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAreas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAreas.
     */
    skip?: number
    distinct?: MuscleAreaScalarFieldEnum | MuscleAreaScalarFieldEnum[]
  }

  /**
   * MuscleArea create
   */
  export type MuscleAreaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * The data needed to create a MuscleArea.
     */
    data: XOR<MuscleAreaCreateInput, MuscleAreaUncheckedCreateInput>
  }

  /**
   * MuscleArea createMany
   */
  export type MuscleAreaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MuscleAreas.
     */
    data: MuscleAreaCreateManyInput | MuscleAreaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MuscleArea createManyAndReturn
   */
  export type MuscleAreaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * The data used to create many MuscleAreas.
     */
    data: MuscleAreaCreateManyInput | MuscleAreaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MuscleArea update
   */
  export type MuscleAreaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * The data needed to update a MuscleArea.
     */
    data: XOR<MuscleAreaUpdateInput, MuscleAreaUncheckedUpdateInput>
    /**
     * Choose, which MuscleArea to update.
     */
    where: MuscleAreaWhereUniqueInput
  }

  /**
   * MuscleArea updateMany
   */
  export type MuscleAreaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MuscleAreas.
     */
    data: XOR<MuscleAreaUpdateManyMutationInput, MuscleAreaUncheckedUpdateManyInput>
    /**
     * Filter which MuscleAreas to update
     */
    where?: MuscleAreaWhereInput
    /**
     * Limit how many MuscleAreas to update.
     */
    limit?: number
  }

  /**
   * MuscleArea updateManyAndReturn
   */
  export type MuscleAreaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * The data used to update MuscleAreas.
     */
    data: XOR<MuscleAreaUpdateManyMutationInput, MuscleAreaUncheckedUpdateManyInput>
    /**
     * Filter which MuscleAreas to update
     */
    where?: MuscleAreaWhereInput
    /**
     * Limit how many MuscleAreas to update.
     */
    limit?: number
  }

  /**
   * MuscleArea upsert
   */
  export type MuscleAreaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * The filter to search for the MuscleArea to update in case it exists.
     */
    where: MuscleAreaWhereUniqueInput
    /**
     * In case the MuscleArea found by the `where` argument doesn't exist, create a new MuscleArea with this data.
     */
    create: XOR<MuscleAreaCreateInput, MuscleAreaUncheckedCreateInput>
    /**
     * In case the MuscleArea was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MuscleAreaUpdateInput, MuscleAreaUncheckedUpdateInput>
  }

  /**
   * MuscleArea delete
   */
  export type MuscleAreaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
    /**
     * Filter which MuscleArea to delete.
     */
    where: MuscleAreaWhereUniqueInput
  }

  /**
   * MuscleArea deleteMany
   */
  export type MuscleAreaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MuscleAreas to delete
     */
    where?: MuscleAreaWhereInput
    /**
     * Limit how many MuscleAreas to delete.
     */
    limit?: number
  }

  /**
   * MuscleArea without action
   */
  export type MuscleAreaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleArea
     */
    select?: MuscleAreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleArea
     */
    omit?: MuscleAreaOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClubScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subdomain: 'subdomain',
    logoUrl: 'logoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    broadcastTime: 'broadcastTime'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    emailVerified: 'emailVerified',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    order: 'order'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    teamId: 'teamId',
    createdById: 'createdById'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const MediaItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    url: 'url',
    size: 'size',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    eventId: 'eventId',
    uploadedById: 'uploadedById',
    exerciseId: 'exerciseId',
    publicUrl: 'publicUrl'
  };

  export type MediaItemScalarFieldEnum = (typeof MediaItemScalarFieldEnum)[keyof typeof MediaItemScalarFieldEnum]


  export const TrainingCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId'
  };

  export type TrainingCategoryScalarFieldEnum = (typeof TrainingCategoryScalarFieldEnum)[keyof typeof TrainingCategoryScalarFieldEnum]


  export const TrainingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    time: 'time',
    location: 'location',
    notes: 'notes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    teamId: 'teamId',
    categoryId: 'categoryId',
    createdById: 'createdById',
    type: 'type'
  };

  export type TrainingScalarFieldEnum = (typeof TrainingScalarFieldEnum)[keyof typeof TrainingScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    authorId: 'authorId',
    clubId: 'clubId',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    length: 'length',
    width: 'width'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const ExerciseCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId'
  };

  export type ExerciseCategoryScalarFieldEnum = (typeof ExerciseCategoryScalarFieldEnum)[keyof typeof ExerciseCategoryScalarFieldEnum]


  export const ExerciseTagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    exerciseCategoryId: 'exerciseCategoryId'
  };

  export type ExerciseTagScalarFieldEnum = (typeof ExerciseTagScalarFieldEnum)[keyof typeof ExerciseTagScalarFieldEnum]


  export const TrainingExerciseScalarFieldEnum: {
    id: 'id',
    position: 'position',
    trainingId: 'trainingId',
    exerciseId: 'exerciseId',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingExerciseScalarFieldEnum = (typeof TrainingExerciseScalarFieldEnum)[keyof typeof TrainingExerciseScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    middleName: 'middleName',
    number: 'number',
    position: 'position',
    strongFoot: 'strongFoot',
    dateOfBirth: 'dateOfBirth',
    academyJoinDate: 'academyJoinDate',
    nationality: 'nationality',
    imageUrl: 'imageUrl',
    status: 'status',
    birthCertificateNumber: 'birthCertificateNumber',
    pinCode: 'pinCode',
    telegramId: 'telegramId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    teamId: 'teamId'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const PlayerDocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    url: 'url',
    publicUrl: 'publicUrl',
    size: 'size',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    playerId: 'playerId',
    clubId: 'clubId',
    uploadedById: 'uploadedById'
  };

  export type PlayerDocumentScalarFieldEnum = (typeof PlayerDocumentScalarFieldEnum)[keyof typeof PlayerDocumentScalarFieldEnum]


  export const TeamCoachScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamCoachScalarFieldEnum = (typeof TeamCoachScalarFieldEnum)[keyof typeof TeamCoachScalarFieldEnum]


  export const PlayerAttendanceScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    trainingId: 'trainingId',
    status: 'status',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlayerAttendanceScalarFieldEnum = (typeof PlayerAttendanceScalarFieldEnum)[keyof typeof PlayerAttendanceScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    competitionType: 'competitionType',
    date: 'date',
    time: 'time',
    isHome: 'isHome',
    teamId: 'teamId',
    opponentName: 'opponentName',
    teamGoals: 'teamGoals',
    opponentGoals: 'opponentGoals',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clubId: 'clubId',
    formation: 'formation',
    gameFormat: 'gameFormat',
    markerColor: 'markerColor',
    notes: 'notes',
    playerPositions: 'playerPositions',
    positionAssignments: 'positionAssignments'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const PlayerMatchStatScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    playerId: 'playerId',
    isStarter: 'isStarter',
    minutesPlayed: 'minutesPlayed',
    goals: 'goals',
    assists: 'assists',
    yellowCards: 'yellowCards',
    redCards: 'redCards',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlayerMatchStatScalarFieldEnum = (typeof PlayerMatchStatScalarFieldEnum)[keyof typeof PlayerMatchStatScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const ScheduleEventScalarFieldEnum: {
    id: 'id',
    scheduleId: 'scheduleId',
    type: 'type',
    time: 'time',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleEventScalarFieldEnum = (typeof ScheduleEventScalarFieldEnum)[keyof typeof ScheduleEventScalarFieldEnum]


  export const MorningSurveyResponseScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    createdAt: 'createdAt',
    readAt: 'readAt',
    completedAt: 'completedAt',
    sleepDuration: 'sleepDuration',
    sleepQuality: 'sleepQuality',
    recovery: 'recovery',
    mood: 'mood',
    muscleCondition: 'muscleCondition',
    surveyId: 'surveyId',
    tenantId: 'tenantId'
  };

  export type MorningSurveyResponseScalarFieldEnum = (typeof MorningSurveyResponseScalarFieldEnum)[keyof typeof MorningSurveyResponseScalarFieldEnum]


  export const PainAreaScalarFieldEnum: {
    id: 'id',
    surveyId: 'surveyId',
    areaName: 'areaName',
    painLevel: 'painLevel',
    createdAt: 'createdAt'
  };

  export type PainAreaScalarFieldEnum = (typeof PainAreaScalarFieldEnum)[keyof typeof PainAreaScalarFieldEnum]


  export const MuscleAreaScalarFieldEnum: {
    id: 'id',
    number: 'number',
    name: 'name',
    view: 'view',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MuscleAreaScalarFieldEnum = (typeof MuscleAreaScalarFieldEnum)[keyof typeof MuscleAreaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'MediaType'
   */
  export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


  /**
   * Reference to a field of type 'MediaType[]'
   */
  export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType[]'>
    


  /**
   * Reference to a field of type 'TrainingStatus'
   */
  export type EnumTrainingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingStatus'>
    


  /**
   * Reference to a field of type 'TrainingStatus[]'
   */
  export type ListEnumTrainingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'AttendanceStatus'
   */
  export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


  /**
   * Reference to a field of type 'AttendanceStatus[]'
   */
  export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    


  /**
   * Reference to a field of type 'CompetitionType'
   */
  export type EnumCompetitionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionType'>
    


  /**
   * Reference to a field of type 'CompetitionType[]'
   */
  export type ListEnumCompetitionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    subdomain?: StringFilter<"Club"> | string
    logoUrl?: StringNullableFilter<"Club"> | string | null
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    broadcastTime?: StringNullableFilter<"Club"> | string | null
    events?: EventListRelationFilter
    exercises?: ExerciseListRelationFilter
    exerciseCategories?: ExerciseCategoryListRelationFilter
    exerciseTags?: ExerciseTagListRelationFilter
    matches?: MatchListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    teams?: TeamListRelationFilter
    trainings?: TrainingListRelationFilter
    trainingCategories?: TrainingCategoryListRelationFilter
    users?: UserListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broadcastTime?: SortOrderInput | SortOrder
    events?: EventOrderByRelationAggregateInput
    exercises?: ExerciseOrderByRelationAggregateInput
    exerciseCategories?: ExerciseCategoryOrderByRelationAggregateInput
    exerciseTags?: ExerciseTagOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
    trainings?: TrainingOrderByRelationAggregateInput
    trainingCategories?: TrainingCategoryOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subdomain?: string
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    name?: StringFilter<"Club"> | string
    logoUrl?: StringNullableFilter<"Club"> | string | null
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    broadcastTime?: StringNullableFilter<"Club"> | string | null
    events?: EventListRelationFilter
    exercises?: ExerciseListRelationFilter
    exerciseCategories?: ExerciseCategoryListRelationFilter
    exerciseTags?: ExerciseTagListRelationFilter
    matches?: MatchListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    teams?: TeamListRelationFilter
    trainings?: TrainingListRelationFilter
    trainingCategories?: TrainingCategoryListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "subdomain">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broadcastTime?: SortOrderInput | SortOrder
    _count?: ClubCountOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Club"> | string
    name?: StringWithAggregatesFilter<"Club"> | string
    subdomain?: StringWithAggregatesFilter<"Club"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"Club"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    broadcastTime?: StringNullableWithAggregatesFilter<"Club"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    imageUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    clubId?: StringFilter<"User"> | string
    events?: EventListRelationFilter
    exercises?: ExerciseListRelationFilter
    mediaUploads?: MediaItemListRelationFilter
    playerDocuments?: PlayerDocumentListRelationFilter
    teamCoaches?: TeamCoachListRelationFilter
    trainings?: TrainingListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    events?: EventOrderByRelationAggregateInput
    exercises?: ExerciseOrderByRelationAggregateInput
    mediaUploads?: MediaItemOrderByRelationAggregateInput
    playerDocuments?: PlayerDocumentOrderByRelationAggregateInput
    teamCoaches?: TeamCoachOrderByRelationAggregateInput
    trainings?: TrainingOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    imageUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    clubId?: StringFilter<"User"> | string
    events?: EventListRelationFilter
    exercises?: ExerciseListRelationFilter
    mediaUploads?: MediaItemListRelationFilter
    playerDocuments?: PlayerDocumentListRelationFilter
    teamCoaches?: TeamCoachListRelationFilter
    trainings?: TrainingListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    clubId?: StringWithAggregatesFilter<"User"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    clubId?: StringFilter<"Team"> | string
    order?: IntFilter<"Team"> | number
    events?: EventListRelationFilter
    matches?: MatchListRelationFilter
    players?: PlayerListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    coaches?: TeamCoachListRelationFilter
    trainings?: TrainingListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    order?: SortOrder
    events?: EventOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    players?: PlayerOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
    coaches?: TeamCoachOrderByRelationAggregateInput
    trainings?: TrainingOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    clubId?: StringFilter<"Team"> | string
    order?: IntFilter<"Team"> | number
    events?: EventListRelationFilter
    matches?: MatchListRelationFilter
    players?: PlayerListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    coaches?: TeamCoachListRelationFilter
    trainings?: TrainingListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    order?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    description?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    clubId?: StringWithAggregatesFilter<"Team"> | string
    order?: IntWithAggregatesFilter<"Team"> | number
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    location?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    clubId?: StringFilter<"Event"> | string
    teamId?: StringNullableFilter<"Event"> | string | null
    createdById?: StringFilter<"Event"> | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    mediaItems?: MediaItemListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    club?: ClubOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    location?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    clubId?: StringFilter<"Event"> | string
    teamId?: StringNullableFilter<"Event"> | string | null
    createdById?: StringFilter<"Event"> | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
    mediaItems?: MediaItemListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    clubId?: StringWithAggregatesFilter<"Event"> | string
    teamId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createdById?: StringWithAggregatesFilter<"Event"> | string
  }

  export type MediaItemWhereInput = {
    AND?: MediaItemWhereInput | MediaItemWhereInput[]
    OR?: MediaItemWhereInput[]
    NOT?: MediaItemWhereInput | MediaItemWhereInput[]
    id?: StringFilter<"MediaItem"> | string
    name?: StringFilter<"MediaItem"> | string
    type?: EnumMediaTypeFilter<"MediaItem"> | $Enums.MediaType
    url?: StringFilter<"MediaItem"> | string
    size?: IntFilter<"MediaItem"> | number
    description?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
    clubId?: StringFilter<"MediaItem"> | string
    eventId?: StringNullableFilter<"MediaItem"> | string | null
    uploadedById?: StringFilter<"MediaItem"> | string
    exerciseId?: StringNullableFilter<"MediaItem"> | string | null
    publicUrl?: StringNullableFilter<"MediaItem"> | string | null
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    exercise?: XOR<ExerciseNullableScalarRelationFilter, ExerciseWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MediaItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    size?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    exerciseId?: SortOrderInput | SortOrder
    publicUrl?: SortOrderInput | SortOrder
    club?: ClubOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type MediaItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaItemWhereInput | MediaItemWhereInput[]
    OR?: MediaItemWhereInput[]
    NOT?: MediaItemWhereInput | MediaItemWhereInput[]
    name?: StringFilter<"MediaItem"> | string
    type?: EnumMediaTypeFilter<"MediaItem"> | $Enums.MediaType
    url?: StringFilter<"MediaItem"> | string
    size?: IntFilter<"MediaItem"> | number
    description?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
    clubId?: StringFilter<"MediaItem"> | string
    eventId?: StringNullableFilter<"MediaItem"> | string | null
    uploadedById?: StringFilter<"MediaItem"> | string
    exerciseId?: StringNullableFilter<"MediaItem"> | string | null
    publicUrl?: StringNullableFilter<"MediaItem"> | string | null
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    exercise?: XOR<ExerciseNullableScalarRelationFilter, ExerciseWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MediaItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    size?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    exerciseId?: SortOrderInput | SortOrder
    publicUrl?: SortOrderInput | SortOrder
    _count?: MediaItemCountOrderByAggregateInput
    _avg?: MediaItemAvgOrderByAggregateInput
    _max?: MediaItemMaxOrderByAggregateInput
    _min?: MediaItemMinOrderByAggregateInput
    _sum?: MediaItemSumOrderByAggregateInput
  }

  export type MediaItemScalarWhereWithAggregatesInput = {
    AND?: MediaItemScalarWhereWithAggregatesInput | MediaItemScalarWhereWithAggregatesInput[]
    OR?: MediaItemScalarWhereWithAggregatesInput[]
    NOT?: MediaItemScalarWhereWithAggregatesInput | MediaItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MediaItem"> | string
    name?: StringWithAggregatesFilter<"MediaItem"> | string
    type?: EnumMediaTypeWithAggregatesFilter<"MediaItem"> | $Enums.MediaType
    url?: StringWithAggregatesFilter<"MediaItem"> | string
    size?: IntWithAggregatesFilter<"MediaItem"> | number
    description?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaItem"> | Date | string
    clubId?: StringWithAggregatesFilter<"MediaItem"> | string
    eventId?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    uploadedById?: StringWithAggregatesFilter<"MediaItem"> | string
    exerciseId?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    publicUrl?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
  }

  export type TrainingCategoryWhereInput = {
    AND?: TrainingCategoryWhereInput | TrainingCategoryWhereInput[]
    OR?: TrainingCategoryWhereInput[]
    NOT?: TrainingCategoryWhereInput | TrainingCategoryWhereInput[]
    id?: StringFilter<"TrainingCategory"> | string
    name?: StringFilter<"TrainingCategory"> | string
    createdAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    clubId?: StringFilter<"TrainingCategory"> | string
    trainings?: TrainingListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }

  export type TrainingCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    trainings?: TrainingOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
  }

  export type TrainingCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrainingCategoryWhereInput | TrainingCategoryWhereInput[]
    OR?: TrainingCategoryWhereInput[]
    NOT?: TrainingCategoryWhereInput | TrainingCategoryWhereInput[]
    name?: StringFilter<"TrainingCategory"> | string
    createdAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    clubId?: StringFilter<"TrainingCategory"> | string
    trainings?: TrainingListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }, "id">

  export type TrainingCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    _count?: TrainingCategoryCountOrderByAggregateInput
    _max?: TrainingCategoryMaxOrderByAggregateInput
    _min?: TrainingCategoryMinOrderByAggregateInput
  }

  export type TrainingCategoryScalarWhereWithAggregatesInput = {
    AND?: TrainingCategoryScalarWhereWithAggregatesInput | TrainingCategoryScalarWhereWithAggregatesInput[]
    OR?: TrainingCategoryScalarWhereWithAggregatesInput[]
    NOT?: TrainingCategoryScalarWhereWithAggregatesInput | TrainingCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrainingCategory"> | string
    name?: StringWithAggregatesFilter<"TrainingCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TrainingCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TrainingCategory"> | Date | string
    clubId?: StringWithAggregatesFilter<"TrainingCategory"> | string
  }

  export type TrainingWhereInput = {
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    id?: StringFilter<"Training"> | string
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    date?: DateTimeFilter<"Training"> | Date | string
    time?: StringFilter<"Training"> | string
    location?: StringNullableFilter<"Training"> | string | null
    notes?: StringNullableFilter<"Training"> | string | null
    status?: EnumTrainingStatusFilter<"Training"> | $Enums.TrainingStatus
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    clubId?: StringFilter<"Training"> | string
    teamId?: StringFilter<"Training"> | string
    categoryId?: StringFilter<"Training"> | string
    createdById?: StringFilter<"Training"> | string
    type?: StringFilter<"Training"> | string
    attendances?: PlayerAttendanceListRelationFilter
    category?: XOR<TrainingCategoryScalarRelationFilter, TrainingCategoryWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    exercises?: TrainingExerciseListRelationFilter
  }

  export type TrainingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    type?: SortOrder
    attendances?: PlayerAttendanceOrderByRelationAggregateInput
    category?: TrainingCategoryOrderByWithRelationInput
    club?: ClubOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    exercises?: TrainingExerciseOrderByRelationAggregateInput
  }

  export type TrainingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    date?: DateTimeFilter<"Training"> | Date | string
    time?: StringFilter<"Training"> | string
    location?: StringNullableFilter<"Training"> | string | null
    notes?: StringNullableFilter<"Training"> | string | null
    status?: EnumTrainingStatusFilter<"Training"> | $Enums.TrainingStatus
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    clubId?: StringFilter<"Training"> | string
    teamId?: StringFilter<"Training"> | string
    categoryId?: StringFilter<"Training"> | string
    createdById?: StringFilter<"Training"> | string
    type?: StringFilter<"Training"> | string
    attendances?: PlayerAttendanceListRelationFilter
    category?: XOR<TrainingCategoryScalarRelationFilter, TrainingCategoryWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    exercises?: TrainingExerciseListRelationFilter
  }, "id">

  export type TrainingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    type?: SortOrder
    _count?: TrainingCountOrderByAggregateInput
    _max?: TrainingMaxOrderByAggregateInput
    _min?: TrainingMinOrderByAggregateInput
  }

  export type TrainingScalarWhereWithAggregatesInput = {
    AND?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    OR?: TrainingScalarWhereWithAggregatesInput[]
    NOT?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Training"> | string
    title?: StringWithAggregatesFilter<"Training"> | string
    description?: StringNullableWithAggregatesFilter<"Training"> | string | null
    date?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    time?: StringWithAggregatesFilter<"Training"> | string
    location?: StringNullableWithAggregatesFilter<"Training"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Training"> | string | null
    status?: EnumTrainingStatusWithAggregatesFilter<"Training"> | $Enums.TrainingStatus
    createdAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    clubId?: StringWithAggregatesFilter<"Training"> | string
    teamId?: StringWithAggregatesFilter<"Training"> | string
    categoryId?: StringWithAggregatesFilter<"Training"> | string
    createdById?: StringWithAggregatesFilter<"Training"> | string
    type?: StringWithAggregatesFilter<"Training"> | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    title?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    authorId?: StringFilter<"Exercise"> | string
    clubId?: StringFilter<"Exercise"> | string
    categoryId?: StringFilter<"Exercise"> | string
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    length?: FloatNullableFilter<"Exercise"> | number | null
    width?: FloatNullableFilter<"Exercise"> | number | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<ExerciseCategoryScalarRelationFilter, ExerciseCategoryWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    mediaItems?: MediaItemListRelationFilter
    trainings?: TrainingExerciseListRelationFilter
    tags?: ExerciseTagListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    clubId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    category?: ExerciseCategoryOrderByWithRelationInput
    club?: ClubOrderByWithRelationInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
    trainings?: TrainingExerciseOrderByRelationAggregateInput
    tags?: ExerciseTagOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    title?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    authorId?: StringFilter<"Exercise"> | string
    clubId?: StringFilter<"Exercise"> | string
    categoryId?: StringFilter<"Exercise"> | string
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    length?: FloatNullableFilter<"Exercise"> | number | null
    width?: FloatNullableFilter<"Exercise"> | number | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<ExerciseCategoryScalarRelationFilter, ExerciseCategoryWhereInput>
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    mediaItems?: MediaItemListRelationFilter
    trainings?: TrainingExerciseListRelationFilter
    tags?: ExerciseTagListRelationFilter
  }, "id">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    clubId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    title?: StringWithAggregatesFilter<"Exercise"> | string
    description?: StringWithAggregatesFilter<"Exercise"> | string
    authorId?: StringWithAggregatesFilter<"Exercise"> | string
    clubId?: StringWithAggregatesFilter<"Exercise"> | string
    categoryId?: StringWithAggregatesFilter<"Exercise"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    length?: FloatNullableWithAggregatesFilter<"Exercise"> | number | null
    width?: FloatNullableWithAggregatesFilter<"Exercise"> | number | null
  }

  export type ExerciseCategoryWhereInput = {
    AND?: ExerciseCategoryWhereInput | ExerciseCategoryWhereInput[]
    OR?: ExerciseCategoryWhereInput[]
    NOT?: ExerciseCategoryWhereInput | ExerciseCategoryWhereInput[]
    id?: StringFilter<"ExerciseCategory"> | string
    name?: StringFilter<"ExerciseCategory"> | string
    createdAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    clubId?: StringFilter<"ExerciseCategory"> | string
    exercises?: ExerciseListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    tags?: ExerciseTagListRelationFilter
  }

  export type ExerciseCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    club?: ClubOrderByWithRelationInput
    tags?: ExerciseTagOrderByRelationAggregateInput
  }

  export type ExerciseCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseCategoryWhereInput | ExerciseCategoryWhereInput[]
    OR?: ExerciseCategoryWhereInput[]
    NOT?: ExerciseCategoryWhereInput | ExerciseCategoryWhereInput[]
    name?: StringFilter<"ExerciseCategory"> | string
    createdAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    clubId?: StringFilter<"ExerciseCategory"> | string
    exercises?: ExerciseListRelationFilter
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    tags?: ExerciseTagListRelationFilter
  }, "id">

  export type ExerciseCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    _count?: ExerciseCategoryCountOrderByAggregateInput
    _max?: ExerciseCategoryMaxOrderByAggregateInput
    _min?: ExerciseCategoryMinOrderByAggregateInput
  }

  export type ExerciseCategoryScalarWhereWithAggregatesInput = {
    AND?: ExerciseCategoryScalarWhereWithAggregatesInput | ExerciseCategoryScalarWhereWithAggregatesInput[]
    OR?: ExerciseCategoryScalarWhereWithAggregatesInput[]
    NOT?: ExerciseCategoryScalarWhereWithAggregatesInput | ExerciseCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExerciseCategory"> | string
    name?: StringWithAggregatesFilter<"ExerciseCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ExerciseCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExerciseCategory"> | Date | string
    clubId?: StringWithAggregatesFilter<"ExerciseCategory"> | string
  }

  export type ExerciseTagWhereInput = {
    AND?: ExerciseTagWhereInput | ExerciseTagWhereInput[]
    OR?: ExerciseTagWhereInput[]
    NOT?: ExerciseTagWhereInput | ExerciseTagWhereInput[]
    id?: StringFilter<"ExerciseTag"> | string
    name?: StringFilter<"ExerciseTag"> | string
    createdAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    clubId?: StringFilter<"ExerciseTag"> | string
    exerciseCategoryId?: StringFilter<"ExerciseTag"> | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    exerciseCategory?: XOR<ExerciseCategoryScalarRelationFilter, ExerciseCategoryWhereInput>
    exercises?: ExerciseListRelationFilter
  }

  export type ExerciseTagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exerciseCategoryId?: SortOrder
    club?: ClubOrderByWithRelationInput
    exerciseCategory?: ExerciseCategoryOrderByWithRelationInput
    exercises?: ExerciseOrderByRelationAggregateInput
  }

  export type ExerciseTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseTagWhereInput | ExerciseTagWhereInput[]
    OR?: ExerciseTagWhereInput[]
    NOT?: ExerciseTagWhereInput | ExerciseTagWhereInput[]
    name?: StringFilter<"ExerciseTag"> | string
    createdAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    clubId?: StringFilter<"ExerciseTag"> | string
    exerciseCategoryId?: StringFilter<"ExerciseTag"> | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    exerciseCategory?: XOR<ExerciseCategoryScalarRelationFilter, ExerciseCategoryWhereInput>
    exercises?: ExerciseListRelationFilter
  }, "id">

  export type ExerciseTagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exerciseCategoryId?: SortOrder
    _count?: ExerciseTagCountOrderByAggregateInput
    _max?: ExerciseTagMaxOrderByAggregateInput
    _min?: ExerciseTagMinOrderByAggregateInput
  }

  export type ExerciseTagScalarWhereWithAggregatesInput = {
    AND?: ExerciseTagScalarWhereWithAggregatesInput | ExerciseTagScalarWhereWithAggregatesInput[]
    OR?: ExerciseTagScalarWhereWithAggregatesInput[]
    NOT?: ExerciseTagScalarWhereWithAggregatesInput | ExerciseTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExerciseTag"> | string
    name?: StringWithAggregatesFilter<"ExerciseTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ExerciseTag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExerciseTag"> | Date | string
    clubId?: StringWithAggregatesFilter<"ExerciseTag"> | string
    exerciseCategoryId?: StringWithAggregatesFilter<"ExerciseTag"> | string
  }

  export type TrainingExerciseWhereInput = {
    AND?: TrainingExerciseWhereInput | TrainingExerciseWhereInput[]
    OR?: TrainingExerciseWhereInput[]
    NOT?: TrainingExerciseWhereInput | TrainingExerciseWhereInput[]
    id?: StringFilter<"TrainingExercise"> | string
    position?: IntFilter<"TrainingExercise"> | number
    trainingId?: StringFilter<"TrainingExercise"> | string
    exerciseId?: StringFilter<"TrainingExercise"> | string
    notes?: StringNullableFilter<"TrainingExercise"> | string | null
    createdAt?: DateTimeFilter<"TrainingExercise"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingExercise"> | Date | string
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }

  export type TrainingExerciseOrderByWithRelationInput = {
    id?: SortOrder
    position?: SortOrder
    trainingId?: SortOrder
    exerciseId?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    exercise?: ExerciseOrderByWithRelationInput
    training?: TrainingOrderByWithRelationInput
  }

  export type TrainingExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trainingId_exerciseId?: TrainingExerciseTrainingIdExerciseIdCompoundUniqueInput
    AND?: TrainingExerciseWhereInput | TrainingExerciseWhereInput[]
    OR?: TrainingExerciseWhereInput[]
    NOT?: TrainingExerciseWhereInput | TrainingExerciseWhereInput[]
    position?: IntFilter<"TrainingExercise"> | number
    trainingId?: StringFilter<"TrainingExercise"> | string
    exerciseId?: StringFilter<"TrainingExercise"> | string
    notes?: StringNullableFilter<"TrainingExercise"> | string | null
    createdAt?: DateTimeFilter<"TrainingExercise"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingExercise"> | Date | string
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }, "id" | "trainingId_exerciseId">

  export type TrainingExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    position?: SortOrder
    trainingId?: SortOrder
    exerciseId?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingExerciseCountOrderByAggregateInput
    _avg?: TrainingExerciseAvgOrderByAggregateInput
    _max?: TrainingExerciseMaxOrderByAggregateInput
    _min?: TrainingExerciseMinOrderByAggregateInput
    _sum?: TrainingExerciseSumOrderByAggregateInput
  }

  export type TrainingExerciseScalarWhereWithAggregatesInput = {
    AND?: TrainingExerciseScalarWhereWithAggregatesInput | TrainingExerciseScalarWhereWithAggregatesInput[]
    OR?: TrainingExerciseScalarWhereWithAggregatesInput[]
    NOT?: TrainingExerciseScalarWhereWithAggregatesInput | TrainingExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrainingExercise"> | string
    position?: IntWithAggregatesFilter<"TrainingExercise"> | number
    trainingId?: StringWithAggregatesFilter<"TrainingExercise"> | string
    exerciseId?: StringWithAggregatesFilter<"TrainingExercise"> | string
    notes?: StringNullableWithAggregatesFilter<"TrainingExercise"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TrainingExercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TrainingExercise"> | Date | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: StringFilter<"Player"> | string
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    middleName?: StringNullableFilter<"Player"> | string | null
    number?: IntNullableFilter<"Player"> | number | null
    position?: StringNullableFilter<"Player"> | string | null
    strongFoot?: StringNullableFilter<"Player"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Player"> | Date | string | null
    academyJoinDate?: DateTimeNullableFilter<"Player"> | Date | string | null
    nationality?: StringNullableFilter<"Player"> | string | null
    imageUrl?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    birthCertificateNumber?: StringNullableFilter<"Player"> | string | null
    pinCode?: StringFilter<"Player"> | string
    telegramId?: StringNullableFilter<"Player"> | string | null
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
    teamId?: StringFilter<"Player"> | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    attendances?: PlayerAttendanceListRelationFilter
    documents?: PlayerDocumentListRelationFilter
    matchStats?: PlayerMatchStatListRelationFilter
    morningSurveys?: MorningSurveyResponseListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    strongFoot?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    academyJoinDate?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    birthCertificateNumber?: SortOrderInput | SortOrder
    pinCode?: SortOrder
    telegramId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    attendances?: PlayerAttendanceOrderByRelationAggregateInput
    documents?: PlayerDocumentOrderByRelationAggregateInput
    matchStats?: PlayerMatchStatOrderByRelationAggregateInput
    morningSurveys?: MorningSurveyResponseOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telegramId?: string
    pinCode_teamId?: PlayerPinCodeTeamIdCompoundUniqueInput
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    middleName?: StringNullableFilter<"Player"> | string | null
    number?: IntNullableFilter<"Player"> | number | null
    position?: StringNullableFilter<"Player"> | string | null
    strongFoot?: StringNullableFilter<"Player"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Player"> | Date | string | null
    academyJoinDate?: DateTimeNullableFilter<"Player"> | Date | string | null
    nationality?: StringNullableFilter<"Player"> | string | null
    imageUrl?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    birthCertificateNumber?: StringNullableFilter<"Player"> | string | null
    pinCode?: StringFilter<"Player"> | string
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
    teamId?: StringFilter<"Player"> | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    attendances?: PlayerAttendanceListRelationFilter
    documents?: PlayerDocumentListRelationFilter
    matchStats?: PlayerMatchStatListRelationFilter
    morningSurveys?: MorningSurveyResponseListRelationFilter
  }, "id" | "telegramId" | "pinCode_teamId">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    strongFoot?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    academyJoinDate?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    birthCertificateNumber?: SortOrderInput | SortOrder
    pinCode?: SortOrder
    telegramId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Player"> | string
    firstName?: StringWithAggregatesFilter<"Player"> | string
    lastName?: StringWithAggregatesFilter<"Player"> | string
    middleName?: StringNullableWithAggregatesFilter<"Player"> | string | null
    number?: IntNullableWithAggregatesFilter<"Player"> | number | null
    position?: StringNullableWithAggregatesFilter<"Player"> | string | null
    strongFoot?: StringNullableWithAggregatesFilter<"Player"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    academyJoinDate?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    nationality?: StringNullableWithAggregatesFilter<"Player"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Player"> | string | null
    status?: StringNullableWithAggregatesFilter<"Player"> | string | null
    birthCertificateNumber?: StringNullableWithAggregatesFilter<"Player"> | string | null
    pinCode?: StringWithAggregatesFilter<"Player"> | string
    telegramId?: StringNullableWithAggregatesFilter<"Player"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    teamId?: StringWithAggregatesFilter<"Player"> | string
  }

  export type PlayerDocumentWhereInput = {
    AND?: PlayerDocumentWhereInput | PlayerDocumentWhereInput[]
    OR?: PlayerDocumentWhereInput[]
    NOT?: PlayerDocumentWhereInput | PlayerDocumentWhereInput[]
    id?: StringFilter<"PlayerDocument"> | string
    name?: StringFilter<"PlayerDocument"> | string
    type?: EnumDocumentTypeFilter<"PlayerDocument"> | $Enums.DocumentType
    url?: StringFilter<"PlayerDocument"> | string
    publicUrl?: StringFilter<"PlayerDocument"> | string
    size?: IntFilter<"PlayerDocument"> | number
    createdAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    playerId?: StringFilter<"PlayerDocument"> | string
    clubId?: StringFilter<"PlayerDocument"> | string
    uploadedById?: StringFilter<"PlayerDocument"> | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PlayerDocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    publicUrl?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerId?: SortOrder
    clubId?: SortOrder
    uploadedById?: SortOrder
    player?: PlayerOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type PlayerDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlayerDocumentWhereInput | PlayerDocumentWhereInput[]
    OR?: PlayerDocumentWhereInput[]
    NOT?: PlayerDocumentWhereInput | PlayerDocumentWhereInput[]
    name?: StringFilter<"PlayerDocument"> | string
    type?: EnumDocumentTypeFilter<"PlayerDocument"> | $Enums.DocumentType
    url?: StringFilter<"PlayerDocument"> | string
    publicUrl?: StringFilter<"PlayerDocument"> | string
    size?: IntFilter<"PlayerDocument"> | number
    createdAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    playerId?: StringFilter<"PlayerDocument"> | string
    clubId?: StringFilter<"PlayerDocument"> | string
    uploadedById?: StringFilter<"PlayerDocument"> | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PlayerDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    publicUrl?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerId?: SortOrder
    clubId?: SortOrder
    uploadedById?: SortOrder
    _count?: PlayerDocumentCountOrderByAggregateInput
    _avg?: PlayerDocumentAvgOrderByAggregateInput
    _max?: PlayerDocumentMaxOrderByAggregateInput
    _min?: PlayerDocumentMinOrderByAggregateInput
    _sum?: PlayerDocumentSumOrderByAggregateInput
  }

  export type PlayerDocumentScalarWhereWithAggregatesInput = {
    AND?: PlayerDocumentScalarWhereWithAggregatesInput | PlayerDocumentScalarWhereWithAggregatesInput[]
    OR?: PlayerDocumentScalarWhereWithAggregatesInput[]
    NOT?: PlayerDocumentScalarWhereWithAggregatesInput | PlayerDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerDocument"> | string
    name?: StringWithAggregatesFilter<"PlayerDocument"> | string
    type?: EnumDocumentTypeWithAggregatesFilter<"PlayerDocument"> | $Enums.DocumentType
    url?: StringWithAggregatesFilter<"PlayerDocument"> | string
    publicUrl?: StringWithAggregatesFilter<"PlayerDocument"> | string
    size?: IntWithAggregatesFilter<"PlayerDocument"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PlayerDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerDocument"> | Date | string
    playerId?: StringWithAggregatesFilter<"PlayerDocument"> | string
    clubId?: StringWithAggregatesFilter<"PlayerDocument"> | string
    uploadedById?: StringWithAggregatesFilter<"PlayerDocument"> | string
  }

  export type TeamCoachWhereInput = {
    AND?: TeamCoachWhereInput | TeamCoachWhereInput[]
    OR?: TeamCoachWhereInput[]
    NOT?: TeamCoachWhereInput | TeamCoachWhereInput[]
    id?: StringFilter<"TeamCoach"> | string
    teamId?: StringFilter<"TeamCoach"> | string
    userId?: StringFilter<"TeamCoach"> | string
    role?: StringNullableFilter<"TeamCoach"> | string | null
    createdAt?: DateTimeFilter<"TeamCoach"> | Date | string
    updatedAt?: DateTimeFilter<"TeamCoach"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TeamCoachOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TeamCoachWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamId_userId?: TeamCoachTeamIdUserIdCompoundUniqueInput
    AND?: TeamCoachWhereInput | TeamCoachWhereInput[]
    OR?: TeamCoachWhereInput[]
    NOT?: TeamCoachWhereInput | TeamCoachWhereInput[]
    teamId?: StringFilter<"TeamCoach"> | string
    userId?: StringFilter<"TeamCoach"> | string
    role?: StringNullableFilter<"TeamCoach"> | string | null
    createdAt?: DateTimeFilter<"TeamCoach"> | Date | string
    updatedAt?: DateTimeFilter<"TeamCoach"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "teamId_userId">

  export type TeamCoachOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCoachCountOrderByAggregateInput
    _max?: TeamCoachMaxOrderByAggregateInput
    _min?: TeamCoachMinOrderByAggregateInput
  }

  export type TeamCoachScalarWhereWithAggregatesInput = {
    AND?: TeamCoachScalarWhereWithAggregatesInput | TeamCoachScalarWhereWithAggregatesInput[]
    OR?: TeamCoachScalarWhereWithAggregatesInput[]
    NOT?: TeamCoachScalarWhereWithAggregatesInput | TeamCoachScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamCoach"> | string
    teamId?: StringWithAggregatesFilter<"TeamCoach"> | string
    userId?: StringWithAggregatesFilter<"TeamCoach"> | string
    role?: StringNullableWithAggregatesFilter<"TeamCoach"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TeamCoach"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamCoach"> | Date | string
  }

  export type PlayerAttendanceWhereInput = {
    AND?: PlayerAttendanceWhereInput | PlayerAttendanceWhereInput[]
    OR?: PlayerAttendanceWhereInput[]
    NOT?: PlayerAttendanceWhereInput | PlayerAttendanceWhereInput[]
    id?: StringFilter<"PlayerAttendance"> | string
    playerId?: StringFilter<"PlayerAttendance"> | string
    trainingId?: StringFilter<"PlayerAttendance"> | string
    status?: EnumAttendanceStatusFilter<"PlayerAttendance"> | $Enums.AttendanceStatus
    comment?: StringNullableFilter<"PlayerAttendance"> | string | null
    createdAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }

  export type PlayerAttendanceOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    trainingId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    player?: PlayerOrderByWithRelationInput
    training?: TrainingOrderByWithRelationInput
  }

  export type PlayerAttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    playerId_trainingId?: PlayerAttendancePlayerIdTrainingIdCompoundUniqueInput
    AND?: PlayerAttendanceWhereInput | PlayerAttendanceWhereInput[]
    OR?: PlayerAttendanceWhereInput[]
    NOT?: PlayerAttendanceWhereInput | PlayerAttendanceWhereInput[]
    playerId?: StringFilter<"PlayerAttendance"> | string
    trainingId?: StringFilter<"PlayerAttendance"> | string
    status?: EnumAttendanceStatusFilter<"PlayerAttendance"> | $Enums.AttendanceStatus
    comment?: StringNullableFilter<"PlayerAttendance"> | string | null
    createdAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }, "id" | "playerId_trainingId">

  export type PlayerAttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    trainingId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlayerAttendanceCountOrderByAggregateInput
    _max?: PlayerAttendanceMaxOrderByAggregateInput
    _min?: PlayerAttendanceMinOrderByAggregateInput
  }

  export type PlayerAttendanceScalarWhereWithAggregatesInput = {
    AND?: PlayerAttendanceScalarWhereWithAggregatesInput | PlayerAttendanceScalarWhereWithAggregatesInput[]
    OR?: PlayerAttendanceScalarWhereWithAggregatesInput[]
    NOT?: PlayerAttendanceScalarWhereWithAggregatesInput | PlayerAttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerAttendance"> | string
    playerId?: StringWithAggregatesFilter<"PlayerAttendance"> | string
    trainingId?: StringWithAggregatesFilter<"PlayerAttendance"> | string
    status?: EnumAttendanceStatusWithAggregatesFilter<"PlayerAttendance"> | $Enums.AttendanceStatus
    comment?: StringNullableWithAggregatesFilter<"PlayerAttendance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PlayerAttendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerAttendance"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    competitionType?: EnumCompetitionTypeFilter<"Match"> | $Enums.CompetitionType
    date?: DateTimeFilter<"Match"> | Date | string
    time?: StringFilter<"Match"> | string
    isHome?: BoolFilter<"Match"> | boolean
    teamId?: StringFilter<"Match"> | string
    opponentName?: StringFilter<"Match"> | string
    teamGoals?: IntFilter<"Match"> | number
    opponentGoals?: IntFilter<"Match"> | number
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    clubId?: StringFilter<"Match"> | string
    formation?: StringNullableFilter<"Match"> | string | null
    gameFormat?: StringNullableFilter<"Match"> | string | null
    markerColor?: StringNullableFilter<"Match"> | string | null
    notes?: StringNullableFilter<"Match"> | string | null
    playerPositions?: JsonNullableFilter<"Match">
    positionAssignments?: JsonNullableFilter<"Match">
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    playerStats?: PlayerMatchStatListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    competitionType?: SortOrder
    date?: SortOrder
    time?: SortOrder
    isHome?: SortOrder
    teamId?: SortOrder
    opponentName?: SortOrder
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    formation?: SortOrderInput | SortOrder
    gameFormat?: SortOrderInput | SortOrder
    markerColor?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    playerPositions?: SortOrderInput | SortOrder
    positionAssignments?: SortOrderInput | SortOrder
    club?: ClubOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    playerStats?: PlayerMatchStatOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    competitionType?: EnumCompetitionTypeFilter<"Match"> | $Enums.CompetitionType
    date?: DateTimeFilter<"Match"> | Date | string
    time?: StringFilter<"Match"> | string
    isHome?: BoolFilter<"Match"> | boolean
    teamId?: StringFilter<"Match"> | string
    opponentName?: StringFilter<"Match"> | string
    teamGoals?: IntFilter<"Match"> | number
    opponentGoals?: IntFilter<"Match"> | number
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    clubId?: StringFilter<"Match"> | string
    formation?: StringNullableFilter<"Match"> | string | null
    gameFormat?: StringNullableFilter<"Match"> | string | null
    markerColor?: StringNullableFilter<"Match"> | string | null
    notes?: StringNullableFilter<"Match"> | string | null
    playerPositions?: JsonNullableFilter<"Match">
    positionAssignments?: JsonNullableFilter<"Match">
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    playerStats?: PlayerMatchStatListRelationFilter
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    competitionType?: SortOrder
    date?: SortOrder
    time?: SortOrder
    isHome?: SortOrder
    teamId?: SortOrder
    opponentName?: SortOrder
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    formation?: SortOrderInput | SortOrder
    gameFormat?: SortOrderInput | SortOrder
    markerColor?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    playerPositions?: SortOrderInput | SortOrder
    positionAssignments?: SortOrderInput | SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    competitionType?: EnumCompetitionTypeWithAggregatesFilter<"Match"> | $Enums.CompetitionType
    date?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    time?: StringWithAggregatesFilter<"Match"> | string
    isHome?: BoolWithAggregatesFilter<"Match"> | boolean
    teamId?: StringWithAggregatesFilter<"Match"> | string
    opponentName?: StringWithAggregatesFilter<"Match"> | string
    teamGoals?: IntWithAggregatesFilter<"Match"> | number
    opponentGoals?: IntWithAggregatesFilter<"Match"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    clubId?: StringWithAggregatesFilter<"Match"> | string
    formation?: StringNullableWithAggregatesFilter<"Match"> | string | null
    gameFormat?: StringNullableWithAggregatesFilter<"Match"> | string | null
    markerColor?: StringNullableWithAggregatesFilter<"Match"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Match"> | string | null
    playerPositions?: JsonNullableWithAggregatesFilter<"Match">
    positionAssignments?: JsonNullableWithAggregatesFilter<"Match">
  }

  export type PlayerMatchStatWhereInput = {
    AND?: PlayerMatchStatWhereInput | PlayerMatchStatWhereInput[]
    OR?: PlayerMatchStatWhereInput[]
    NOT?: PlayerMatchStatWhereInput | PlayerMatchStatWhereInput[]
    id?: StringFilter<"PlayerMatchStat"> | string
    matchId?: StringFilter<"PlayerMatchStat"> | string
    playerId?: StringFilter<"PlayerMatchStat"> | string
    isStarter?: BoolFilter<"PlayerMatchStat"> | boolean
    minutesPlayed?: IntFilter<"PlayerMatchStat"> | number
    goals?: IntFilter<"PlayerMatchStat"> | number
    assists?: IntFilter<"PlayerMatchStat"> | number
    yellowCards?: IntFilter<"PlayerMatchStat"> | number
    redCards?: IntFilter<"PlayerMatchStat"> | number
    createdAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }

  export type PlayerMatchStatOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    playerId?: SortOrder
    isStarter?: SortOrder
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
  }

  export type PlayerMatchStatWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    matchId_playerId?: PlayerMatchStatMatchIdPlayerIdCompoundUniqueInput
    AND?: PlayerMatchStatWhereInput | PlayerMatchStatWhereInput[]
    OR?: PlayerMatchStatWhereInput[]
    NOT?: PlayerMatchStatWhereInput | PlayerMatchStatWhereInput[]
    matchId?: StringFilter<"PlayerMatchStat"> | string
    playerId?: StringFilter<"PlayerMatchStat"> | string
    isStarter?: BoolFilter<"PlayerMatchStat"> | boolean
    minutesPlayed?: IntFilter<"PlayerMatchStat"> | number
    goals?: IntFilter<"PlayerMatchStat"> | number
    assists?: IntFilter<"PlayerMatchStat"> | number
    yellowCards?: IntFilter<"PlayerMatchStat"> | number
    redCards?: IntFilter<"PlayerMatchStat"> | number
    createdAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
  }, "id" | "matchId_playerId">

  export type PlayerMatchStatOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    playerId?: SortOrder
    isStarter?: SortOrder
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlayerMatchStatCountOrderByAggregateInput
    _avg?: PlayerMatchStatAvgOrderByAggregateInput
    _max?: PlayerMatchStatMaxOrderByAggregateInput
    _min?: PlayerMatchStatMinOrderByAggregateInput
    _sum?: PlayerMatchStatSumOrderByAggregateInput
  }

  export type PlayerMatchStatScalarWhereWithAggregatesInput = {
    AND?: PlayerMatchStatScalarWhereWithAggregatesInput | PlayerMatchStatScalarWhereWithAggregatesInput[]
    OR?: PlayerMatchStatScalarWhereWithAggregatesInput[]
    NOT?: PlayerMatchStatScalarWhereWithAggregatesInput | PlayerMatchStatScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerMatchStat"> | string
    matchId?: StringWithAggregatesFilter<"PlayerMatchStat"> | string
    playerId?: StringWithAggregatesFilter<"PlayerMatchStat"> | string
    isStarter?: BoolWithAggregatesFilter<"PlayerMatchStat"> | boolean
    minutesPlayed?: IntWithAggregatesFilter<"PlayerMatchStat"> | number
    goals?: IntWithAggregatesFilter<"PlayerMatchStat"> | number
    assists?: IntWithAggregatesFilter<"PlayerMatchStat"> | number
    yellowCards?: IntWithAggregatesFilter<"PlayerMatchStat"> | number
    redCards?: IntWithAggregatesFilter<"PlayerMatchStat"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PlayerMatchStat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerMatchStat"> | Date | string
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: StringFilter<"Schedule"> | string
    teamId?: StringFilter<"Schedule"> | string
    date?: DateTimeFilter<"Schedule"> | Date | string
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    events?: ScheduleEventListRelationFilter
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: ScheduleEventOrderByRelationAggregateInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamId_date?: ScheduleTeamIdDateCompoundUniqueInput
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    teamId?: StringFilter<"Schedule"> | string
    date?: DateTimeFilter<"Schedule"> | Date | string
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    events?: ScheduleEventListRelationFilter
  }, "id" | "teamId_date">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Schedule"> | string
    teamId?: StringWithAggregatesFilter<"Schedule"> | string
    date?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  }

  export type ScheduleEventWhereInput = {
    AND?: ScheduleEventWhereInput | ScheduleEventWhereInput[]
    OR?: ScheduleEventWhereInput[]
    NOT?: ScheduleEventWhereInput | ScheduleEventWhereInput[]
    id?: StringFilter<"ScheduleEvent"> | string
    scheduleId?: StringFilter<"ScheduleEvent"> | string
    type?: StringFilter<"ScheduleEvent"> | string
    time?: StringFilter<"ScheduleEvent"> | string
    description?: StringFilter<"ScheduleEvent"> | string
    createdAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
    schedule?: XOR<ScheduleScalarRelationFilter, ScheduleWhereInput>
  }

  export type ScheduleEventOrderByWithRelationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schedule?: ScheduleOrderByWithRelationInput
  }

  export type ScheduleEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleEventWhereInput | ScheduleEventWhereInput[]
    OR?: ScheduleEventWhereInput[]
    NOT?: ScheduleEventWhereInput | ScheduleEventWhereInput[]
    scheduleId?: StringFilter<"ScheduleEvent"> | string
    type?: StringFilter<"ScheduleEvent"> | string
    time?: StringFilter<"ScheduleEvent"> | string
    description?: StringFilter<"ScheduleEvent"> | string
    createdAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
    schedule?: XOR<ScheduleScalarRelationFilter, ScheduleWhereInput>
  }, "id">

  export type ScheduleEventOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleEventCountOrderByAggregateInput
    _max?: ScheduleEventMaxOrderByAggregateInput
    _min?: ScheduleEventMinOrderByAggregateInput
  }

  export type ScheduleEventScalarWhereWithAggregatesInput = {
    AND?: ScheduleEventScalarWhereWithAggregatesInput | ScheduleEventScalarWhereWithAggregatesInput[]
    OR?: ScheduleEventScalarWhereWithAggregatesInput[]
    NOT?: ScheduleEventScalarWhereWithAggregatesInput | ScheduleEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScheduleEvent"> | string
    scheduleId?: StringWithAggregatesFilter<"ScheduleEvent"> | string
    type?: StringWithAggregatesFilter<"ScheduleEvent"> | string
    time?: StringWithAggregatesFilter<"ScheduleEvent"> | string
    description?: StringWithAggregatesFilter<"ScheduleEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduleEvent"> | Date | string
  }

  export type MorningSurveyResponseWhereInput = {
    AND?: MorningSurveyResponseWhereInput | MorningSurveyResponseWhereInput[]
    OR?: MorningSurveyResponseWhereInput[]
    NOT?: MorningSurveyResponseWhereInput | MorningSurveyResponseWhereInput[]
    id?: StringFilter<"MorningSurveyResponse"> | string
    playerId?: StringFilter<"MorningSurveyResponse"> | string
    createdAt?: DateTimeFilter<"MorningSurveyResponse"> | Date | string
    readAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    sleepDuration?: FloatFilter<"MorningSurveyResponse"> | number
    sleepQuality?: IntFilter<"MorningSurveyResponse"> | number
    recovery?: IntFilter<"MorningSurveyResponse"> | number
    mood?: IntFilter<"MorningSurveyResponse"> | number
    muscleCondition?: IntFilter<"MorningSurveyResponse"> | number
    surveyId?: StringFilter<"MorningSurveyResponse"> | string
    tenantId?: StringFilter<"MorningSurveyResponse"> | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    painAreas?: PainAreaListRelationFilter
  }

  export type MorningSurveyResponseOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
    surveyId?: SortOrder
    tenantId?: SortOrder
    player?: PlayerOrderByWithRelationInput
    painAreas?: PainAreaOrderByRelationAggregateInput
  }

  export type MorningSurveyResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MorningSurveyResponseWhereInput | MorningSurveyResponseWhereInput[]
    OR?: MorningSurveyResponseWhereInput[]
    NOT?: MorningSurveyResponseWhereInput | MorningSurveyResponseWhereInput[]
    playerId?: StringFilter<"MorningSurveyResponse"> | string
    createdAt?: DateTimeFilter<"MorningSurveyResponse"> | Date | string
    readAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    sleepDuration?: FloatFilter<"MorningSurveyResponse"> | number
    sleepQuality?: IntFilter<"MorningSurveyResponse"> | number
    recovery?: IntFilter<"MorningSurveyResponse"> | number
    mood?: IntFilter<"MorningSurveyResponse"> | number
    muscleCondition?: IntFilter<"MorningSurveyResponse"> | number
    surveyId?: StringFilter<"MorningSurveyResponse"> | string
    tenantId?: StringFilter<"MorningSurveyResponse"> | string
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    painAreas?: PainAreaListRelationFilter
  }, "id">

  export type MorningSurveyResponseOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
    surveyId?: SortOrder
    tenantId?: SortOrder
    _count?: MorningSurveyResponseCountOrderByAggregateInput
    _avg?: MorningSurveyResponseAvgOrderByAggregateInput
    _max?: MorningSurveyResponseMaxOrderByAggregateInput
    _min?: MorningSurveyResponseMinOrderByAggregateInput
    _sum?: MorningSurveyResponseSumOrderByAggregateInput
  }

  export type MorningSurveyResponseScalarWhereWithAggregatesInput = {
    AND?: MorningSurveyResponseScalarWhereWithAggregatesInput | MorningSurveyResponseScalarWhereWithAggregatesInput[]
    OR?: MorningSurveyResponseScalarWhereWithAggregatesInput[]
    NOT?: MorningSurveyResponseScalarWhereWithAggregatesInput | MorningSurveyResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MorningSurveyResponse"> | string
    playerId?: StringWithAggregatesFilter<"MorningSurveyResponse"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MorningSurveyResponse"> | Date | string
    readAt?: DateTimeNullableWithAggregatesFilter<"MorningSurveyResponse"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"MorningSurveyResponse"> | Date | string | null
    sleepDuration?: FloatWithAggregatesFilter<"MorningSurveyResponse"> | number
    sleepQuality?: IntWithAggregatesFilter<"MorningSurveyResponse"> | number
    recovery?: IntWithAggregatesFilter<"MorningSurveyResponse"> | number
    mood?: IntWithAggregatesFilter<"MorningSurveyResponse"> | number
    muscleCondition?: IntWithAggregatesFilter<"MorningSurveyResponse"> | number
    surveyId?: StringWithAggregatesFilter<"MorningSurveyResponse"> | string
    tenantId?: StringWithAggregatesFilter<"MorningSurveyResponse"> | string
  }

  export type PainAreaWhereInput = {
    AND?: PainAreaWhereInput | PainAreaWhereInput[]
    OR?: PainAreaWhereInput[]
    NOT?: PainAreaWhereInput | PainAreaWhereInput[]
    id?: StringFilter<"PainArea"> | string
    surveyId?: StringFilter<"PainArea"> | string
    areaName?: StringFilter<"PainArea"> | string
    painLevel?: IntFilter<"PainArea"> | number
    createdAt?: DateTimeFilter<"PainArea"> | Date | string
    survey?: XOR<MorningSurveyResponseScalarRelationFilter, MorningSurveyResponseWhereInput>
  }

  export type PainAreaOrderByWithRelationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    areaName?: SortOrder
    painLevel?: SortOrder
    createdAt?: SortOrder
    survey?: MorningSurveyResponseOrderByWithRelationInput
  }

  export type PainAreaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PainAreaWhereInput | PainAreaWhereInput[]
    OR?: PainAreaWhereInput[]
    NOT?: PainAreaWhereInput | PainAreaWhereInput[]
    surveyId?: StringFilter<"PainArea"> | string
    areaName?: StringFilter<"PainArea"> | string
    painLevel?: IntFilter<"PainArea"> | number
    createdAt?: DateTimeFilter<"PainArea"> | Date | string
    survey?: XOR<MorningSurveyResponseScalarRelationFilter, MorningSurveyResponseWhereInput>
  }, "id">

  export type PainAreaOrderByWithAggregationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    areaName?: SortOrder
    painLevel?: SortOrder
    createdAt?: SortOrder
    _count?: PainAreaCountOrderByAggregateInput
    _avg?: PainAreaAvgOrderByAggregateInput
    _max?: PainAreaMaxOrderByAggregateInput
    _min?: PainAreaMinOrderByAggregateInput
    _sum?: PainAreaSumOrderByAggregateInput
  }

  export type PainAreaScalarWhereWithAggregatesInput = {
    AND?: PainAreaScalarWhereWithAggregatesInput | PainAreaScalarWhereWithAggregatesInput[]
    OR?: PainAreaScalarWhereWithAggregatesInput[]
    NOT?: PainAreaScalarWhereWithAggregatesInput | PainAreaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PainArea"> | string
    surveyId?: StringWithAggregatesFilter<"PainArea"> | string
    areaName?: StringWithAggregatesFilter<"PainArea"> | string
    painLevel?: IntWithAggregatesFilter<"PainArea"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PainArea"> | Date | string
  }

  export type MuscleAreaWhereInput = {
    AND?: MuscleAreaWhereInput | MuscleAreaWhereInput[]
    OR?: MuscleAreaWhereInput[]
    NOT?: MuscleAreaWhereInput | MuscleAreaWhereInput[]
    id?: StringFilter<"MuscleArea"> | string
    number?: IntFilter<"MuscleArea"> | number
    name?: StringFilter<"MuscleArea"> | string
    view?: StringFilter<"MuscleArea"> | string
    createdAt?: DateTimeFilter<"MuscleArea"> | Date | string
    updatedAt?: DateTimeFilter<"MuscleArea"> | Date | string
  }

  export type MuscleAreaOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    view?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAreaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    number_view?: MuscleAreaNumberViewCompoundUniqueInput
    AND?: MuscleAreaWhereInput | MuscleAreaWhereInput[]
    OR?: MuscleAreaWhereInput[]
    NOT?: MuscleAreaWhereInput | MuscleAreaWhereInput[]
    number?: IntFilter<"MuscleArea"> | number
    name?: StringFilter<"MuscleArea"> | string
    view?: StringFilter<"MuscleArea"> | string
    createdAt?: DateTimeFilter<"MuscleArea"> | Date | string
    updatedAt?: DateTimeFilter<"MuscleArea"> | Date | string
  }, "id" | "number_view">

  export type MuscleAreaOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    view?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MuscleAreaCountOrderByAggregateInput
    _avg?: MuscleAreaAvgOrderByAggregateInput
    _max?: MuscleAreaMaxOrderByAggregateInput
    _min?: MuscleAreaMinOrderByAggregateInput
    _sum?: MuscleAreaSumOrderByAggregateInput
  }

  export type MuscleAreaScalarWhereWithAggregatesInput = {
    AND?: MuscleAreaScalarWhereWithAggregatesInput | MuscleAreaScalarWhereWithAggregatesInput[]
    OR?: MuscleAreaScalarWhereWithAggregatesInput[]
    NOT?: MuscleAreaScalarWhereWithAggregatesInput | MuscleAreaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MuscleArea"> | string
    number?: IntWithAggregatesFilter<"MuscleArea"> | number
    name?: StringWithAggregatesFilter<"MuscleArea"> | string
    view?: StringWithAggregatesFilter<"MuscleArea"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MuscleArea"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MuscleArea"> | Date | string
  }

  export type ClubCreateInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
  }

  export type ClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    matches?: MatchCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    matches?: MatchUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutEventsInput
    createdBy: UserCreateNestedOneWithoutEventsInput
    team?: TeamCreateNestedOneWithoutEventsInput
    mediaItems?: MediaItemCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId?: string | null
    createdById: string
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutEventsNestedInput
    team?: TeamUpdateOneWithoutEventsNestedInput
    mediaItems?: MediaItemUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    mediaItems?: MediaItemUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId?: string | null
    createdById: string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type MediaItemCreateInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicUrl?: string | null
    club: ClubCreateNestedOneWithoutMediaItemsInput
    event?: EventCreateNestedOneWithoutMediaItemsInput
    exercise?: ExerciseCreateNestedOneWithoutMediaItemsInput
    uploadedBy: UserCreateNestedOneWithoutMediaUploadsInput
  }

  export type MediaItemUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    club?: ClubUpdateOneRequiredWithoutMediaItemsNestedInput
    event?: EventUpdateOneWithoutMediaItemsNestedInput
    exercise?: ExerciseUpdateOneWithoutMediaItemsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutMediaUploadsNestedInput
  }

  export type MediaItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemCreateManyInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trainings?: TrainingCreateNestedManyWithoutCategoryInput
    club: ClubCreateNestedOneWithoutTrainingCategoriesInput
  }

  export type TrainingCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    trainings?: TrainingUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TrainingCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainings?: TrainingUpdateManyWithoutCategoryNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingCategoriesNestedInput
  }

  export type TrainingCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    trainings?: TrainingUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TrainingCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
  }

  export type TrainingCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingCreateInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
  }

  export type TrainingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExerciseCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutCategoryInput
    club: ClubCreateNestedOneWithoutExerciseCategoriesInput
    tags?: ExerciseTagCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutCategoryInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutCategoryNestedInput
    club?: ClubUpdateOneRequiredWithoutExerciseCategoriesNestedInput
    tags?: ExerciseTagUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ExerciseCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutCategoryNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ExerciseCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
  }

  export type ExerciseCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseTagCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutExerciseTagsInput
    exerciseCategory: ExerciseCategoryCreateNestedOneWithoutTagsInput
    exercises?: ExerciseCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exerciseCategoryId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutExerciseTagsNestedInput
    exerciseCategory?: ExerciseCategoryUpdateOneRequiredWithoutTagsNestedInput
    exercises?: ExerciseUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exerciseCategoryId: string
  }

  export type ExerciseTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingExerciseCreateInput = {
    id?: string
    position: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutTrainingsInput
    training: TrainingCreateNestedOneWithoutExercisesInput
  }

  export type TrainingExerciseUncheckedCreateInput = {
    id?: string
    position: number
    trainingId: string
    exerciseId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutTrainingsNestedInput
    training?: TrainingUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type TrainingExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    trainingId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingExerciseCreateManyInput = {
    id?: string
    position: number
    trainingId: string
    exerciseId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    trainingId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCreateInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    attendances?: PlayerAttendanceCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    attendances?: PlayerAttendanceUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
  }

  export type PlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerDocumentCreateInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    player: PlayerCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutPlayerDocumentsInput
  }

  export type PlayerDocumentUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playerId: string
    clubId: string
    uploadedById: string
  }

  export type PlayerDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    player?: PlayerUpdateOneRequiredWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutPlayerDocumentsNestedInput
  }

  export type PlayerDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerDocumentCreateManyInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playerId: string
    clubId: string
    uploadedById: string
  }

  export type PlayerDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCoachCreateInput = {
    id?: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutCoachesInput
    user: UserCreateNestedOneWithoutTeamCoachesInput
  }

  export type TeamCoachUncheckedCreateInput = {
    id?: string
    teamId: string
    userId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCoachUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutCoachesNestedInput
    user?: UserUpdateOneRequiredWithoutTeamCoachesNestedInput
  }

  export type TeamCoachUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCoachCreateManyInput = {
    id?: string
    teamId: string
    userId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCoachUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCoachUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerAttendanceCreateInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    player: PlayerCreateNestedOneWithoutAttendancesInput
    training: TrainingCreateNestedOneWithoutAttendancesInput
  }

  export type PlayerAttendanceUncheckedCreateInput = {
    id?: string
    playerId: string
    trainingId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerAttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutAttendancesNestedInput
    training?: TrainingUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type PlayerAttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerAttendanceCreateManyInput = {
    id?: string
    playerId: string
    trainingId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerAttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerAttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club: ClubCreateNestedOneWithoutMatchesInput
    team: TeamCreateNestedOneWithoutMatchesInput
    playerStats?: PlayerMatchStatCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club?: ClubUpdateOneRequiredWithoutMatchesNestedInput
    team?: TeamUpdateOneRequiredWithoutMatchesNestedInput
    playerStats?: PlayerMatchStatUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    teamId?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    teamId?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlayerMatchStatCreateInput = {
    id?: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutPlayerStatsInput
    player: PlayerCreateNestedOneWithoutMatchStatsInput
  }

  export type PlayerMatchStatUncheckedCreateInput = {
    id?: string
    matchId: string
    playerId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerMatchStatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutPlayerStatsNestedInput
    player?: PlayerUpdateOneRequiredWithoutMatchStatsNestedInput
  }

  export type PlayerMatchStatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerMatchStatCreateManyInput = {
    id?: string
    matchId: string
    playerId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerMatchStatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerMatchStatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateInput = {
    id?: string
    teamId: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: ScheduleEventCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: string
    teamId: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: ScheduleEventUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: ScheduleEventUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: ScheduleEventUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleCreateManyInput = {
    id?: string
    teamId: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventCreateInput = {
    id?: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schedule: ScheduleCreateNestedOneWithoutEventsInput
  }

  export type ScheduleEventUncheckedCreateInput = {
    id?: string
    scheduleId: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: ScheduleUpdateOneRequiredWithoutEventsNestedInput
  }

  export type ScheduleEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventCreateManyInput = {
    id?: string
    scheduleId: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MorningSurveyResponseCreateInput = {
    id?: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    player: PlayerCreateNestedOneWithoutMorningSurveysInput
    painAreas?: PainAreaCreateNestedManyWithoutSurveyInput
  }

  export type MorningSurveyResponseUncheckedCreateInput = {
    id?: string
    playerId: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    painAreas?: PainAreaUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type MorningSurveyResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    player?: PlayerUpdateOneRequiredWithoutMorningSurveysNestedInput
    painAreas?: PainAreaUpdateManyWithoutSurveyNestedInput
  }

  export type MorningSurveyResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    painAreas?: PainAreaUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type MorningSurveyResponseCreateManyInput = {
    id?: string
    playerId: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
  }

  export type MorningSurveyResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type MorningSurveyResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PainAreaCreateInput = {
    id?: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
    survey: MorningSurveyResponseCreateNestedOneWithoutPainAreasInput
  }

  export type PainAreaUncheckedCreateInput = {
    id?: string
    surveyId: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
  }

  export type PainAreaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: MorningSurveyResponseUpdateOneRequiredWithoutPainAreasNestedInput
  }

  export type PainAreaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PainAreaCreateManyInput = {
    id?: string
    surveyId: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
  }

  export type PainAreaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PainAreaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAreaCreateInput = {
    id?: string
    number: number
    name: string
    view: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAreaUncheckedCreateInput = {
    id?: string
    number: number
    name: string
    view: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAreaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAreaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAreaCreateManyInput = {
    id?: string
    number: number
    name: string
    view: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAreaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAreaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type ExerciseCategoryListRelationFilter = {
    every?: ExerciseCategoryWhereInput
    some?: ExerciseCategoryWhereInput
    none?: ExerciseCategoryWhereInput
  }

  export type ExerciseTagListRelationFilter = {
    every?: ExerciseTagWhereInput
    some?: ExerciseTagWhereInput
    none?: ExerciseTagWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type MediaItemListRelationFilter = {
    every?: MediaItemWhereInput
    some?: MediaItemWhereInput
    none?: MediaItemWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type TrainingListRelationFilter = {
    every?: TrainingWhereInput
    some?: TrainingWhereInput
    none?: TrainingWhereInput
  }

  export type TrainingCategoryListRelationFilter = {
    every?: TrainingCategoryWhereInput
    some?: TrainingCategoryWhereInput
    none?: TrainingCategoryWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broadcastTime?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broadcastTime?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broadcastTime?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PlayerDocumentListRelationFilter = {
    every?: PlayerDocumentWhereInput
    some?: PlayerDocumentWhereInput
    none?: PlayerDocumentWhereInput
  }

  export type TeamCoachListRelationFilter = {
    every?: TeamCoachWhereInput
    some?: TeamCoachWhereInput
    none?: TeamCoachWhereInput
  }

  export type ClubScalarRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type PlayerDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCoachOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    order?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    order?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    order?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TeamNullableScalarRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    createdById?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    createdById?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type EventNullableScalarRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type ExerciseNullableScalarRelationFilter = {
    is?: ExerciseWhereInput | null
    isNot?: ExerciseWhereInput | null
  }

  export type MediaItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    size?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    eventId?: SortOrder
    uploadedById?: SortOrder
    exerciseId?: SortOrder
    publicUrl?: SortOrder
  }

  export type MediaItemAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type MediaItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    size?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    eventId?: SortOrder
    uploadedById?: SortOrder
    exerciseId?: SortOrder
    publicUrl?: SortOrder
  }

  export type MediaItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    size?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    eventId?: SortOrder
    uploadedById?: SortOrder
    exerciseId?: SortOrder
    publicUrl?: SortOrder
  }

  export type MediaItemSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type TrainingCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type TrainingCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type TrainingCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type EnumTrainingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingStatus | EnumTrainingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStatusFilter<$PrismaModel> | $Enums.TrainingStatus
  }

  export type PlayerAttendanceListRelationFilter = {
    every?: PlayerAttendanceWhereInput
    some?: PlayerAttendanceWhereInput
    none?: PlayerAttendanceWhereInput
  }

  export type TrainingCategoryScalarRelationFilter = {
    is?: TrainingCategoryWhereInput
    isNot?: TrainingCategoryWhereInput
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TrainingExerciseListRelationFilter = {
    every?: TrainingExerciseWhereInput
    some?: TrainingExerciseWhereInput
    none?: TrainingExerciseWhereInput
  }

  export type PlayerAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    type?: SortOrder
  }

  export type TrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    type?: SortOrder
  }

  export type TrainingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    teamId?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    type?: SortOrder
  }

  export type EnumTrainingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingStatus | EnumTrainingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStatusWithAggregatesFilter<$PrismaModel> | $Enums.TrainingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingStatusFilter<$PrismaModel>
    _max?: NestedEnumTrainingStatusFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ExerciseCategoryScalarRelationFilter = {
    is?: ExerciseCategoryWhereInput
    isNot?: ExerciseCategoryWhereInput
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    clubId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    length?: SortOrder
    width?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    length?: SortOrder
    width?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    clubId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    length?: SortOrder
    width?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    clubId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    length?: SortOrder
    width?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    length?: SortOrder
    width?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExerciseCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type ExerciseCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type ExerciseCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
  }

  export type ExerciseTagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exerciseCategoryId?: SortOrder
  }

  export type ExerciseTagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exerciseCategoryId?: SortOrder
  }

  export type ExerciseTagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    exerciseCategoryId?: SortOrder
  }

  export type ExerciseScalarRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type TrainingScalarRelationFilter = {
    is?: TrainingWhereInput
    isNot?: TrainingWhereInput
  }

  export type TrainingExerciseTrainingIdExerciseIdCompoundUniqueInput = {
    trainingId: string
    exerciseId: string
  }

  export type TrainingExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    trainingId?: SortOrder
    exerciseId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingExerciseAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type TrainingExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    trainingId?: SortOrder
    exerciseId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    trainingId?: SortOrder
    exerciseId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingExerciseSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PlayerMatchStatListRelationFilter = {
    every?: PlayerMatchStatWhereInput
    some?: PlayerMatchStatWhereInput
    none?: PlayerMatchStatWhereInput
  }

  export type MorningSurveyResponseListRelationFilter = {
    every?: MorningSurveyResponseWhereInput
    some?: MorningSurveyResponseWhereInput
    none?: MorningSurveyResponseWhereInput
  }

  export type PlayerMatchStatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MorningSurveyResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerPinCodeTeamIdCompoundUniqueInput = {
    pinCode: string
    teamId: string
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    number?: SortOrder
    position?: SortOrder
    strongFoot?: SortOrder
    dateOfBirth?: SortOrder
    academyJoinDate?: SortOrder
    nationality?: SortOrder
    imageUrl?: SortOrder
    status?: SortOrder
    birthCertificateNumber?: SortOrder
    pinCode?: SortOrder
    telegramId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    number?: SortOrder
    position?: SortOrder
    strongFoot?: SortOrder
    dateOfBirth?: SortOrder
    academyJoinDate?: SortOrder
    nationality?: SortOrder
    imageUrl?: SortOrder
    status?: SortOrder
    birthCertificateNumber?: SortOrder
    pinCode?: SortOrder
    telegramId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    number?: SortOrder
    position?: SortOrder
    strongFoot?: SortOrder
    dateOfBirth?: SortOrder
    academyJoinDate?: SortOrder
    nationality?: SortOrder
    imageUrl?: SortOrder
    status?: SortOrder
    birthCertificateNumber?: SortOrder
    pinCode?: SortOrder
    telegramId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type PlayerScalarRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PlayerDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    publicUrl?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerId?: SortOrder
    clubId?: SortOrder
    uploadedById?: SortOrder
  }

  export type PlayerDocumentAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type PlayerDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    publicUrl?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerId?: SortOrder
    clubId?: SortOrder
    uploadedById?: SortOrder
  }

  export type PlayerDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    publicUrl?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerId?: SortOrder
    clubId?: SortOrder
    uploadedById?: SortOrder
  }

  export type PlayerDocumentSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type TeamCoachTeamIdUserIdCompoundUniqueInput = {
    teamId: string
    userId: string
  }

  export type TeamCoachCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamCoachMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamCoachMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type PlayerAttendancePlayerIdTrainingIdCompoundUniqueInput = {
    playerId: string
    trainingId: string
  }

  export type PlayerAttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    trainingId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerAttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    trainingId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerAttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    trainingId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type EnumCompetitionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionType | EnumCompetitionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionTypeFilter<$PrismaModel> | $Enums.CompetitionType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    competitionType?: SortOrder
    date?: SortOrder
    time?: SortOrder
    isHome?: SortOrder
    teamId?: SortOrder
    opponentName?: SortOrder
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    formation?: SortOrder
    gameFormat?: SortOrder
    markerColor?: SortOrder
    notes?: SortOrder
    playerPositions?: SortOrder
    positionAssignments?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    competitionType?: SortOrder
    date?: SortOrder
    time?: SortOrder
    isHome?: SortOrder
    teamId?: SortOrder
    opponentName?: SortOrder
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    formation?: SortOrder
    gameFormat?: SortOrder
    markerColor?: SortOrder
    notes?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    competitionType?: SortOrder
    date?: SortOrder
    time?: SortOrder
    isHome?: SortOrder
    teamId?: SortOrder
    opponentName?: SortOrder
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubId?: SortOrder
    formation?: SortOrder
    gameFormat?: SortOrder
    markerColor?: SortOrder
    notes?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    teamGoals?: SortOrder
    opponentGoals?: SortOrder
  }

  export type EnumCompetitionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionType | EnumCompetitionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionTypeFilter<$PrismaModel>
    _max?: NestedEnumCompetitionTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type MatchScalarRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type PlayerMatchStatMatchIdPlayerIdCompoundUniqueInput = {
    matchId: string
    playerId: string
  }

  export type PlayerMatchStatCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    playerId?: SortOrder
    isStarter?: SortOrder
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerMatchStatAvgOrderByAggregateInput = {
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
  }

  export type PlayerMatchStatMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    playerId?: SortOrder
    isStarter?: SortOrder
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerMatchStatMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    playerId?: SortOrder
    isStarter?: SortOrder
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerMatchStatSumOrderByAggregateInput = {
    minutesPlayed?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    yellowCards?: SortOrder
    redCards?: SortOrder
  }

  export type ScheduleEventListRelationFilter = {
    every?: ScheduleEventWhereInput
    some?: ScheduleEventWhereInput
    none?: ScheduleEventWhereInput
  }

  export type ScheduleEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleTeamIdDateCompoundUniqueInput = {
    teamId: string
    date: Date | string
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleScalarRelationFilter = {
    is?: ScheduleWhereInput
    isNot?: ScheduleWhereInput
  }

  export type ScheduleEventCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleEventMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleEventMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PainAreaListRelationFilter = {
    every?: PainAreaWhereInput
    some?: PainAreaWhereInput
    none?: PainAreaWhereInput
  }

  export type PainAreaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MorningSurveyResponseCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    completedAt?: SortOrder
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
    surveyId?: SortOrder
    tenantId?: SortOrder
  }

  export type MorningSurveyResponseAvgOrderByAggregateInput = {
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
  }

  export type MorningSurveyResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    completedAt?: SortOrder
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
    surveyId?: SortOrder
    tenantId?: SortOrder
  }

  export type MorningSurveyResponseMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    completedAt?: SortOrder
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
    surveyId?: SortOrder
    tenantId?: SortOrder
  }

  export type MorningSurveyResponseSumOrderByAggregateInput = {
    sleepDuration?: SortOrder
    sleepQuality?: SortOrder
    recovery?: SortOrder
    mood?: SortOrder
    muscleCondition?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MorningSurveyResponseScalarRelationFilter = {
    is?: MorningSurveyResponseWhereInput
    isNot?: MorningSurveyResponseWhereInput
  }

  export type PainAreaCountOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    areaName?: SortOrder
    painLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type PainAreaAvgOrderByAggregateInput = {
    painLevel?: SortOrder
  }

  export type PainAreaMaxOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    areaName?: SortOrder
    painLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type PainAreaMinOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    areaName?: SortOrder
    painLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type PainAreaSumOrderByAggregateInput = {
    painLevel?: SortOrder
  }

  export type MuscleAreaNumberViewCompoundUniqueInput = {
    number: number
    view: string
  }

  export type MuscleAreaCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    view?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAreaAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type MuscleAreaMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    view?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAreaMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    view?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAreaSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type EventCreateNestedManyWithoutClubInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput> | ExerciseCreateWithoutClubInput[] | ExerciseUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutClubInput | ExerciseCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseCreateManyClubInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ExerciseCategoryCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput> | ExerciseCategoryCreateWithoutClubInput[] | ExerciseCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutClubInput | ExerciseCategoryCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseCategoryCreateManyClubInputEnvelope
    connect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
  }

  export type ExerciseTagCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput> | ExerciseTagCreateWithoutClubInput[] | ExerciseTagUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutClubInput | ExerciseTagCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseTagCreateManyClubInputEnvelope
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutClubInput = {
    create?: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput> | MatchCreateWithoutClubInput[] | MatchUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutClubInput | MatchCreateOrConnectWithoutClubInput[]
    createMany?: MatchCreateManyClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutClubInput = {
    create?: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput> | MediaItemCreateWithoutClubInput[] | MediaItemUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutClubInput | MediaItemCreateOrConnectWithoutClubInput[]
    createMany?: MediaItemCreateManyClubInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutClubInput = {
    create?: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput> | TeamCreateWithoutClubInput[] | TeamUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutClubInput | TeamCreateOrConnectWithoutClubInput[]
    createMany?: TeamCreateManyClubInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TrainingCreateNestedManyWithoutClubInput = {
    create?: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput> | TrainingCreateWithoutClubInput[] | TrainingUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutClubInput | TrainingCreateOrConnectWithoutClubInput[]
    createMany?: TrainingCreateManyClubInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type TrainingCategoryCreateNestedManyWithoutClubInput = {
    create?: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput> | TrainingCategoryCreateWithoutClubInput[] | TrainingCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutClubInput | TrainingCategoryCreateOrConnectWithoutClubInput[]
    createMany?: TrainingCategoryCreateManyClubInputEnvelope
    connect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutClubInput = {
    create?: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput> | UserCreateWithoutClubInput[] | UserUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClubInput | UserCreateOrConnectWithoutClubInput[]
    createMany?: UserCreateManyClubInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput> | ExerciseCreateWithoutClubInput[] | ExerciseUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutClubInput | ExerciseCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseCreateManyClubInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput> | ExerciseCategoryCreateWithoutClubInput[] | ExerciseCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutClubInput | ExerciseCategoryCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseCategoryCreateManyClubInputEnvelope
    connect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
  }

  export type ExerciseTagUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput> | ExerciseTagCreateWithoutClubInput[] | ExerciseTagUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutClubInput | ExerciseTagCreateOrConnectWithoutClubInput[]
    createMany?: ExerciseTagCreateManyClubInputEnvelope
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput> | MatchCreateWithoutClubInput[] | MatchUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutClubInput | MatchCreateOrConnectWithoutClubInput[]
    createMany?: MatchCreateManyClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput> | MediaItemCreateWithoutClubInput[] | MediaItemUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutClubInput | MediaItemCreateOrConnectWithoutClubInput[]
    createMany?: MediaItemCreateManyClubInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput> | TeamCreateWithoutClubInput[] | TeamUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutClubInput | TeamCreateOrConnectWithoutClubInput[]
    createMany?: TeamCreateManyClubInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TrainingUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput> | TrainingCreateWithoutClubInput[] | TrainingUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutClubInput | TrainingCreateOrConnectWithoutClubInput[]
    createMany?: TrainingCreateManyClubInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type TrainingCategoryUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput> | TrainingCategoryCreateWithoutClubInput[] | TrainingCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutClubInput | TrainingCategoryCreateOrConnectWithoutClubInput[]
    createMany?: TrainingCategoryCreateManyClubInputEnvelope
    connect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput> | UserCreateWithoutClubInput[] | UserUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClubInput | UserCreateOrConnectWithoutClubInput[]
    createMany?: UserCreateManyClubInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventUpdateManyWithoutClubNestedInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClubInput | EventUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClubInput | EventUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClubInput | EventUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput> | ExerciseCreateWithoutClubInput[] | ExerciseUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutClubInput | ExerciseCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutClubInput | ExerciseUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseCreateManyClubInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutClubInput | ExerciseUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutClubInput | ExerciseUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseCategoryUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput> | ExerciseCategoryCreateWithoutClubInput[] | ExerciseCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutClubInput | ExerciseCategoryCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseCategoryUpsertWithWhereUniqueWithoutClubInput | ExerciseCategoryUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseCategoryCreateManyClubInputEnvelope
    set?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    disconnect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    delete?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    connect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    update?: ExerciseCategoryUpdateWithWhereUniqueWithoutClubInput | ExerciseCategoryUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseCategoryUpdateManyWithWhereWithoutClubInput | ExerciseCategoryUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseCategoryScalarWhereInput | ExerciseCategoryScalarWhereInput[]
  }

  export type ExerciseTagUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput> | ExerciseTagCreateWithoutClubInput[] | ExerciseTagUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutClubInput | ExerciseTagCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutClubInput | ExerciseTagUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseTagCreateManyClubInputEnvelope
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutClubInput | ExerciseTagUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutClubInput | ExerciseTagUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutClubNestedInput = {
    create?: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput> | MatchCreateWithoutClubInput[] | MatchUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutClubInput | MatchCreateOrConnectWithoutClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutClubInput | MatchUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: MatchCreateManyClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutClubInput | MatchUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutClubInput | MatchUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutClubNestedInput = {
    create?: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput> | MediaItemCreateWithoutClubInput[] | MediaItemUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutClubInput | MediaItemCreateOrConnectWithoutClubInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutClubInput | MediaItemUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: MediaItemCreateManyClubInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutClubInput | MediaItemUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutClubInput | MediaItemUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutClubNestedInput = {
    create?: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput> | TeamCreateWithoutClubInput[] | TeamUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutClubInput | TeamCreateOrConnectWithoutClubInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutClubInput | TeamUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TeamCreateManyClubInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutClubInput | TeamUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutClubInput | TeamUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TrainingUpdateManyWithoutClubNestedInput = {
    create?: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput> | TrainingCreateWithoutClubInput[] | TrainingUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutClubInput | TrainingCreateOrConnectWithoutClubInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutClubInput | TrainingUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TrainingCreateManyClubInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutClubInput | TrainingUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutClubInput | TrainingUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type TrainingCategoryUpdateManyWithoutClubNestedInput = {
    create?: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput> | TrainingCategoryCreateWithoutClubInput[] | TrainingCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutClubInput | TrainingCategoryCreateOrConnectWithoutClubInput[]
    upsert?: TrainingCategoryUpsertWithWhereUniqueWithoutClubInput | TrainingCategoryUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TrainingCategoryCreateManyClubInputEnvelope
    set?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    disconnect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    delete?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    connect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    update?: TrainingCategoryUpdateWithWhereUniqueWithoutClubInput | TrainingCategoryUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TrainingCategoryUpdateManyWithWhereWithoutClubInput | TrainingCategoryUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TrainingCategoryScalarWhereInput | TrainingCategoryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput> | UserCreateWithoutClubInput[] | UserUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClubInput | UserCreateOrConnectWithoutClubInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClubInput | UserUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserCreateManyClubInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClubInput | UserUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClubInput | UserUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput> | EventCreateWithoutClubInput[] | EventUncheckedCreateWithoutClubInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClubInput | EventCreateOrConnectWithoutClubInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClubInput | EventUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: EventCreateManyClubInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClubInput | EventUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClubInput | EventUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput> | ExerciseCreateWithoutClubInput[] | ExerciseUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutClubInput | ExerciseCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutClubInput | ExerciseUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseCreateManyClubInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutClubInput | ExerciseUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutClubInput | ExerciseUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput> | ExerciseCategoryCreateWithoutClubInput[] | ExerciseCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutClubInput | ExerciseCategoryCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseCategoryUpsertWithWhereUniqueWithoutClubInput | ExerciseCategoryUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseCategoryCreateManyClubInputEnvelope
    set?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    disconnect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    delete?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    connect?: ExerciseCategoryWhereUniqueInput | ExerciseCategoryWhereUniqueInput[]
    update?: ExerciseCategoryUpdateWithWhereUniqueWithoutClubInput | ExerciseCategoryUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseCategoryUpdateManyWithWhereWithoutClubInput | ExerciseCategoryUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseCategoryScalarWhereInput | ExerciseCategoryScalarWhereInput[]
  }

  export type ExerciseTagUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput> | ExerciseTagCreateWithoutClubInput[] | ExerciseTagUncheckedCreateWithoutClubInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutClubInput | ExerciseTagCreateOrConnectWithoutClubInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutClubInput | ExerciseTagUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: ExerciseTagCreateManyClubInputEnvelope
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutClubInput | ExerciseTagUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutClubInput | ExerciseTagUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput> | MatchCreateWithoutClubInput[] | MatchUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutClubInput | MatchCreateOrConnectWithoutClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutClubInput | MatchUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: MatchCreateManyClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutClubInput | MatchUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutClubInput | MatchUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput> | MediaItemCreateWithoutClubInput[] | MediaItemUncheckedCreateWithoutClubInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutClubInput | MediaItemCreateOrConnectWithoutClubInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutClubInput | MediaItemUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: MediaItemCreateManyClubInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutClubInput | MediaItemUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutClubInput | MediaItemUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput> | TeamCreateWithoutClubInput[] | TeamUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutClubInput | TeamCreateOrConnectWithoutClubInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutClubInput | TeamUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TeamCreateManyClubInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutClubInput | TeamUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutClubInput | TeamUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TrainingUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput> | TrainingCreateWithoutClubInput[] | TrainingUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutClubInput | TrainingCreateOrConnectWithoutClubInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutClubInput | TrainingUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TrainingCreateManyClubInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutClubInput | TrainingUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutClubInput | TrainingUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput> | TrainingCategoryCreateWithoutClubInput[] | TrainingCategoryUncheckedCreateWithoutClubInput[]
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutClubInput | TrainingCategoryCreateOrConnectWithoutClubInput[]
    upsert?: TrainingCategoryUpsertWithWhereUniqueWithoutClubInput | TrainingCategoryUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: TrainingCategoryCreateManyClubInputEnvelope
    set?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    disconnect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    delete?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    connect?: TrainingCategoryWhereUniqueInput | TrainingCategoryWhereUniqueInput[]
    update?: TrainingCategoryUpdateWithWhereUniqueWithoutClubInput | TrainingCategoryUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: TrainingCategoryUpdateManyWithWhereWithoutClubInput | TrainingCategoryUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: TrainingCategoryScalarWhereInput | TrainingCategoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput> | UserCreateWithoutClubInput[] | UserUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClubInput | UserCreateOrConnectWithoutClubInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClubInput | UserUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserCreateManyClubInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClubInput | UserUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClubInput | UserUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput> | ExerciseCreateWithoutAuthorInput[] | ExerciseUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutAuthorInput | ExerciseCreateOrConnectWithoutAuthorInput[]
    createMany?: ExerciseCreateManyAuthorInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput> | MediaItemCreateWithoutUploadedByInput[] | MediaItemUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUploadedByInput | MediaItemCreateOrConnectWithoutUploadedByInput[]
    createMany?: MediaItemCreateManyUploadedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type PlayerDocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput> | PlayerDocumentCreateWithoutUploadedByInput[] | PlayerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutUploadedByInput | PlayerDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: PlayerDocumentCreateManyUploadedByInputEnvelope
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
  }

  export type TeamCoachCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput> | TeamCoachCreateWithoutUserInput[] | TeamCoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutUserInput | TeamCoachCreateOrConnectWithoutUserInput[]
    createMany?: TeamCoachCreateManyUserInputEnvelope
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
  }

  export type TrainingCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput> | TrainingCreateWithoutCreatedByInput[] | TrainingUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatedByInput | TrainingCreateOrConnectWithoutCreatedByInput[]
    createMany?: TrainingCreateManyCreatedByInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutUsersInput = {
    create?: XOR<ClubCreateWithoutUsersInput, ClubUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUsersInput
    connect?: ClubWhereUniqueInput
  }

  export type EventUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput> | ExerciseCreateWithoutAuthorInput[] | ExerciseUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutAuthorInput | ExerciseCreateOrConnectWithoutAuthorInput[]
    createMany?: ExerciseCreateManyAuthorInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput> | MediaItemCreateWithoutUploadedByInput[] | MediaItemUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUploadedByInput | MediaItemCreateOrConnectWithoutUploadedByInput[]
    createMany?: MediaItemCreateManyUploadedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput> | PlayerDocumentCreateWithoutUploadedByInput[] | PlayerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutUploadedByInput | PlayerDocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: PlayerDocumentCreateManyUploadedByInputEnvelope
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
  }

  export type TeamCoachUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput> | TeamCoachCreateWithoutUserInput[] | TeamCoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutUserInput | TeamCoachCreateOrConnectWithoutUserInput[]
    createMany?: TeamCoachCreateManyUserInputEnvelope
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
  }

  export type TrainingUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput> | TrainingCreateWithoutCreatedByInput[] | TrainingUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatedByInput | TrainingCreateOrConnectWithoutCreatedByInput[]
    createMany?: TrainingCreateManyCreatedByInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EventUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatedByInput | EventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatedByInput | EventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatedByInput | EventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput> | ExerciseCreateWithoutAuthorInput[] | ExerciseUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutAuthorInput | ExerciseCreateOrConnectWithoutAuthorInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutAuthorInput | ExerciseUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ExerciseCreateManyAuthorInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutAuthorInput | ExerciseUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutAuthorInput | ExerciseUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput> | MediaItemCreateWithoutUploadedByInput[] | MediaItemUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUploadedByInput | MediaItemCreateOrConnectWithoutUploadedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutUploadedByInput | MediaItemUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: MediaItemCreateManyUploadedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutUploadedByInput | MediaItemUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutUploadedByInput | MediaItemUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type PlayerDocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput> | PlayerDocumentCreateWithoutUploadedByInput[] | PlayerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutUploadedByInput | PlayerDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: PlayerDocumentUpsertWithWhereUniqueWithoutUploadedByInput | PlayerDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: PlayerDocumentCreateManyUploadedByInputEnvelope
    set?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    disconnect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    delete?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    update?: PlayerDocumentUpdateWithWhereUniqueWithoutUploadedByInput | PlayerDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: PlayerDocumentUpdateManyWithWhereWithoutUploadedByInput | PlayerDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
  }

  export type TeamCoachUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput> | TeamCoachCreateWithoutUserInput[] | TeamCoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutUserInput | TeamCoachCreateOrConnectWithoutUserInput[]
    upsert?: TeamCoachUpsertWithWhereUniqueWithoutUserInput | TeamCoachUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamCoachCreateManyUserInputEnvelope
    set?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    disconnect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    delete?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    update?: TeamCoachUpdateWithWhereUniqueWithoutUserInput | TeamCoachUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamCoachUpdateManyWithWhereWithoutUserInput | TeamCoachUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
  }

  export type TrainingUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput> | TrainingCreateWithoutCreatedByInput[] | TrainingUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatedByInput | TrainingCreateOrConnectWithoutCreatedByInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCreatedByInput | TrainingUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TrainingCreateManyCreatedByInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCreatedByInput | TrainingUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCreatedByInput | TrainingUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ClubCreateWithoutUsersInput, ClubUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUsersInput
    upsert?: ClubUpsertWithoutUsersInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutUsersInput, ClubUpdateWithoutUsersInput>, ClubUncheckedUpdateWithoutUsersInput>
  }

  export type EventUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatedByInput | EventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatedByInput | EventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatedByInput | EventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput> | ExerciseCreateWithoutAuthorInput[] | ExerciseUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutAuthorInput | ExerciseCreateOrConnectWithoutAuthorInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutAuthorInput | ExerciseUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ExerciseCreateManyAuthorInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutAuthorInput | ExerciseUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutAuthorInput | ExerciseUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput> | MediaItemCreateWithoutUploadedByInput[] | MediaItemUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUploadedByInput | MediaItemCreateOrConnectWithoutUploadedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutUploadedByInput | MediaItemUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: MediaItemCreateManyUploadedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutUploadedByInput | MediaItemUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutUploadedByInput | MediaItemUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput> | PlayerDocumentCreateWithoutUploadedByInput[] | PlayerDocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutUploadedByInput | PlayerDocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: PlayerDocumentUpsertWithWhereUniqueWithoutUploadedByInput | PlayerDocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: PlayerDocumentCreateManyUploadedByInputEnvelope
    set?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    disconnect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    delete?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    update?: PlayerDocumentUpdateWithWhereUniqueWithoutUploadedByInput | PlayerDocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: PlayerDocumentUpdateManyWithWhereWithoutUploadedByInput | PlayerDocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
  }

  export type TeamCoachUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput> | TeamCoachCreateWithoutUserInput[] | TeamCoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutUserInput | TeamCoachCreateOrConnectWithoutUserInput[]
    upsert?: TeamCoachUpsertWithWhereUniqueWithoutUserInput | TeamCoachUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamCoachCreateManyUserInputEnvelope
    set?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    disconnect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    delete?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    update?: TeamCoachUpdateWithWhereUniqueWithoutUserInput | TeamCoachUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamCoachUpdateManyWithWhereWithoutUserInput | TeamCoachUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
  }

  export type TrainingUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput> | TrainingCreateWithoutCreatedByInput[] | TrainingUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatedByInput | TrainingCreateOrConnectWithoutCreatedByInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCreatedByInput | TrainingUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TrainingCreateManyCreatedByInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCreatedByInput | TrainingUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCreatedByInput | TrainingUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutTeamInput = {
    create?: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput> | EventCreateWithoutTeamInput[] | EventUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamInput | EventCreateOrConnectWithoutTeamInput[]
    createMany?: EventCreateManyTeamInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutTeamInput = {
    create?: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput> | MatchCreateWithoutTeamInput[] | MatchUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTeamInput | MatchCreateOrConnectWithoutTeamInput[]
    createMany?: MatchCreateManyTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutTeamsInput = {
    create?: XOR<ClubCreateWithoutTeamsInput, ClubUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTeamsInput
    connect?: ClubWhereUniqueInput
  }

  export type TeamCoachCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput> | TeamCoachCreateWithoutTeamInput[] | TeamCoachUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutTeamInput | TeamCoachCreateOrConnectWithoutTeamInput[]
    createMany?: TeamCoachCreateManyTeamInputEnvelope
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
  }

  export type TrainingCreateNestedManyWithoutTeamInput = {
    create?: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput> | TrainingCreateWithoutTeamInput[] | TrainingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTeamInput | TrainingCreateOrConnectWithoutTeamInput[]
    createMany?: TrainingCreateManyTeamInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput> | EventCreateWithoutTeamInput[] | EventUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamInput | EventCreateOrConnectWithoutTeamInput[]
    createMany?: EventCreateManyTeamInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput> | MatchCreateWithoutTeamInput[] | MatchUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTeamInput | MatchCreateOrConnectWithoutTeamInput[]
    createMany?: MatchCreateManyTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type TeamCoachUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput> | TeamCoachCreateWithoutTeamInput[] | TeamCoachUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutTeamInput | TeamCoachCreateOrConnectWithoutTeamInput[]
    createMany?: TeamCoachCreateManyTeamInputEnvelope
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
  }

  export type TrainingUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput> | TrainingCreateWithoutTeamInput[] | TrainingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTeamInput | TrainingCreateOrConnectWithoutTeamInput[]
    createMany?: TrainingCreateManyTeamInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateManyWithoutTeamNestedInput = {
    create?: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput> | EventCreateWithoutTeamInput[] | EventUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamInput | EventCreateOrConnectWithoutTeamInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutTeamInput | EventUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: EventCreateManyTeamInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutTeamInput | EventUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: EventUpdateManyWithWhereWithoutTeamInput | EventUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutTeamNestedInput = {
    create?: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput> | MatchCreateWithoutTeamInput[] | MatchUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTeamInput | MatchCreateOrConnectWithoutTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutTeamInput | MatchUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: MatchCreateManyTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutTeamInput | MatchUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutTeamInput | MatchUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<ClubCreateWithoutTeamsInput, ClubUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTeamsInput
    upsert?: ClubUpsertWithoutTeamsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutTeamsInput, ClubUpdateWithoutTeamsInput>, ClubUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamCoachUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput> | TeamCoachCreateWithoutTeamInput[] | TeamCoachUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutTeamInput | TeamCoachCreateOrConnectWithoutTeamInput[]
    upsert?: TeamCoachUpsertWithWhereUniqueWithoutTeamInput | TeamCoachUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamCoachCreateManyTeamInputEnvelope
    set?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    disconnect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    delete?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    update?: TeamCoachUpdateWithWhereUniqueWithoutTeamInput | TeamCoachUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamCoachUpdateManyWithWhereWithoutTeamInput | TeamCoachUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
  }

  export type TrainingUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput> | TrainingCreateWithoutTeamInput[] | TrainingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTeamInput | TrainingCreateOrConnectWithoutTeamInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutTeamInput | TrainingUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TrainingCreateManyTeamInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutTeamInput | TrainingUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutTeamInput | TrainingUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput> | EventCreateWithoutTeamInput[] | EventUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamInput | EventCreateOrConnectWithoutTeamInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutTeamInput | EventUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: EventCreateManyTeamInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutTeamInput | EventUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: EventUpdateManyWithWhereWithoutTeamInput | EventUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput> | MatchCreateWithoutTeamInput[] | MatchUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTeamInput | MatchCreateOrConnectWithoutTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutTeamInput | MatchUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: MatchCreateManyTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutTeamInput | MatchUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutTeamInput | MatchUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type TeamCoachUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput> | TeamCoachCreateWithoutTeamInput[] | TeamCoachUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamCoachCreateOrConnectWithoutTeamInput | TeamCoachCreateOrConnectWithoutTeamInput[]
    upsert?: TeamCoachUpsertWithWhereUniqueWithoutTeamInput | TeamCoachUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamCoachCreateManyTeamInputEnvelope
    set?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    disconnect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    delete?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    connect?: TeamCoachWhereUniqueInput | TeamCoachWhereUniqueInput[]
    update?: TeamCoachUpdateWithWhereUniqueWithoutTeamInput | TeamCoachUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamCoachUpdateManyWithWhereWithoutTeamInput | TeamCoachUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
  }

  export type TrainingUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput> | TrainingCreateWithoutTeamInput[] | TrainingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTeamInput | TrainingCreateOrConnectWithoutTeamInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutTeamInput | TrainingUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TrainingCreateManyTeamInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutTeamInput | TrainingUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutTeamInput | TrainingUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutEventsInput = {
    create?: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutEventsInput
    connect?: ClubWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutEventsInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput
    connect?: TeamWhereUniqueInput
  }

  export type MediaItemCreateNestedManyWithoutEventInput = {
    create?: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput> | MediaItemCreateWithoutEventInput[] | MediaItemUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutEventInput | MediaItemCreateOrConnectWithoutEventInput[]
    createMany?: MediaItemCreateManyEventInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput> | MediaItemCreateWithoutEventInput[] | MediaItemUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutEventInput | MediaItemCreateOrConnectWithoutEventInput[]
    createMany?: MediaItemCreateManyEventInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type ClubUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutEventsInput
    upsert?: ClubUpsertWithoutEventsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutEventsInput, ClubUpdateWithoutEventsInput>, ClubUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type TeamUpdateOneWithoutEventsNestedInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput
    upsert?: TeamUpsertWithoutEventsInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutEventsInput, TeamUpdateWithoutEventsInput>, TeamUncheckedUpdateWithoutEventsInput>
  }

  export type MediaItemUpdateManyWithoutEventNestedInput = {
    create?: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput> | MediaItemCreateWithoutEventInput[] | MediaItemUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutEventInput | MediaItemCreateOrConnectWithoutEventInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutEventInput | MediaItemUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MediaItemCreateManyEventInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutEventInput | MediaItemUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutEventInput | MediaItemUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput> | MediaItemCreateWithoutEventInput[] | MediaItemUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutEventInput | MediaItemCreateOrConnectWithoutEventInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutEventInput | MediaItemUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MediaItemCreateManyEventInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutEventInput | MediaItemUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutEventInput | MediaItemUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<ClubCreateWithoutMediaItemsInput, ClubUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMediaItemsInput
    connect?: ClubWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<EventCreateWithoutMediaItemsInput, EventUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: EventCreateOrConnectWithoutMediaItemsInput
    connect?: EventWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<ExerciseCreateWithoutMediaItemsInput, ExerciseUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutMediaItemsInput
    connect?: ExerciseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMediaUploadsInput = {
    create?: XOR<UserCreateWithoutMediaUploadsInput, UserUncheckedCreateWithoutMediaUploadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaUploadsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMediaTypeFieldUpdateOperationsInput = {
    set?: $Enums.MediaType
  }

  export type ClubUpdateOneRequiredWithoutMediaItemsNestedInput = {
    create?: XOR<ClubCreateWithoutMediaItemsInput, ClubUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMediaItemsInput
    upsert?: ClubUpsertWithoutMediaItemsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutMediaItemsInput, ClubUpdateWithoutMediaItemsInput>, ClubUncheckedUpdateWithoutMediaItemsInput>
  }

  export type EventUpdateOneWithoutMediaItemsNestedInput = {
    create?: XOR<EventCreateWithoutMediaItemsInput, EventUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: EventCreateOrConnectWithoutMediaItemsInput
    upsert?: EventUpsertWithoutMediaItemsInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutMediaItemsInput, EventUpdateWithoutMediaItemsInput>, EventUncheckedUpdateWithoutMediaItemsInput>
  }

  export type ExerciseUpdateOneWithoutMediaItemsNestedInput = {
    create?: XOR<ExerciseCreateWithoutMediaItemsInput, ExerciseUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutMediaItemsInput
    upsert?: ExerciseUpsertWithoutMediaItemsInput
    disconnect?: ExerciseWhereInput | boolean
    delete?: ExerciseWhereInput | boolean
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutMediaItemsInput, ExerciseUpdateWithoutMediaItemsInput>, ExerciseUncheckedUpdateWithoutMediaItemsInput>
  }

  export type UserUpdateOneRequiredWithoutMediaUploadsNestedInput = {
    create?: XOR<UserCreateWithoutMediaUploadsInput, UserUncheckedCreateWithoutMediaUploadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaUploadsInput
    upsert?: UserUpsertWithoutMediaUploadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMediaUploadsInput, UserUpdateWithoutMediaUploadsInput>, UserUncheckedUpdateWithoutMediaUploadsInput>
  }

  export type TrainingCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput> | TrainingCreateWithoutCategoryInput[] | TrainingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCategoryInput | TrainingCreateOrConnectWithoutCategoryInput[]
    createMany?: TrainingCreateManyCategoryInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutTrainingCategoriesInput = {
    create?: XOR<ClubCreateWithoutTrainingCategoriesInput, ClubUncheckedCreateWithoutTrainingCategoriesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTrainingCategoriesInput
    connect?: ClubWhereUniqueInput
  }

  export type TrainingUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput> | TrainingCreateWithoutCategoryInput[] | TrainingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCategoryInput | TrainingCreateOrConnectWithoutCategoryInput[]
    createMany?: TrainingCreateManyCategoryInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type TrainingUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput> | TrainingCreateWithoutCategoryInput[] | TrainingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCategoryInput | TrainingCreateOrConnectWithoutCategoryInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCategoryInput | TrainingUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TrainingCreateManyCategoryInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCategoryInput | TrainingUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCategoryInput | TrainingUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutTrainingCategoriesNestedInput = {
    create?: XOR<ClubCreateWithoutTrainingCategoriesInput, ClubUncheckedCreateWithoutTrainingCategoriesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTrainingCategoriesInput
    upsert?: ClubUpsertWithoutTrainingCategoriesInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutTrainingCategoriesInput, ClubUpdateWithoutTrainingCategoriesInput>, ClubUncheckedUpdateWithoutTrainingCategoriesInput>
  }

  export type TrainingUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput> | TrainingCreateWithoutCategoryInput[] | TrainingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCategoryInput | TrainingCreateOrConnectWithoutCategoryInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCategoryInput | TrainingUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TrainingCreateManyCategoryInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCategoryInput | TrainingUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCategoryInput | TrainingUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type PlayerAttendanceCreateNestedManyWithoutTrainingInput = {
    create?: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput> | PlayerAttendanceCreateWithoutTrainingInput[] | PlayerAttendanceUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutTrainingInput | PlayerAttendanceCreateOrConnectWithoutTrainingInput[]
    createMany?: PlayerAttendanceCreateManyTrainingInputEnvelope
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
  }

  export type TrainingCategoryCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<TrainingCategoryCreateWithoutTrainingsInput, TrainingCategoryUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutTrainingsInput
    connect?: TrainingCategoryWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<ClubCreateWithoutTrainingsInput, ClubUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTrainingsInput
    connect?: ClubWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<UserCreateWithoutTrainingsInput, UserUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainingsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<TeamCreateWithoutTrainingsInput, TeamUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTrainingsInput
    connect?: TeamWhereUniqueInput
  }

  export type TrainingExerciseCreateNestedManyWithoutTrainingInput = {
    create?: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput> | TrainingExerciseCreateWithoutTrainingInput[] | TrainingExerciseUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutTrainingInput | TrainingExerciseCreateOrConnectWithoutTrainingInput[]
    createMany?: TrainingExerciseCreateManyTrainingInputEnvelope
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
  }

  export type PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput> | PlayerAttendanceCreateWithoutTrainingInput[] | PlayerAttendanceUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutTrainingInput | PlayerAttendanceCreateOrConnectWithoutTrainingInput[]
    createMany?: PlayerAttendanceCreateManyTrainingInputEnvelope
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
  }

  export type TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput> | TrainingExerciseCreateWithoutTrainingInput[] | TrainingExerciseUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutTrainingInput | TrainingExerciseCreateOrConnectWithoutTrainingInput[]
    createMany?: TrainingExerciseCreateManyTrainingInputEnvelope
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
  }

  export type EnumTrainingStatusFieldUpdateOperationsInput = {
    set?: $Enums.TrainingStatus
  }

  export type PlayerAttendanceUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput> | PlayerAttendanceCreateWithoutTrainingInput[] | PlayerAttendanceUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutTrainingInput | PlayerAttendanceCreateOrConnectWithoutTrainingInput[]
    upsert?: PlayerAttendanceUpsertWithWhereUniqueWithoutTrainingInput | PlayerAttendanceUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: PlayerAttendanceCreateManyTrainingInputEnvelope
    set?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    disconnect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    delete?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    update?: PlayerAttendanceUpdateWithWhereUniqueWithoutTrainingInput | PlayerAttendanceUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: PlayerAttendanceUpdateManyWithWhereWithoutTrainingInput | PlayerAttendanceUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
  }

  export type TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<TrainingCategoryCreateWithoutTrainingsInput, TrainingCategoryUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TrainingCategoryCreateOrConnectWithoutTrainingsInput
    upsert?: TrainingCategoryUpsertWithoutTrainingsInput
    connect?: TrainingCategoryWhereUniqueInput
    update?: XOR<XOR<TrainingCategoryUpdateToOneWithWhereWithoutTrainingsInput, TrainingCategoryUpdateWithoutTrainingsInput>, TrainingCategoryUncheckedUpdateWithoutTrainingsInput>
  }

  export type ClubUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<ClubCreateWithoutTrainingsInput, ClubUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutTrainingsInput
    upsert?: ClubUpsertWithoutTrainingsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutTrainingsInput, ClubUpdateWithoutTrainingsInput>, ClubUncheckedUpdateWithoutTrainingsInput>
  }

  export type UserUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<UserCreateWithoutTrainingsInput, UserUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainingsInput
    upsert?: UserUpsertWithoutTrainingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrainingsInput, UserUpdateWithoutTrainingsInput>, UserUncheckedUpdateWithoutTrainingsInput>
  }

  export type TeamUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<TeamCreateWithoutTrainingsInput, TeamUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTrainingsInput
    upsert?: TeamUpsertWithoutTrainingsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTrainingsInput, TeamUpdateWithoutTrainingsInput>, TeamUncheckedUpdateWithoutTrainingsInput>
  }

  export type TrainingExerciseUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput> | TrainingExerciseCreateWithoutTrainingInput[] | TrainingExerciseUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutTrainingInput | TrainingExerciseCreateOrConnectWithoutTrainingInput[]
    upsert?: TrainingExerciseUpsertWithWhereUniqueWithoutTrainingInput | TrainingExerciseUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: TrainingExerciseCreateManyTrainingInputEnvelope
    set?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    disconnect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    delete?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    update?: TrainingExerciseUpdateWithWhereUniqueWithoutTrainingInput | TrainingExerciseUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: TrainingExerciseUpdateManyWithWhereWithoutTrainingInput | TrainingExerciseUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
  }

  export type PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput> | PlayerAttendanceCreateWithoutTrainingInput[] | PlayerAttendanceUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutTrainingInput | PlayerAttendanceCreateOrConnectWithoutTrainingInput[]
    upsert?: PlayerAttendanceUpsertWithWhereUniqueWithoutTrainingInput | PlayerAttendanceUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: PlayerAttendanceCreateManyTrainingInputEnvelope
    set?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    disconnect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    delete?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    update?: PlayerAttendanceUpdateWithWhereUniqueWithoutTrainingInput | PlayerAttendanceUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: PlayerAttendanceUpdateManyWithWhereWithoutTrainingInput | PlayerAttendanceUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
  }

  export type TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput> | TrainingExerciseCreateWithoutTrainingInput[] | TrainingExerciseUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutTrainingInput | TrainingExerciseCreateOrConnectWithoutTrainingInput[]
    upsert?: TrainingExerciseUpsertWithWhereUniqueWithoutTrainingInput | TrainingExerciseUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: TrainingExerciseCreateManyTrainingInputEnvelope
    set?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    disconnect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    delete?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    update?: TrainingExerciseUpdateWithWhereUniqueWithoutTrainingInput | TrainingExerciseUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: TrainingExerciseUpdateManyWithWhereWithoutTrainingInput | TrainingExerciseUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutExercisesInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    connect?: UserWhereUniqueInput
  }

  export type ExerciseCategoryCreateNestedOneWithoutExercisesInput = {
    create?: XOR<ExerciseCategoryCreateWithoutExercisesInput, ExerciseCategoryUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutExercisesInput
    connect?: ExerciseCategoryWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutExercisesInput = {
    create?: XOR<ClubCreateWithoutExercisesInput, ClubUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExercisesInput
    connect?: ClubWhereUniqueInput
  }

  export type MediaItemCreateNestedManyWithoutExerciseInput = {
    create?: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput> | MediaItemCreateWithoutExerciseInput[] | MediaItemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutExerciseInput | MediaItemCreateOrConnectWithoutExerciseInput[]
    createMany?: MediaItemCreateManyExerciseInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type TrainingExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput> | TrainingExerciseCreateWithoutExerciseInput[] | TrainingExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutExerciseInput | TrainingExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: TrainingExerciseCreateManyExerciseInputEnvelope
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
  }

  export type ExerciseTagCreateNestedManyWithoutExercisesInput = {
    create?: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput> | ExerciseTagCreateWithoutExercisesInput[] | ExerciseTagUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExercisesInput | ExerciseTagCreateOrConnectWithoutExercisesInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput> | MediaItemCreateWithoutExerciseInput[] | MediaItemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutExerciseInput | MediaItemCreateOrConnectWithoutExerciseInput[]
    createMany?: MediaItemCreateManyExerciseInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput> | TrainingExerciseCreateWithoutExerciseInput[] | TrainingExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutExerciseInput | TrainingExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: TrainingExerciseCreateManyExerciseInputEnvelope
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
  }

  export type ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput> | ExerciseTagCreateWithoutExercisesInput[] | ExerciseTagUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExercisesInput | ExerciseTagCreateOrConnectWithoutExercisesInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    upsert?: UserUpsertWithoutExercisesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExercisesInput, UserUpdateWithoutExercisesInput>, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<ExerciseCategoryCreateWithoutExercisesInput, ExerciseCategoryUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutExercisesInput
    upsert?: ExerciseCategoryUpsertWithoutExercisesInput
    connect?: ExerciseCategoryWhereUniqueInput
    update?: XOR<XOR<ExerciseCategoryUpdateToOneWithWhereWithoutExercisesInput, ExerciseCategoryUpdateWithoutExercisesInput>, ExerciseCategoryUncheckedUpdateWithoutExercisesInput>
  }

  export type ClubUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<ClubCreateWithoutExercisesInput, ClubUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExercisesInput
    upsert?: ClubUpsertWithoutExercisesInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutExercisesInput, ClubUpdateWithoutExercisesInput>, ClubUncheckedUpdateWithoutExercisesInput>
  }

  export type MediaItemUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput> | MediaItemCreateWithoutExerciseInput[] | MediaItemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutExerciseInput | MediaItemCreateOrConnectWithoutExerciseInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutExerciseInput | MediaItemUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: MediaItemCreateManyExerciseInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutExerciseInput | MediaItemUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutExerciseInput | MediaItemUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type TrainingExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput> | TrainingExerciseCreateWithoutExerciseInput[] | TrainingExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutExerciseInput | TrainingExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: TrainingExerciseUpsertWithWhereUniqueWithoutExerciseInput | TrainingExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: TrainingExerciseCreateManyExerciseInputEnvelope
    set?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    disconnect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    delete?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    update?: TrainingExerciseUpdateWithWhereUniqueWithoutExerciseInput | TrainingExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: TrainingExerciseUpdateManyWithWhereWithoutExerciseInput | TrainingExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
  }

  export type ExerciseTagUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput> | ExerciseTagCreateWithoutExercisesInput[] | ExerciseTagUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExercisesInput | ExerciseTagCreateOrConnectWithoutExercisesInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutExercisesInput | ExerciseTagUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutExercisesInput | ExerciseTagUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutExercisesInput | ExerciseTagUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput> | MediaItemCreateWithoutExerciseInput[] | MediaItemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutExerciseInput | MediaItemCreateOrConnectWithoutExerciseInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutExerciseInput | MediaItemUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: MediaItemCreateManyExerciseInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutExerciseInput | MediaItemUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutExerciseInput | MediaItemUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput> | TrainingExerciseCreateWithoutExerciseInput[] | TrainingExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TrainingExerciseCreateOrConnectWithoutExerciseInput | TrainingExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: TrainingExerciseUpsertWithWhereUniqueWithoutExerciseInput | TrainingExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: TrainingExerciseCreateManyExerciseInputEnvelope
    set?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    disconnect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    delete?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    connect?: TrainingExerciseWhereUniqueInput | TrainingExerciseWhereUniqueInput[]
    update?: TrainingExerciseUpdateWithWhereUniqueWithoutExerciseInput | TrainingExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: TrainingExerciseUpdateManyWithWhereWithoutExerciseInput | TrainingExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
  }

  export type ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput> | ExerciseTagCreateWithoutExercisesInput[] | ExerciseTagUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExercisesInput | ExerciseTagCreateOrConnectWithoutExercisesInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutExercisesInput | ExerciseTagUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutExercisesInput | ExerciseTagUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutExercisesInput | ExerciseTagUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type ExerciseCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput> | ExerciseCreateWithoutCategoryInput[] | ExerciseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutCategoryInput | ExerciseCreateOrConnectWithoutCategoryInput[]
    createMany?: ExerciseCreateManyCategoryInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ClubCreateNestedOneWithoutExerciseCategoriesInput = {
    create?: XOR<ClubCreateWithoutExerciseCategoriesInput, ClubUncheckedCreateWithoutExerciseCategoriesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExerciseCategoriesInput
    connect?: ClubWhereUniqueInput
  }

  export type ExerciseTagCreateNestedManyWithoutExerciseCategoryInput = {
    create?: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput> | ExerciseTagCreateWithoutExerciseCategoryInput[] | ExerciseTagUncheckedCreateWithoutExerciseCategoryInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExerciseCategoryInput | ExerciseTagCreateOrConnectWithoutExerciseCategoryInput[]
    createMany?: ExerciseTagCreateManyExerciseCategoryInputEnvelope
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput> | ExerciseCreateWithoutCategoryInput[] | ExerciseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutCategoryInput | ExerciseCreateOrConnectWithoutCategoryInput[]
    createMany?: ExerciseCreateManyCategoryInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ExerciseTagUncheckedCreateNestedManyWithoutExerciseCategoryInput = {
    create?: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput> | ExerciseTagCreateWithoutExerciseCategoryInput[] | ExerciseTagUncheckedCreateWithoutExerciseCategoryInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExerciseCategoryInput | ExerciseTagCreateOrConnectWithoutExerciseCategoryInput[]
    createMany?: ExerciseTagCreateManyExerciseCategoryInputEnvelope
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
  }

  export type ExerciseUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput> | ExerciseCreateWithoutCategoryInput[] | ExerciseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutCategoryInput | ExerciseCreateOrConnectWithoutCategoryInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutCategoryInput | ExerciseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ExerciseCreateManyCategoryInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutCategoryInput | ExerciseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutCategoryInput | ExerciseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ClubUpdateOneRequiredWithoutExerciseCategoriesNestedInput = {
    create?: XOR<ClubCreateWithoutExerciseCategoriesInput, ClubUncheckedCreateWithoutExerciseCategoriesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExerciseCategoriesInput
    upsert?: ClubUpsertWithoutExerciseCategoriesInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutExerciseCategoriesInput, ClubUpdateWithoutExerciseCategoriesInput>, ClubUncheckedUpdateWithoutExerciseCategoriesInput>
  }

  export type ExerciseTagUpdateManyWithoutExerciseCategoryNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput> | ExerciseTagCreateWithoutExerciseCategoryInput[] | ExerciseTagUncheckedCreateWithoutExerciseCategoryInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExerciseCategoryInput | ExerciseTagCreateOrConnectWithoutExerciseCategoryInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutExerciseCategoryInput | ExerciseTagUpsertWithWhereUniqueWithoutExerciseCategoryInput[]
    createMany?: ExerciseTagCreateManyExerciseCategoryInputEnvelope
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutExerciseCategoryInput | ExerciseTagUpdateWithWhereUniqueWithoutExerciseCategoryInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutExerciseCategoryInput | ExerciseTagUpdateManyWithWhereWithoutExerciseCategoryInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput> | ExerciseCreateWithoutCategoryInput[] | ExerciseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutCategoryInput | ExerciseCreateOrConnectWithoutCategoryInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutCategoryInput | ExerciseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ExerciseCreateManyCategoryInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutCategoryInput | ExerciseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutCategoryInput | ExerciseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryNestedInput = {
    create?: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput> | ExerciseTagCreateWithoutExerciseCategoryInput[] | ExerciseTagUncheckedCreateWithoutExerciseCategoryInput[]
    connectOrCreate?: ExerciseTagCreateOrConnectWithoutExerciseCategoryInput | ExerciseTagCreateOrConnectWithoutExerciseCategoryInput[]
    upsert?: ExerciseTagUpsertWithWhereUniqueWithoutExerciseCategoryInput | ExerciseTagUpsertWithWhereUniqueWithoutExerciseCategoryInput[]
    createMany?: ExerciseTagCreateManyExerciseCategoryInputEnvelope
    set?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    disconnect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    delete?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    connect?: ExerciseTagWhereUniqueInput | ExerciseTagWhereUniqueInput[]
    update?: ExerciseTagUpdateWithWhereUniqueWithoutExerciseCategoryInput | ExerciseTagUpdateWithWhereUniqueWithoutExerciseCategoryInput[]
    updateMany?: ExerciseTagUpdateManyWithWhereWithoutExerciseCategoryInput | ExerciseTagUpdateManyWithWhereWithoutExerciseCategoryInput[]
    deleteMany?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutExerciseTagsInput = {
    create?: XOR<ClubCreateWithoutExerciseTagsInput, ClubUncheckedCreateWithoutExerciseTagsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExerciseTagsInput
    connect?: ClubWhereUniqueInput
  }

  export type ExerciseCategoryCreateNestedOneWithoutTagsInput = {
    create?: XOR<ExerciseCategoryCreateWithoutTagsInput, ExerciseCategoryUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutTagsInput
    connect?: ExerciseCategoryWhereUniqueInput
  }

  export type ExerciseCreateNestedManyWithoutTagsInput = {
    create?: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput> | ExerciseCreateWithoutTagsInput[] | ExerciseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutTagsInput | ExerciseCreateOrConnectWithoutTagsInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput> | ExerciseCreateWithoutTagsInput[] | ExerciseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutTagsInput | ExerciseCreateOrConnectWithoutTagsInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ClubUpdateOneRequiredWithoutExerciseTagsNestedInput = {
    create?: XOR<ClubCreateWithoutExerciseTagsInput, ClubUncheckedCreateWithoutExerciseTagsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutExerciseTagsInput
    upsert?: ClubUpsertWithoutExerciseTagsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutExerciseTagsInput, ClubUpdateWithoutExerciseTagsInput>, ClubUncheckedUpdateWithoutExerciseTagsInput>
  }

  export type ExerciseCategoryUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ExerciseCategoryCreateWithoutTagsInput, ExerciseCategoryUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ExerciseCategoryCreateOrConnectWithoutTagsInput
    upsert?: ExerciseCategoryUpsertWithoutTagsInput
    connect?: ExerciseCategoryWhereUniqueInput
    update?: XOR<XOR<ExerciseCategoryUpdateToOneWithWhereWithoutTagsInput, ExerciseCategoryUpdateWithoutTagsInput>, ExerciseCategoryUncheckedUpdateWithoutTagsInput>
  }

  export type ExerciseUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput> | ExerciseCreateWithoutTagsInput[] | ExerciseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutTagsInput | ExerciseCreateOrConnectWithoutTagsInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutTagsInput | ExerciseUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutTagsInput | ExerciseUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutTagsInput | ExerciseUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput> | ExerciseCreateWithoutTagsInput[] | ExerciseUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutTagsInput | ExerciseCreateOrConnectWithoutTagsInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutTagsInput | ExerciseUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutTagsInput | ExerciseUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutTagsInput | ExerciseUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<ExerciseCreateWithoutTrainingsInput, ExerciseUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutTrainingsInput
    connect?: ExerciseWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutExercisesInput = {
    create?: XOR<TrainingCreateWithoutExercisesInput, TrainingUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutExercisesInput
    connect?: TrainingWhereUniqueInput
  }

  export type ExerciseUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<ExerciseCreateWithoutTrainingsInput, ExerciseUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutTrainingsInput
    upsert?: ExerciseUpsertWithoutTrainingsInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutTrainingsInput, ExerciseUpdateWithoutTrainingsInput>, ExerciseUncheckedUpdateWithoutTrainingsInput>
  }

  export type TrainingUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<TrainingCreateWithoutExercisesInput, TrainingUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutExercisesInput
    upsert?: TrainingUpsertWithoutExercisesInput
    connect?: TrainingWhereUniqueInput
    update?: XOR<XOR<TrainingUpdateToOneWithWhereWithoutExercisesInput, TrainingUpdateWithoutExercisesInput>, TrainingUncheckedUpdateWithoutExercisesInput>
  }

  export type TeamCreateNestedOneWithoutPlayersInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerAttendanceCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput> | PlayerAttendanceCreateWithoutPlayerInput[] | PlayerAttendanceUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutPlayerInput | PlayerAttendanceCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAttendanceCreateManyPlayerInputEnvelope
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
  }

  export type PlayerDocumentCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput> | PlayerDocumentCreateWithoutPlayerInput[] | PlayerDocumentUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutPlayerInput | PlayerDocumentCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerDocumentCreateManyPlayerInputEnvelope
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
  }

  export type PlayerMatchStatCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput> | PlayerMatchStatCreateWithoutPlayerInput[] | PlayerMatchStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutPlayerInput | PlayerMatchStatCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerMatchStatCreateManyPlayerInputEnvelope
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
  }

  export type MorningSurveyResponseCreateNestedManyWithoutPlayerInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput> | MorningSurveyResponseCreateWithoutPlayerInput[] | MorningSurveyResponseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPlayerInput | MorningSurveyResponseCreateOrConnectWithoutPlayerInput[]
    createMany?: MorningSurveyResponseCreateManyPlayerInputEnvelope
    connect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
  }

  export type PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput> | PlayerAttendanceCreateWithoutPlayerInput[] | PlayerAttendanceUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutPlayerInput | PlayerAttendanceCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAttendanceCreateManyPlayerInputEnvelope
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
  }

  export type PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput> | PlayerDocumentCreateWithoutPlayerInput[] | PlayerDocumentUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutPlayerInput | PlayerDocumentCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerDocumentCreateManyPlayerInputEnvelope
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
  }

  export type PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput> | PlayerMatchStatCreateWithoutPlayerInput[] | PlayerMatchStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutPlayerInput | PlayerMatchStatCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerMatchStatCreateManyPlayerInputEnvelope
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
  }

  export type MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput> | MorningSurveyResponseCreateWithoutPlayerInput[] | MorningSurveyResponseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPlayerInput | MorningSurveyResponseCreateOrConnectWithoutPlayerInput[]
    createMany?: MorningSurveyResponseCreateManyPlayerInputEnvelope
    connect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    upsert?: TeamUpsertWithoutPlayersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPlayersInput, TeamUpdateWithoutPlayersInput>, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type PlayerAttendanceUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput> | PlayerAttendanceCreateWithoutPlayerInput[] | PlayerAttendanceUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutPlayerInput | PlayerAttendanceCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAttendanceUpsertWithWhereUniqueWithoutPlayerInput | PlayerAttendanceUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAttendanceCreateManyPlayerInputEnvelope
    set?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    disconnect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    delete?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    update?: PlayerAttendanceUpdateWithWhereUniqueWithoutPlayerInput | PlayerAttendanceUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAttendanceUpdateManyWithWhereWithoutPlayerInput | PlayerAttendanceUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
  }

  export type PlayerDocumentUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput> | PlayerDocumentCreateWithoutPlayerInput[] | PlayerDocumentUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutPlayerInput | PlayerDocumentCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerDocumentUpsertWithWhereUniqueWithoutPlayerInput | PlayerDocumentUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerDocumentCreateManyPlayerInputEnvelope
    set?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    disconnect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    delete?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    update?: PlayerDocumentUpdateWithWhereUniqueWithoutPlayerInput | PlayerDocumentUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerDocumentUpdateManyWithWhereWithoutPlayerInput | PlayerDocumentUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
  }

  export type PlayerMatchStatUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput> | PlayerMatchStatCreateWithoutPlayerInput[] | PlayerMatchStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutPlayerInput | PlayerMatchStatCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerMatchStatUpsertWithWhereUniqueWithoutPlayerInput | PlayerMatchStatUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerMatchStatCreateManyPlayerInputEnvelope
    set?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    disconnect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    delete?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    update?: PlayerMatchStatUpdateWithWhereUniqueWithoutPlayerInput | PlayerMatchStatUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerMatchStatUpdateManyWithWhereWithoutPlayerInput | PlayerMatchStatUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
  }

  export type MorningSurveyResponseUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput> | MorningSurveyResponseCreateWithoutPlayerInput[] | MorningSurveyResponseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPlayerInput | MorningSurveyResponseCreateOrConnectWithoutPlayerInput[]
    upsert?: MorningSurveyResponseUpsertWithWhereUniqueWithoutPlayerInput | MorningSurveyResponseUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: MorningSurveyResponseCreateManyPlayerInputEnvelope
    set?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    disconnect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    delete?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    connect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    update?: MorningSurveyResponseUpdateWithWhereUniqueWithoutPlayerInput | MorningSurveyResponseUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: MorningSurveyResponseUpdateManyWithWhereWithoutPlayerInput | MorningSurveyResponseUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: MorningSurveyResponseScalarWhereInput | MorningSurveyResponseScalarWhereInput[]
  }

  export type PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput> | PlayerAttendanceCreateWithoutPlayerInput[] | PlayerAttendanceUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAttendanceCreateOrConnectWithoutPlayerInput | PlayerAttendanceCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAttendanceUpsertWithWhereUniqueWithoutPlayerInput | PlayerAttendanceUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAttendanceCreateManyPlayerInputEnvelope
    set?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    disconnect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    delete?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    connect?: PlayerAttendanceWhereUniqueInput | PlayerAttendanceWhereUniqueInput[]
    update?: PlayerAttendanceUpdateWithWhereUniqueWithoutPlayerInput | PlayerAttendanceUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAttendanceUpdateManyWithWhereWithoutPlayerInput | PlayerAttendanceUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
  }

  export type PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput> | PlayerDocumentCreateWithoutPlayerInput[] | PlayerDocumentUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerDocumentCreateOrConnectWithoutPlayerInput | PlayerDocumentCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerDocumentUpsertWithWhereUniqueWithoutPlayerInput | PlayerDocumentUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerDocumentCreateManyPlayerInputEnvelope
    set?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    disconnect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    delete?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    connect?: PlayerDocumentWhereUniqueInput | PlayerDocumentWhereUniqueInput[]
    update?: PlayerDocumentUpdateWithWhereUniqueWithoutPlayerInput | PlayerDocumentUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerDocumentUpdateManyWithWhereWithoutPlayerInput | PlayerDocumentUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
  }

  export type PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput> | PlayerMatchStatCreateWithoutPlayerInput[] | PlayerMatchStatUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutPlayerInput | PlayerMatchStatCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerMatchStatUpsertWithWhereUniqueWithoutPlayerInput | PlayerMatchStatUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerMatchStatCreateManyPlayerInputEnvelope
    set?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    disconnect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    delete?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    update?: PlayerMatchStatUpdateWithWhereUniqueWithoutPlayerInput | PlayerMatchStatUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerMatchStatUpdateManyWithWhereWithoutPlayerInput | PlayerMatchStatUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
  }

  export type MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput> | MorningSurveyResponseCreateWithoutPlayerInput[] | MorningSurveyResponseUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPlayerInput | MorningSurveyResponseCreateOrConnectWithoutPlayerInput[]
    upsert?: MorningSurveyResponseUpsertWithWhereUniqueWithoutPlayerInput | MorningSurveyResponseUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: MorningSurveyResponseCreateManyPlayerInputEnvelope
    set?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    disconnect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    delete?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    connect?: MorningSurveyResponseWhereUniqueInput | MorningSurveyResponseWhereUniqueInput[]
    update?: MorningSurveyResponseUpdateWithWhereUniqueWithoutPlayerInput | MorningSurveyResponseUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: MorningSurveyResponseUpdateManyWithWhereWithoutPlayerInput | MorningSurveyResponseUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: MorningSurveyResponseScalarWhereInput | MorningSurveyResponseScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<PlayerCreateWithoutDocumentsInput, PlayerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutDocumentsInput
    connect?: PlayerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlayerDocumentsInput = {
    create?: XOR<UserCreateWithoutPlayerDocumentsInput, UserUncheckedCreateWithoutPlayerDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayerDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type PlayerUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<PlayerCreateWithoutDocumentsInput, PlayerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutDocumentsInput
    upsert?: PlayerUpsertWithoutDocumentsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutDocumentsInput, PlayerUpdateWithoutDocumentsInput>, PlayerUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateOneRequiredWithoutPlayerDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutPlayerDocumentsInput, UserUncheckedCreateWithoutPlayerDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayerDocumentsInput
    upsert?: UserUpsertWithoutPlayerDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlayerDocumentsInput, UserUpdateWithoutPlayerDocumentsInput>, UserUncheckedUpdateWithoutPlayerDocumentsInput>
  }

  export type TeamCreateNestedOneWithoutCoachesInput = {
    create?: XOR<TeamCreateWithoutCoachesInput, TeamUncheckedCreateWithoutCoachesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachesInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamCoachesInput = {
    create?: XOR<UserCreateWithoutTeamCoachesInput, UserUncheckedCreateWithoutTeamCoachesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamCoachesInput
    connect?: UserWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutCoachesNestedInput = {
    create?: XOR<TeamCreateWithoutCoachesInput, TeamUncheckedCreateWithoutCoachesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachesInput
    upsert?: TeamUpsertWithoutCoachesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutCoachesInput, TeamUpdateWithoutCoachesInput>, TeamUncheckedUpdateWithoutCoachesInput>
  }

  export type UserUpdateOneRequiredWithoutTeamCoachesNestedInput = {
    create?: XOR<UserCreateWithoutTeamCoachesInput, UserUncheckedCreateWithoutTeamCoachesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamCoachesInput
    upsert?: UserUpsertWithoutTeamCoachesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamCoachesInput, UserUpdateWithoutTeamCoachesInput>, UserUncheckedUpdateWithoutTeamCoachesInput>
  }

  export type PlayerCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<PlayerCreateWithoutAttendancesInput, PlayerUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAttendancesInput
    connect?: PlayerWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<TrainingCreateWithoutAttendancesInput, TrainingUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutAttendancesInput
    connect?: TrainingWhereUniqueInput
  }

  export type EnumAttendanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceStatus
  }

  export type PlayerUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<PlayerCreateWithoutAttendancesInput, PlayerUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAttendancesInput
    upsert?: PlayerUpsertWithoutAttendancesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutAttendancesInput, PlayerUpdateWithoutAttendancesInput>, PlayerUncheckedUpdateWithoutAttendancesInput>
  }

  export type TrainingUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<TrainingCreateWithoutAttendancesInput, TrainingUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutAttendancesInput
    upsert?: TrainingUpsertWithoutAttendancesInput
    connect?: TrainingWhereUniqueInput
    update?: XOR<XOR<TrainingUpdateToOneWithWhereWithoutAttendancesInput, TrainingUpdateWithoutAttendancesInput>, TrainingUncheckedUpdateWithoutAttendancesInput>
  }

  export type ClubCreateNestedOneWithoutMatchesInput = {
    create?: XOR<ClubCreateWithoutMatchesInput, ClubUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMatchesInput
    connect?: ClubWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TeamCreateWithoutMatchesInput, TeamUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMatchesInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerMatchStatCreateNestedManyWithoutMatchInput = {
    create?: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput> | PlayerMatchStatCreateWithoutMatchInput[] | PlayerMatchStatUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutMatchInput | PlayerMatchStatCreateOrConnectWithoutMatchInput[]
    createMany?: PlayerMatchStatCreateManyMatchInputEnvelope
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
  }

  export type PlayerMatchStatUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput> | PlayerMatchStatCreateWithoutMatchInput[] | PlayerMatchStatUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutMatchInput | PlayerMatchStatCreateOrConnectWithoutMatchInput[]
    createMany?: PlayerMatchStatCreateManyMatchInputEnvelope
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
  }

  export type EnumCompetitionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CompetitionType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClubUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<ClubCreateWithoutMatchesInput, ClubUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMatchesInput
    upsert?: ClubUpsertWithoutMatchesInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutMatchesInput, ClubUpdateWithoutMatchesInput>, ClubUncheckedUpdateWithoutMatchesInput>
  }

  export type TeamUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<TeamCreateWithoutMatchesInput, TeamUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMatchesInput
    upsert?: TeamUpsertWithoutMatchesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMatchesInput, TeamUpdateWithoutMatchesInput>, TeamUncheckedUpdateWithoutMatchesInput>
  }

  export type PlayerMatchStatUpdateManyWithoutMatchNestedInput = {
    create?: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput> | PlayerMatchStatCreateWithoutMatchInput[] | PlayerMatchStatUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutMatchInput | PlayerMatchStatCreateOrConnectWithoutMatchInput[]
    upsert?: PlayerMatchStatUpsertWithWhereUniqueWithoutMatchInput | PlayerMatchStatUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: PlayerMatchStatCreateManyMatchInputEnvelope
    set?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    disconnect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    delete?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    update?: PlayerMatchStatUpdateWithWhereUniqueWithoutMatchInput | PlayerMatchStatUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: PlayerMatchStatUpdateManyWithWhereWithoutMatchInput | PlayerMatchStatUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
  }

  export type PlayerMatchStatUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput> | PlayerMatchStatCreateWithoutMatchInput[] | PlayerMatchStatUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: PlayerMatchStatCreateOrConnectWithoutMatchInput | PlayerMatchStatCreateOrConnectWithoutMatchInput[]
    upsert?: PlayerMatchStatUpsertWithWhereUniqueWithoutMatchInput | PlayerMatchStatUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: PlayerMatchStatCreateManyMatchInputEnvelope
    set?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    disconnect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    delete?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    connect?: PlayerMatchStatWhereUniqueInput | PlayerMatchStatWhereUniqueInput[]
    update?: PlayerMatchStatUpdateWithWhereUniqueWithoutMatchInput | PlayerMatchStatUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: PlayerMatchStatUpdateManyWithWhereWithoutMatchInput | PlayerMatchStatUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutPlayerStatsInput = {
    create?: XOR<MatchCreateWithoutPlayerStatsInput, MatchUncheckedCreateWithoutPlayerStatsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutPlayerStatsInput
    connect?: MatchWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutMatchStatsInput = {
    create?: XOR<PlayerCreateWithoutMatchStatsInput, PlayerUncheckedCreateWithoutMatchStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatchStatsInput
    connect?: PlayerWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutPlayerStatsNestedInput = {
    create?: XOR<MatchCreateWithoutPlayerStatsInput, MatchUncheckedCreateWithoutPlayerStatsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutPlayerStatsInput
    upsert?: MatchUpsertWithoutPlayerStatsInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutPlayerStatsInput, MatchUpdateWithoutPlayerStatsInput>, MatchUncheckedUpdateWithoutPlayerStatsInput>
  }

  export type PlayerUpdateOneRequiredWithoutMatchStatsNestedInput = {
    create?: XOR<PlayerCreateWithoutMatchStatsInput, PlayerUncheckedCreateWithoutMatchStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatchStatsInput
    upsert?: PlayerUpsertWithoutMatchStatsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMatchStatsInput, PlayerUpdateWithoutMatchStatsInput>, PlayerUncheckedUpdateWithoutMatchStatsInput>
  }

  export type ScheduleEventCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput> | ScheduleEventCreateWithoutScheduleInput[] | ScheduleEventUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleEventCreateOrConnectWithoutScheduleInput | ScheduleEventCreateOrConnectWithoutScheduleInput[]
    createMany?: ScheduleEventCreateManyScheduleInputEnvelope
    connect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
  }

  export type ScheduleEventUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput> | ScheduleEventCreateWithoutScheduleInput[] | ScheduleEventUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleEventCreateOrConnectWithoutScheduleInput | ScheduleEventCreateOrConnectWithoutScheduleInput[]
    createMany?: ScheduleEventCreateManyScheduleInputEnvelope
    connect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
  }

  export type ScheduleEventUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput> | ScheduleEventCreateWithoutScheduleInput[] | ScheduleEventUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleEventCreateOrConnectWithoutScheduleInput | ScheduleEventCreateOrConnectWithoutScheduleInput[]
    upsert?: ScheduleEventUpsertWithWhereUniqueWithoutScheduleInput | ScheduleEventUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ScheduleEventCreateManyScheduleInputEnvelope
    set?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    disconnect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    delete?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    connect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    update?: ScheduleEventUpdateWithWhereUniqueWithoutScheduleInput | ScheduleEventUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ScheduleEventUpdateManyWithWhereWithoutScheduleInput | ScheduleEventUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ScheduleEventScalarWhereInput | ScheduleEventScalarWhereInput[]
  }

  export type ScheduleEventUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput> | ScheduleEventCreateWithoutScheduleInput[] | ScheduleEventUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ScheduleEventCreateOrConnectWithoutScheduleInput | ScheduleEventCreateOrConnectWithoutScheduleInput[]
    upsert?: ScheduleEventUpsertWithWhereUniqueWithoutScheduleInput | ScheduleEventUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ScheduleEventCreateManyScheduleInputEnvelope
    set?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    disconnect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    delete?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    connect?: ScheduleEventWhereUniqueInput | ScheduleEventWhereUniqueInput[]
    update?: ScheduleEventUpdateWithWhereUniqueWithoutScheduleInput | ScheduleEventUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ScheduleEventUpdateManyWithWhereWithoutScheduleInput | ScheduleEventUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ScheduleEventScalarWhereInput | ScheduleEventScalarWhereInput[]
  }

  export type ScheduleCreateNestedOneWithoutEventsInput = {
    create?: XOR<ScheduleCreateWithoutEventsInput, ScheduleUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutEventsInput
    connect?: ScheduleWhereUniqueInput
  }

  export type ScheduleUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<ScheduleCreateWithoutEventsInput, ScheduleUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutEventsInput
    upsert?: ScheduleUpsertWithoutEventsInput
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutEventsInput, ScheduleUpdateWithoutEventsInput>, ScheduleUncheckedUpdateWithoutEventsInput>
  }

  export type PlayerCreateNestedOneWithoutMorningSurveysInput = {
    create?: XOR<PlayerCreateWithoutMorningSurveysInput, PlayerUncheckedCreateWithoutMorningSurveysInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMorningSurveysInput
    connect?: PlayerWhereUniqueInput
  }

  export type PainAreaCreateNestedManyWithoutSurveyInput = {
    create?: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput> | PainAreaCreateWithoutSurveyInput[] | PainAreaUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: PainAreaCreateOrConnectWithoutSurveyInput | PainAreaCreateOrConnectWithoutSurveyInput[]
    createMany?: PainAreaCreateManySurveyInputEnvelope
    connect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
  }

  export type PainAreaUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput> | PainAreaCreateWithoutSurveyInput[] | PainAreaUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: PainAreaCreateOrConnectWithoutSurveyInput | PainAreaCreateOrConnectWithoutSurveyInput[]
    createMany?: PainAreaCreateManySurveyInputEnvelope
    connect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUpdateOneRequiredWithoutMorningSurveysNestedInput = {
    create?: XOR<PlayerCreateWithoutMorningSurveysInput, PlayerUncheckedCreateWithoutMorningSurveysInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMorningSurveysInput
    upsert?: PlayerUpsertWithoutMorningSurveysInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMorningSurveysInput, PlayerUpdateWithoutMorningSurveysInput>, PlayerUncheckedUpdateWithoutMorningSurveysInput>
  }

  export type PainAreaUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput> | PainAreaCreateWithoutSurveyInput[] | PainAreaUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: PainAreaCreateOrConnectWithoutSurveyInput | PainAreaCreateOrConnectWithoutSurveyInput[]
    upsert?: PainAreaUpsertWithWhereUniqueWithoutSurveyInput | PainAreaUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: PainAreaCreateManySurveyInputEnvelope
    set?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    disconnect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    delete?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    connect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    update?: PainAreaUpdateWithWhereUniqueWithoutSurveyInput | PainAreaUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: PainAreaUpdateManyWithWhereWithoutSurveyInput | PainAreaUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: PainAreaScalarWhereInput | PainAreaScalarWhereInput[]
  }

  export type PainAreaUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput> | PainAreaCreateWithoutSurveyInput[] | PainAreaUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: PainAreaCreateOrConnectWithoutSurveyInput | PainAreaCreateOrConnectWithoutSurveyInput[]
    upsert?: PainAreaUpsertWithWhereUniqueWithoutSurveyInput | PainAreaUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: PainAreaCreateManySurveyInputEnvelope
    set?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    disconnect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    delete?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    connect?: PainAreaWhereUniqueInput | PainAreaWhereUniqueInput[]
    update?: PainAreaUpdateWithWhereUniqueWithoutSurveyInput | PainAreaUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: PainAreaUpdateManyWithWhereWithoutSurveyInput | PainAreaUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: PainAreaScalarWhereInput | PainAreaScalarWhereInput[]
  }

  export type MorningSurveyResponseCreateNestedOneWithoutPainAreasInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPainAreasInput, MorningSurveyResponseUncheckedCreateWithoutPainAreasInput>
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPainAreasInput
    connect?: MorningSurveyResponseWhereUniqueInput
  }

  export type MorningSurveyResponseUpdateOneRequiredWithoutPainAreasNestedInput = {
    create?: XOR<MorningSurveyResponseCreateWithoutPainAreasInput, MorningSurveyResponseUncheckedCreateWithoutPainAreasInput>
    connectOrCreate?: MorningSurveyResponseCreateOrConnectWithoutPainAreasInput
    upsert?: MorningSurveyResponseUpsertWithoutPainAreasInput
    connect?: MorningSurveyResponseWhereUniqueInput
    update?: XOR<XOR<MorningSurveyResponseUpdateToOneWithWhereWithoutPainAreasInput, MorningSurveyResponseUpdateWithoutPainAreasInput>, MorningSurveyResponseUncheckedUpdateWithoutPainAreasInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type NestedEnumTrainingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingStatus | EnumTrainingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStatusFilter<$PrismaModel> | $Enums.TrainingStatus
  }

  export type NestedEnumTrainingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingStatus | EnumTrainingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingStatus[] | ListEnumTrainingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStatusWithAggregatesFilter<$PrismaModel> | $Enums.TrainingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingStatusFilter<$PrismaModel>
    _max?: NestedEnumTrainingStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type NestedEnumCompetitionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionType | EnumCompetitionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionTypeFilter<$PrismaModel> | $Enums.CompetitionType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumCompetitionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionType | EnumCompetitionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionType[] | ListEnumCompetitionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionTypeFilter<$PrismaModel>
    _max?: NestedEnumCompetitionTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EventCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutEventsInput
    team?: TeamCreateNestedOneWithoutEventsInput
    mediaItems?: MediaItemCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId?: string | null
    createdById: string
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutClubInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput>
  }

  export type EventCreateManyClubInputEnvelope = {
    data: EventCreateManyClubInput | EventCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutClubInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutClubInput = {
    id?: string
    title: string
    description: string
    authorId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutClubInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput>
  }

  export type ExerciseCreateManyClubInputEnvelope = {
    data: ExerciseCreateManyClubInput | ExerciseCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCategoryCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutCategoryInput
    tags?: ExerciseTagCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutCategoryInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryCreateOrConnectWithoutClubInput = {
    where: ExerciseCategoryWhereUniqueInput
    create: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput>
  }

  export type ExerciseCategoryCreateManyClubInputEnvelope = {
    data: ExerciseCategoryCreateManyClubInput | ExerciseCategoryCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseTagCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exerciseCategory: ExerciseCategoryCreateNestedOneWithoutTagsInput
    exercises?: ExerciseCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exerciseCategoryId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagCreateOrConnectWithoutClubInput = {
    where: ExerciseTagWhereUniqueInput
    create: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput>
  }

  export type ExerciseTagCreateManyClubInputEnvelope = {
    data: ExerciseTagCreateManyClubInput | ExerciseTagCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutClubInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    team: TeamCreateNestedOneWithoutMatchesInput
    playerStats?: PlayerMatchStatCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutClubInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutClubInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput>
  }

  export type MatchCreateManyClubInputEnvelope = {
    data: MatchCreateManyClubInput | MatchCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutClubInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicUrl?: string | null
    event?: EventCreateNestedOneWithoutMediaItemsInput
    exercise?: ExerciseCreateNestedOneWithoutMediaItemsInput
    uploadedBy: UserCreateNestedOneWithoutMediaUploadsInput
  }

  export type MediaItemUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemCreateOrConnectWithoutClubInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput>
  }

  export type MediaItemCreateManyClubInputEnvelope = {
    data: MediaItemCreateManyClubInput | MediaItemCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutClubInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    matches?: MatchCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutClubInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput>
  }

  export type TeamCreateManyClubInputEnvelope = {
    data: TeamCreateManyClubInput | TeamCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutClubInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutClubInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput>
  }

  export type TrainingCreateManyClubInputEnvelope = {
    data: TrainingCreateManyClubInput | TrainingCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCategoryCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trainings?: TrainingCreateNestedManyWithoutCategoryInput
  }

  export type TrainingCategoryUncheckedCreateWithoutClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trainings?: TrainingUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TrainingCategoryCreateOrConnectWithoutClubInput = {
    where: TrainingCategoryWhereUniqueInput
    create: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput>
  }

  export type TrainingCategoryCreateManyClubInputEnvelope = {
    data: TrainingCategoryCreateManyClubInput | TrainingCategoryCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutClubInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutClubInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutClubInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput>
  }

  export type UserCreateManyClubInputEnvelope = {
    data: UserCreateManyClubInput | UserCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutClubInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutClubInput, EventUncheckedUpdateWithoutClubInput>
    create: XOR<EventCreateWithoutClubInput, EventUncheckedCreateWithoutClubInput>
  }

  export type EventUpdateWithWhereUniqueWithoutClubInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutClubInput, EventUncheckedUpdateWithoutClubInput>
  }

  export type EventUpdateManyWithWhereWithoutClubInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutClubInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    location?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    clubId?: StringFilter<"Event"> | string
    teamId?: StringNullableFilter<"Event"> | string | null
    createdById?: StringFilter<"Event"> | string
  }

  export type ExerciseUpsertWithWhereUniqueWithoutClubInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutClubInput, ExerciseUncheckedUpdateWithoutClubInput>
    create: XOR<ExerciseCreateWithoutClubInput, ExerciseUncheckedCreateWithoutClubInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutClubInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutClubInput, ExerciseUncheckedUpdateWithoutClubInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutClubInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutClubInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: StringFilter<"Exercise"> | string
    title?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    authorId?: StringFilter<"Exercise"> | string
    clubId?: StringFilter<"Exercise"> | string
    categoryId?: StringFilter<"Exercise"> | string
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    length?: FloatNullableFilter<"Exercise"> | number | null
    width?: FloatNullableFilter<"Exercise"> | number | null
  }

  export type ExerciseCategoryUpsertWithWhereUniqueWithoutClubInput = {
    where: ExerciseCategoryWhereUniqueInput
    update: XOR<ExerciseCategoryUpdateWithoutClubInput, ExerciseCategoryUncheckedUpdateWithoutClubInput>
    create: XOR<ExerciseCategoryCreateWithoutClubInput, ExerciseCategoryUncheckedCreateWithoutClubInput>
  }

  export type ExerciseCategoryUpdateWithWhereUniqueWithoutClubInput = {
    where: ExerciseCategoryWhereUniqueInput
    data: XOR<ExerciseCategoryUpdateWithoutClubInput, ExerciseCategoryUncheckedUpdateWithoutClubInput>
  }

  export type ExerciseCategoryUpdateManyWithWhereWithoutClubInput = {
    where: ExerciseCategoryScalarWhereInput
    data: XOR<ExerciseCategoryUpdateManyMutationInput, ExerciseCategoryUncheckedUpdateManyWithoutClubInput>
  }

  export type ExerciseCategoryScalarWhereInput = {
    AND?: ExerciseCategoryScalarWhereInput | ExerciseCategoryScalarWhereInput[]
    OR?: ExerciseCategoryScalarWhereInput[]
    NOT?: ExerciseCategoryScalarWhereInput | ExerciseCategoryScalarWhereInput[]
    id?: StringFilter<"ExerciseCategory"> | string
    name?: StringFilter<"ExerciseCategory"> | string
    createdAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseCategory"> | Date | string
    clubId?: StringFilter<"ExerciseCategory"> | string
  }

  export type ExerciseTagUpsertWithWhereUniqueWithoutClubInput = {
    where: ExerciseTagWhereUniqueInput
    update: XOR<ExerciseTagUpdateWithoutClubInput, ExerciseTagUncheckedUpdateWithoutClubInput>
    create: XOR<ExerciseTagCreateWithoutClubInput, ExerciseTagUncheckedCreateWithoutClubInput>
  }

  export type ExerciseTagUpdateWithWhereUniqueWithoutClubInput = {
    where: ExerciseTagWhereUniqueInput
    data: XOR<ExerciseTagUpdateWithoutClubInput, ExerciseTagUncheckedUpdateWithoutClubInput>
  }

  export type ExerciseTagUpdateManyWithWhereWithoutClubInput = {
    where: ExerciseTagScalarWhereInput
    data: XOR<ExerciseTagUpdateManyMutationInput, ExerciseTagUncheckedUpdateManyWithoutClubInput>
  }

  export type ExerciseTagScalarWhereInput = {
    AND?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
    OR?: ExerciseTagScalarWhereInput[]
    NOT?: ExerciseTagScalarWhereInput | ExerciseTagScalarWhereInput[]
    id?: StringFilter<"ExerciseTag"> | string
    name?: StringFilter<"ExerciseTag"> | string
    createdAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    updatedAt?: DateTimeFilter<"ExerciseTag"> | Date | string
    clubId?: StringFilter<"ExerciseTag"> | string
    exerciseCategoryId?: StringFilter<"ExerciseTag"> | string
  }

  export type MatchUpsertWithWhereUniqueWithoutClubInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutClubInput, MatchUncheckedUpdateWithoutClubInput>
    create: XOR<MatchCreateWithoutClubInput, MatchUncheckedCreateWithoutClubInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutClubInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutClubInput, MatchUncheckedUpdateWithoutClubInput>
  }

  export type MatchUpdateManyWithWhereWithoutClubInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutClubInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    competitionType?: EnumCompetitionTypeFilter<"Match"> | $Enums.CompetitionType
    date?: DateTimeFilter<"Match"> | Date | string
    time?: StringFilter<"Match"> | string
    isHome?: BoolFilter<"Match"> | boolean
    teamId?: StringFilter<"Match"> | string
    opponentName?: StringFilter<"Match"> | string
    teamGoals?: IntFilter<"Match"> | number
    opponentGoals?: IntFilter<"Match"> | number
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    clubId?: StringFilter<"Match"> | string
    formation?: StringNullableFilter<"Match"> | string | null
    gameFormat?: StringNullableFilter<"Match"> | string | null
    markerColor?: StringNullableFilter<"Match"> | string | null
    notes?: StringNullableFilter<"Match"> | string | null
    playerPositions?: JsonNullableFilter<"Match">
    positionAssignments?: JsonNullableFilter<"Match">
  }

  export type MediaItemUpsertWithWhereUniqueWithoutClubInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutClubInput, MediaItemUncheckedUpdateWithoutClubInput>
    create: XOR<MediaItemCreateWithoutClubInput, MediaItemUncheckedCreateWithoutClubInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutClubInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutClubInput, MediaItemUncheckedUpdateWithoutClubInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutClubInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutClubInput>
  }

  export type MediaItemScalarWhereInput = {
    AND?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
    OR?: MediaItemScalarWhereInput[]
    NOT?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
    id?: StringFilter<"MediaItem"> | string
    name?: StringFilter<"MediaItem"> | string
    type?: EnumMediaTypeFilter<"MediaItem"> | $Enums.MediaType
    url?: StringFilter<"MediaItem"> | string
    size?: IntFilter<"MediaItem"> | number
    description?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
    clubId?: StringFilter<"MediaItem"> | string
    eventId?: StringNullableFilter<"MediaItem"> | string | null
    uploadedById?: StringFilter<"MediaItem"> | string
    exerciseId?: StringNullableFilter<"MediaItem"> | string | null
    publicUrl?: StringNullableFilter<"MediaItem"> | string | null
  }

  export type TeamUpsertWithWhereUniqueWithoutClubInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutClubInput, TeamUncheckedUpdateWithoutClubInput>
    create: XOR<TeamCreateWithoutClubInput, TeamUncheckedCreateWithoutClubInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutClubInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutClubInput, TeamUncheckedUpdateWithoutClubInput>
  }

  export type TeamUpdateManyWithWhereWithoutClubInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutClubInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    clubId?: StringFilter<"Team"> | string
    order?: IntFilter<"Team"> | number
  }

  export type TrainingUpsertWithWhereUniqueWithoutClubInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutClubInput, TrainingUncheckedUpdateWithoutClubInput>
    create: XOR<TrainingCreateWithoutClubInput, TrainingUncheckedCreateWithoutClubInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutClubInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutClubInput, TrainingUncheckedUpdateWithoutClubInput>
  }

  export type TrainingUpdateManyWithWhereWithoutClubInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutClubInput>
  }

  export type TrainingScalarWhereInput = {
    AND?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    OR?: TrainingScalarWhereInput[]
    NOT?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    id?: StringFilter<"Training"> | string
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    date?: DateTimeFilter<"Training"> | Date | string
    time?: StringFilter<"Training"> | string
    location?: StringNullableFilter<"Training"> | string | null
    notes?: StringNullableFilter<"Training"> | string | null
    status?: EnumTrainingStatusFilter<"Training"> | $Enums.TrainingStatus
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    clubId?: StringFilter<"Training"> | string
    teamId?: StringFilter<"Training"> | string
    categoryId?: StringFilter<"Training"> | string
    createdById?: StringFilter<"Training"> | string
    type?: StringFilter<"Training"> | string
  }

  export type TrainingCategoryUpsertWithWhereUniqueWithoutClubInput = {
    where: TrainingCategoryWhereUniqueInput
    update: XOR<TrainingCategoryUpdateWithoutClubInput, TrainingCategoryUncheckedUpdateWithoutClubInput>
    create: XOR<TrainingCategoryCreateWithoutClubInput, TrainingCategoryUncheckedCreateWithoutClubInput>
  }

  export type TrainingCategoryUpdateWithWhereUniqueWithoutClubInput = {
    where: TrainingCategoryWhereUniqueInput
    data: XOR<TrainingCategoryUpdateWithoutClubInput, TrainingCategoryUncheckedUpdateWithoutClubInput>
  }

  export type TrainingCategoryUpdateManyWithWhereWithoutClubInput = {
    where: TrainingCategoryScalarWhereInput
    data: XOR<TrainingCategoryUpdateManyMutationInput, TrainingCategoryUncheckedUpdateManyWithoutClubInput>
  }

  export type TrainingCategoryScalarWhereInput = {
    AND?: TrainingCategoryScalarWhereInput | TrainingCategoryScalarWhereInput[]
    OR?: TrainingCategoryScalarWhereInput[]
    NOT?: TrainingCategoryScalarWhereInput | TrainingCategoryScalarWhereInput[]
    id?: StringFilter<"TrainingCategory"> | string
    name?: StringFilter<"TrainingCategory"> | string
    createdAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingCategory"> | Date | string
    clubId?: StringFilter<"TrainingCategory"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutClubInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutClubInput, UserUncheckedUpdateWithoutClubInput>
    create: XOR<UserCreateWithoutClubInput, UserUncheckedCreateWithoutClubInput>
  }

  export type UserUpdateWithWhereUniqueWithoutClubInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutClubInput, UserUncheckedUpdateWithoutClubInput>
  }

  export type UserUpdateManyWithWhereWithoutClubInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutClubInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    imageUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    clubId?: StringFilter<"User"> | string
  }

  export type EventCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutEventsInput
    team?: TeamCreateNestedOneWithoutEventsInput
    mediaItems?: MediaItemCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId?: string | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput>
  }

  export type EventCreateManyCreatedByInputEnvelope = {
    data: EventCreateManyCreatedByInput | EventCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutAuthorInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput>
  }

  export type ExerciseCreateManyAuthorInputEnvelope = {
    data: ExerciseCreateManyAuthorInput | ExerciseCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutUploadedByInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicUrl?: string | null
    club: ClubCreateNestedOneWithoutMediaItemsInput
    event?: EventCreateNestedOneWithoutMediaItemsInput
    exercise?: ExerciseCreateNestedOneWithoutMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutUploadedByInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemCreateOrConnectWithoutUploadedByInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput>
  }

  export type MediaItemCreateManyUploadedByInputEnvelope = {
    data: MediaItemCreateManyUploadedByInput | MediaItemCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type PlayerDocumentCreateWithoutUploadedByInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    player: PlayerCreateNestedOneWithoutDocumentsInput
  }

  export type PlayerDocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playerId: string
    clubId: string
  }

  export type PlayerDocumentCreateOrConnectWithoutUploadedByInput = {
    where: PlayerDocumentWhereUniqueInput
    create: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type PlayerDocumentCreateManyUploadedByInputEnvelope = {
    data: PlayerDocumentCreateManyUploadedByInput | PlayerDocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type TeamCoachCreateWithoutUserInput = {
    id?: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutCoachesInput
  }

  export type TeamCoachUncheckedCreateWithoutUserInput = {
    id?: string
    teamId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCoachCreateOrConnectWithoutUserInput = {
    where: TeamCoachWhereUniqueInput
    create: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput>
  }

  export type TeamCoachCreateManyUserInputEnvelope = {
    data: TeamCoachCreateManyUserInput | TeamCoachCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutCreatedByInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput>
  }

  export type TrainingCreateManyCreatedByInputEnvelope = {
    data: TrainingCreateManyCreatedByInput | TrainingCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutUsersInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutUsersInput, ClubUncheckedCreateWithoutUsersInput>
  }

  export type EventUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCreatedByInput, EventUncheckedUpdateWithoutCreatedByInput>
    create: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCreatedByInput, EventUncheckedUpdateWithoutCreatedByInput>
  }

  export type EventUpdateManyWithWhereWithoutCreatedByInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ExerciseUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutAuthorInput, ExerciseUncheckedUpdateWithoutAuthorInput>
    create: XOR<ExerciseCreateWithoutAuthorInput, ExerciseUncheckedCreateWithoutAuthorInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutAuthorInput, ExerciseUncheckedUpdateWithoutAuthorInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutAuthorInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutAuthorInput>
  }

  export type MediaItemUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutUploadedByInput, MediaItemUncheckedUpdateWithoutUploadedByInput>
    create: XOR<MediaItemCreateWithoutUploadedByInput, MediaItemUncheckedCreateWithoutUploadedByInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutUploadedByInput, MediaItemUncheckedUpdateWithoutUploadedByInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutUploadedByInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type PlayerDocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: PlayerDocumentWhereUniqueInput
    update: XOR<PlayerDocumentUpdateWithoutUploadedByInput, PlayerDocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<PlayerDocumentCreateWithoutUploadedByInput, PlayerDocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type PlayerDocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: PlayerDocumentWhereUniqueInput
    data: XOR<PlayerDocumentUpdateWithoutUploadedByInput, PlayerDocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type PlayerDocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: PlayerDocumentScalarWhereInput
    data: XOR<PlayerDocumentUpdateManyMutationInput, PlayerDocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type PlayerDocumentScalarWhereInput = {
    AND?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
    OR?: PlayerDocumentScalarWhereInput[]
    NOT?: PlayerDocumentScalarWhereInput | PlayerDocumentScalarWhereInput[]
    id?: StringFilter<"PlayerDocument"> | string
    name?: StringFilter<"PlayerDocument"> | string
    type?: EnumDocumentTypeFilter<"PlayerDocument"> | $Enums.DocumentType
    url?: StringFilter<"PlayerDocument"> | string
    publicUrl?: StringFilter<"PlayerDocument"> | string
    size?: IntFilter<"PlayerDocument"> | number
    createdAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerDocument"> | Date | string
    playerId?: StringFilter<"PlayerDocument"> | string
    clubId?: StringFilter<"PlayerDocument"> | string
    uploadedById?: StringFilter<"PlayerDocument"> | string
  }

  export type TeamCoachUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamCoachWhereUniqueInput
    update: XOR<TeamCoachUpdateWithoutUserInput, TeamCoachUncheckedUpdateWithoutUserInput>
    create: XOR<TeamCoachCreateWithoutUserInput, TeamCoachUncheckedCreateWithoutUserInput>
  }

  export type TeamCoachUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamCoachWhereUniqueInput
    data: XOR<TeamCoachUpdateWithoutUserInput, TeamCoachUncheckedUpdateWithoutUserInput>
  }

  export type TeamCoachUpdateManyWithWhereWithoutUserInput = {
    where: TeamCoachScalarWhereInput
    data: XOR<TeamCoachUpdateManyMutationInput, TeamCoachUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamCoachScalarWhereInput = {
    AND?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
    OR?: TeamCoachScalarWhereInput[]
    NOT?: TeamCoachScalarWhereInput | TeamCoachScalarWhereInput[]
    id?: StringFilter<"TeamCoach"> | string
    teamId?: StringFilter<"TeamCoach"> | string
    userId?: StringFilter<"TeamCoach"> | string
    role?: StringNullableFilter<"TeamCoach"> | string | null
    createdAt?: DateTimeFilter<"TeamCoach"> | Date | string
    updatedAt?: DateTimeFilter<"TeamCoach"> | Date | string
  }

  export type TrainingUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutCreatedByInput, TrainingUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TrainingCreateWithoutCreatedByInput, TrainingUncheckedCreateWithoutCreatedByInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutCreatedByInput, TrainingUncheckedUpdateWithoutCreatedByInput>
  }

  export type TrainingUpdateManyWithWhereWithoutCreatedByInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ClubUpsertWithoutUsersInput = {
    update: XOR<ClubUpdateWithoutUsersInput, ClubUncheckedUpdateWithoutUsersInput>
    create: XOR<ClubCreateWithoutUsersInput, ClubUncheckedCreateWithoutUsersInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutUsersInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutUsersInput, ClubUncheckedUpdateWithoutUsersInput>
  }

  export type ClubUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
  }

  export type EventCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutEventsInput
    createdBy: UserCreateNestedOneWithoutEventsInput
    mediaItems?: MediaItemCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    createdById: string
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTeamInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput>
  }

  export type EventCreateManyTeamInputEnvelope = {
    data: EventCreateManyTeamInput | EventCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutTeamInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club: ClubCreateNestedOneWithoutMatchesInput
    playerStats?: PlayerMatchStatCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutTeamInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutTeamInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput>
  }

  export type MatchCreateManyTeamInputEnvelope = {
    data: MatchCreateManyTeamInput | MatchCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutTeamInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: PlayerAttendanceCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: PlayerCreateManyTeamInput | PlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutTeamsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutTeamsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutTeamsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutTeamsInput, ClubUncheckedCreateWithoutTeamsInput>
  }

  export type TeamCoachCreateWithoutTeamInput = {
    id?: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTeamCoachesInput
  }

  export type TeamCoachUncheckedCreateWithoutTeamInput = {
    id?: string
    userId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCoachCreateOrConnectWithoutTeamInput = {
    where: TeamCoachWhereUniqueInput
    create: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput>
  }

  export type TeamCoachCreateManyTeamInputEnvelope = {
    data: TeamCoachCreateManyTeamInput | TeamCoachCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    categoryId: string
    createdById: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutTeamInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput>
  }

  export type TrainingCreateManyTeamInputEnvelope = {
    data: TrainingCreateManyTeamInput | TrainingCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutTeamInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutTeamInput, EventUncheckedUpdateWithoutTeamInput>
    create: XOR<EventCreateWithoutTeamInput, EventUncheckedCreateWithoutTeamInput>
  }

  export type EventUpdateWithWhereUniqueWithoutTeamInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutTeamInput, EventUncheckedUpdateWithoutTeamInput>
  }

  export type EventUpdateManyWithWhereWithoutTeamInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutTeamInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutTeamInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutTeamInput, MatchUncheckedUpdateWithoutTeamInput>
    create: XOR<MatchCreateWithoutTeamInput, MatchUncheckedCreateWithoutTeamInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutTeamInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutTeamInput, MatchUncheckedUpdateWithoutTeamInput>
  }

  export type MatchUpdateManyWithWhereWithoutTeamInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: StringFilter<"Player"> | string
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    middleName?: StringNullableFilter<"Player"> | string | null
    number?: IntNullableFilter<"Player"> | number | null
    position?: StringNullableFilter<"Player"> | string | null
    strongFoot?: StringNullableFilter<"Player"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Player"> | Date | string | null
    academyJoinDate?: DateTimeNullableFilter<"Player"> | Date | string | null
    nationality?: StringNullableFilter<"Player"> | string | null
    imageUrl?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    birthCertificateNumber?: StringNullableFilter<"Player"> | string | null
    pinCode?: StringFilter<"Player"> | string
    telegramId?: StringNullableFilter<"Player"> | string | null
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
    teamId?: StringFilter<"Player"> | string
  }

  export type ClubUpsertWithoutTeamsInput = {
    update: XOR<ClubUpdateWithoutTeamsInput, ClubUncheckedUpdateWithoutTeamsInput>
    create: XOR<ClubCreateWithoutTeamsInput, ClubUncheckedCreateWithoutTeamsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutTeamsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutTeamsInput, ClubUncheckedUpdateWithoutTeamsInput>
  }

  export type ClubUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type TeamCoachUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamCoachWhereUniqueInput
    update: XOR<TeamCoachUpdateWithoutTeamInput, TeamCoachUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamCoachCreateWithoutTeamInput, TeamCoachUncheckedCreateWithoutTeamInput>
  }

  export type TeamCoachUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamCoachWhereUniqueInput
    data: XOR<TeamCoachUpdateWithoutTeamInput, TeamCoachUncheckedUpdateWithoutTeamInput>
  }

  export type TeamCoachUpdateManyWithWhereWithoutTeamInput = {
    where: TeamCoachScalarWhereInput
    data: XOR<TeamCoachUpdateManyMutationInput, TeamCoachUncheckedUpdateManyWithoutTeamInput>
  }

  export type TrainingUpsertWithWhereUniqueWithoutTeamInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutTeamInput, TrainingUncheckedUpdateWithoutTeamInput>
    create: XOR<TrainingCreateWithoutTeamInput, TrainingUncheckedCreateWithoutTeamInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutTeamInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutTeamInput, TrainingUncheckedUpdateWithoutTeamInput>
  }

  export type TrainingUpdateManyWithWhereWithoutTeamInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutTeamInput>
  }

  export type ClubCreateWithoutEventsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutEventsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type TeamCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    matches?: MatchCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutEventsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
  }

  export type MediaItemCreateWithoutEventInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicUrl?: string | null
    club: ClubCreateNestedOneWithoutMediaItemsInput
    exercise?: ExerciseCreateNestedOneWithoutMediaItemsInput
    uploadedBy: UserCreateNestedOneWithoutMediaUploadsInput
  }

  export type MediaItemUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemCreateOrConnectWithoutEventInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput>
  }

  export type MediaItemCreateManyEventInputEnvelope = {
    data: MediaItemCreateManyEventInput | MediaItemCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ClubUpsertWithoutEventsInput = {
    update: XOR<ClubUpdateWithoutEventsInput, ClubUncheckedUpdateWithoutEventsInput>
    create: XOR<ClubCreateWithoutEventsInput, ClubUncheckedCreateWithoutEventsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutEventsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutEventsInput, ClubUncheckedUpdateWithoutEventsInput>
  }

  export type ClubUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type TeamUpsertWithoutEventsInput = {
    update: XOR<TeamUpdateWithoutEventsInput, TeamUncheckedUpdateWithoutEventsInput>
    create: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutEventsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutEventsInput, TeamUncheckedUpdateWithoutEventsInput>
  }

  export type TeamUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    matches?: MatchUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type MediaItemUpsertWithWhereUniqueWithoutEventInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutEventInput, MediaItemUncheckedUpdateWithoutEventInput>
    create: XOR<MediaItemCreateWithoutEventInput, MediaItemUncheckedCreateWithoutEventInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutEventInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutEventInput, MediaItemUncheckedUpdateWithoutEventInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutEventInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutEventInput>
  }

  export type ClubCreateWithoutMediaItemsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutMediaItemsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutMediaItemsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutMediaItemsInput, ClubUncheckedCreateWithoutMediaItemsInput>
  }

  export type EventCreateWithoutMediaItemsInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutEventsInput
    createdBy: UserCreateNestedOneWithoutEventsInput
    team?: TeamCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutMediaItemsInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId?: string | null
    createdById: string
  }

  export type EventCreateOrConnectWithoutMediaItemsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutMediaItemsInput, EventUncheckedCreateWithoutMediaItemsInput>
  }

  export type ExerciseCreateWithoutMediaItemsInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutMediaItemsInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutMediaItemsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutMediaItemsInput, ExerciseUncheckedCreateWithoutMediaItemsInput>
  }

  export type UserCreateWithoutMediaUploadsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutMediaUploadsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMediaUploadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMediaUploadsInput, UserUncheckedCreateWithoutMediaUploadsInput>
  }

  export type ClubUpsertWithoutMediaItemsInput = {
    update: XOR<ClubUpdateWithoutMediaItemsInput, ClubUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<ClubCreateWithoutMediaItemsInput, ClubUncheckedCreateWithoutMediaItemsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutMediaItemsInput, ClubUncheckedUpdateWithoutMediaItemsInput>
  }

  export type ClubUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type EventUpsertWithoutMediaItemsInput = {
    update: XOR<EventUpdateWithoutMediaItemsInput, EventUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<EventCreateWithoutMediaItemsInput, EventUncheckedCreateWithoutMediaItemsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutMediaItemsInput, EventUncheckedUpdateWithoutMediaItemsInput>
  }

  export type EventUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutEventsNestedInput
    team?: TeamUpdateOneWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseUpsertWithoutMediaItemsInput = {
    update: XOR<ExerciseUpdateWithoutMediaItemsInput, ExerciseUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<ExerciseCreateWithoutMediaItemsInput, ExerciseUncheckedCreateWithoutMediaItemsInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutMediaItemsInput, ExerciseUncheckedUpdateWithoutMediaItemsInput>
  }

  export type ExerciseUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type UserUpsertWithoutMediaUploadsInput = {
    update: XOR<UserUpdateWithoutMediaUploadsInput, UserUncheckedUpdateWithoutMediaUploadsInput>
    create: XOR<UserCreateWithoutMediaUploadsInput, UserUncheckedCreateWithoutMediaUploadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMediaUploadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMediaUploadsInput, UserUncheckedUpdateWithoutMediaUploadsInput>
  }

  export type UserUpdateWithoutMediaUploadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMediaUploadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type TrainingCreateWithoutCategoryInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    createdById: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutCategoryInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput>
  }

  export type TrainingCreateManyCategoryInputEnvelope = {
    data: TrainingCreateManyCategoryInput | TrainingCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutTrainingCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutTrainingCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutTrainingCategoriesInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutTrainingCategoriesInput, ClubUncheckedCreateWithoutTrainingCategoriesInput>
  }

  export type TrainingUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutCategoryInput, TrainingUncheckedUpdateWithoutCategoryInput>
    create: XOR<TrainingCreateWithoutCategoryInput, TrainingUncheckedCreateWithoutCategoryInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutCategoryInput, TrainingUncheckedUpdateWithoutCategoryInput>
  }

  export type TrainingUpdateManyWithWhereWithoutCategoryInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ClubUpsertWithoutTrainingCategoriesInput = {
    update: XOR<ClubUpdateWithoutTrainingCategoriesInput, ClubUncheckedUpdateWithoutTrainingCategoriesInput>
    create: XOR<ClubCreateWithoutTrainingCategoriesInput, ClubUncheckedCreateWithoutTrainingCategoriesInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutTrainingCategoriesInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutTrainingCategoriesInput, ClubUncheckedUpdateWithoutTrainingCategoriesInput>
  }

  export type ClubUpdateWithoutTrainingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutTrainingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type PlayerAttendanceCreateWithoutTrainingInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    player: PlayerCreateNestedOneWithoutAttendancesInput
  }

  export type PlayerAttendanceUncheckedCreateWithoutTrainingInput = {
    id?: string
    playerId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerAttendanceCreateOrConnectWithoutTrainingInput = {
    where: PlayerAttendanceWhereUniqueInput
    create: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput>
  }

  export type PlayerAttendanceCreateManyTrainingInputEnvelope = {
    data: PlayerAttendanceCreateManyTrainingInput | PlayerAttendanceCreateManyTrainingInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCategoryCreateWithoutTrainingsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutTrainingCategoriesInput
  }

  export type TrainingCategoryUncheckedCreateWithoutTrainingsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
  }

  export type TrainingCategoryCreateOrConnectWithoutTrainingsInput = {
    where: TrainingCategoryWhereUniqueInput
    create: XOR<TrainingCategoryCreateWithoutTrainingsInput, TrainingCategoryUncheckedCreateWithoutTrainingsInput>
  }

  export type ClubCreateWithoutTrainingsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutTrainingsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutTrainingsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutTrainingsInput, ClubUncheckedCreateWithoutTrainingsInput>
  }

  export type UserCreateWithoutTrainingsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTrainingsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTrainingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainingsInput, UserUncheckedCreateWithoutTrainingsInput>
  }

  export type TeamCreateWithoutTrainingsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    matches?: MatchCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutTrainingsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutTrainingsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTrainingsInput, TeamUncheckedCreateWithoutTrainingsInput>
  }

  export type TrainingExerciseCreateWithoutTrainingInput = {
    id?: string
    position: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutTrainingsInput
  }

  export type TrainingExerciseUncheckedCreateWithoutTrainingInput = {
    id?: string
    position: number
    exerciseId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingExerciseCreateOrConnectWithoutTrainingInput = {
    where: TrainingExerciseWhereUniqueInput
    create: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput>
  }

  export type TrainingExerciseCreateManyTrainingInputEnvelope = {
    data: TrainingExerciseCreateManyTrainingInput | TrainingExerciseCreateManyTrainingInput[]
    skipDuplicates?: boolean
  }

  export type PlayerAttendanceUpsertWithWhereUniqueWithoutTrainingInput = {
    where: PlayerAttendanceWhereUniqueInput
    update: XOR<PlayerAttendanceUpdateWithoutTrainingInput, PlayerAttendanceUncheckedUpdateWithoutTrainingInput>
    create: XOR<PlayerAttendanceCreateWithoutTrainingInput, PlayerAttendanceUncheckedCreateWithoutTrainingInput>
  }

  export type PlayerAttendanceUpdateWithWhereUniqueWithoutTrainingInput = {
    where: PlayerAttendanceWhereUniqueInput
    data: XOR<PlayerAttendanceUpdateWithoutTrainingInput, PlayerAttendanceUncheckedUpdateWithoutTrainingInput>
  }

  export type PlayerAttendanceUpdateManyWithWhereWithoutTrainingInput = {
    where: PlayerAttendanceScalarWhereInput
    data: XOR<PlayerAttendanceUpdateManyMutationInput, PlayerAttendanceUncheckedUpdateManyWithoutTrainingInput>
  }

  export type PlayerAttendanceScalarWhereInput = {
    AND?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
    OR?: PlayerAttendanceScalarWhereInput[]
    NOT?: PlayerAttendanceScalarWhereInput | PlayerAttendanceScalarWhereInput[]
    id?: StringFilter<"PlayerAttendance"> | string
    playerId?: StringFilter<"PlayerAttendance"> | string
    trainingId?: StringFilter<"PlayerAttendance"> | string
    status?: EnumAttendanceStatusFilter<"PlayerAttendance"> | $Enums.AttendanceStatus
    comment?: StringNullableFilter<"PlayerAttendance"> | string | null
    createdAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerAttendance"> | Date | string
  }

  export type TrainingCategoryUpsertWithoutTrainingsInput = {
    update: XOR<TrainingCategoryUpdateWithoutTrainingsInput, TrainingCategoryUncheckedUpdateWithoutTrainingsInput>
    create: XOR<TrainingCategoryCreateWithoutTrainingsInput, TrainingCategoryUncheckedCreateWithoutTrainingsInput>
    where?: TrainingCategoryWhereInput
  }

  export type TrainingCategoryUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: TrainingCategoryWhereInput
    data: XOR<TrainingCategoryUpdateWithoutTrainingsInput, TrainingCategoryUncheckedUpdateWithoutTrainingsInput>
  }

  export type TrainingCategoryUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutTrainingCategoriesNestedInput
  }

  export type TrainingCategoryUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type ClubUpsertWithoutTrainingsInput = {
    update: XOR<ClubUpdateWithoutTrainingsInput, ClubUncheckedUpdateWithoutTrainingsInput>
    create: XOR<ClubCreateWithoutTrainingsInput, ClubUncheckedCreateWithoutTrainingsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutTrainingsInput, ClubUncheckedUpdateWithoutTrainingsInput>
  }

  export type ClubUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type UserUpsertWithoutTrainingsInput = {
    update: XOR<UserUpdateWithoutTrainingsInput, UserUncheckedUpdateWithoutTrainingsInput>
    create: XOR<UserCreateWithoutTrainingsInput, UserUncheckedCreateWithoutTrainingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrainingsInput, UserUncheckedUpdateWithoutTrainingsInput>
  }

  export type UserUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamUpsertWithoutTrainingsInput = {
    update: XOR<TeamUpdateWithoutTrainingsInput, TeamUncheckedUpdateWithoutTrainingsInput>
    create: XOR<TeamCreateWithoutTrainingsInput, TeamUncheckedCreateWithoutTrainingsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTrainingsInput, TeamUncheckedUpdateWithoutTrainingsInput>
  }

  export type TeamUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    matches?: MatchUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TrainingExerciseUpsertWithWhereUniqueWithoutTrainingInput = {
    where: TrainingExerciseWhereUniqueInput
    update: XOR<TrainingExerciseUpdateWithoutTrainingInput, TrainingExerciseUncheckedUpdateWithoutTrainingInput>
    create: XOR<TrainingExerciseCreateWithoutTrainingInput, TrainingExerciseUncheckedCreateWithoutTrainingInput>
  }

  export type TrainingExerciseUpdateWithWhereUniqueWithoutTrainingInput = {
    where: TrainingExerciseWhereUniqueInput
    data: XOR<TrainingExerciseUpdateWithoutTrainingInput, TrainingExerciseUncheckedUpdateWithoutTrainingInput>
  }

  export type TrainingExerciseUpdateManyWithWhereWithoutTrainingInput = {
    where: TrainingExerciseScalarWhereInput
    data: XOR<TrainingExerciseUpdateManyMutationInput, TrainingExerciseUncheckedUpdateManyWithoutTrainingInput>
  }

  export type TrainingExerciseScalarWhereInput = {
    AND?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
    OR?: TrainingExerciseScalarWhereInput[]
    NOT?: TrainingExerciseScalarWhereInput | TrainingExerciseScalarWhereInput[]
    id?: StringFilter<"TrainingExercise"> | string
    position?: IntFilter<"TrainingExercise"> | number
    trainingId?: StringFilter<"TrainingExercise"> | string
    exerciseId?: StringFilter<"TrainingExercise"> | string
    notes?: StringNullableFilter<"TrainingExercise"> | string | null
    createdAt?: DateTimeFilter<"TrainingExercise"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingExercise"> | Date | string
  }

  export type UserCreateWithoutExercisesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutExercisesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutExercisesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseCategoryCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutExerciseCategoriesInput
    tags?: ExerciseTagCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExerciseCategoryInput
  }

  export type ExerciseCategoryCreateOrConnectWithoutExercisesInput = {
    where: ExerciseCategoryWhereUniqueInput
    create: XOR<ExerciseCategoryCreateWithoutExercisesInput, ExerciseCategoryUncheckedCreateWithoutExercisesInput>
  }

  export type ClubCreateWithoutExercisesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutExercisesInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutExercisesInput, ClubUncheckedCreateWithoutExercisesInput>
  }

  export type MediaItemCreateWithoutExerciseInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicUrl?: string | null
    club: ClubCreateNestedOneWithoutMediaItemsInput
    event?: EventCreateNestedOneWithoutMediaItemsInput
    uploadedBy: UserCreateNestedOneWithoutMediaUploadsInput
  }

  export type MediaItemUncheckedCreateWithoutExerciseInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    uploadedById: string
    publicUrl?: string | null
  }

  export type MediaItemCreateOrConnectWithoutExerciseInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput>
  }

  export type MediaItemCreateManyExerciseInputEnvelope = {
    data: MediaItemCreateManyExerciseInput | MediaItemCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type TrainingExerciseCreateWithoutExerciseInput = {
    id?: string
    position: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    training: TrainingCreateNestedOneWithoutExercisesInput
  }

  export type TrainingExerciseUncheckedCreateWithoutExerciseInput = {
    id?: string
    position: number
    trainingId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingExerciseCreateOrConnectWithoutExerciseInput = {
    where: TrainingExerciseWhereUniqueInput
    create: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type TrainingExerciseCreateManyExerciseInputEnvelope = {
    data: TrainingExerciseCreateManyExerciseInput | TrainingExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseTagCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutExerciseTagsInput
    exerciseCategory: ExerciseCategoryCreateNestedOneWithoutTagsInput
  }

  export type ExerciseTagUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exerciseCategoryId: string
  }

  export type ExerciseTagCreateOrConnectWithoutExercisesInput = {
    where: ExerciseTagWhereUniqueInput
    create: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput>
  }

  export type UserUpsertWithoutExercisesInput = {
    update: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExercisesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type UserUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ExerciseCategoryUpsertWithoutExercisesInput = {
    update: XOR<ExerciseCategoryUpdateWithoutExercisesInput, ExerciseCategoryUncheckedUpdateWithoutExercisesInput>
    create: XOR<ExerciseCategoryCreateWithoutExercisesInput, ExerciseCategoryUncheckedCreateWithoutExercisesInput>
    where?: ExerciseCategoryWhereInput
  }

  export type ExerciseCategoryUpdateToOneWithWhereWithoutExercisesInput = {
    where?: ExerciseCategoryWhereInput
    data: XOR<ExerciseCategoryUpdateWithoutExercisesInput, ExerciseCategoryUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseCategoryUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutExerciseCategoriesNestedInput
    tags?: ExerciseTagUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ExerciseCategoryUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    tags?: ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ClubUpsertWithoutExercisesInput = {
    update: XOR<ClubUpdateWithoutExercisesInput, ClubUncheckedUpdateWithoutExercisesInput>
    create: XOR<ClubCreateWithoutExercisesInput, ClubUncheckedCreateWithoutExercisesInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutExercisesInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutExercisesInput, ClubUncheckedUpdateWithoutExercisesInput>
  }

  export type ClubUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type MediaItemUpsertWithWhereUniqueWithoutExerciseInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutExerciseInput, MediaItemUncheckedUpdateWithoutExerciseInput>
    create: XOR<MediaItemCreateWithoutExerciseInput, MediaItemUncheckedCreateWithoutExerciseInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutExerciseInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutExerciseInput, MediaItemUncheckedUpdateWithoutExerciseInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutExerciseInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutExerciseInput>
  }

  export type TrainingExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: TrainingExerciseWhereUniqueInput
    update: XOR<TrainingExerciseUpdateWithoutExerciseInput, TrainingExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<TrainingExerciseCreateWithoutExerciseInput, TrainingExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type TrainingExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: TrainingExerciseWhereUniqueInput
    data: XOR<TrainingExerciseUpdateWithoutExerciseInput, TrainingExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type TrainingExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: TrainingExerciseScalarWhereInput
    data: XOR<TrainingExerciseUpdateManyMutationInput, TrainingExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type ExerciseTagUpsertWithWhereUniqueWithoutExercisesInput = {
    where: ExerciseTagWhereUniqueInput
    update: XOR<ExerciseTagUpdateWithoutExercisesInput, ExerciseTagUncheckedUpdateWithoutExercisesInput>
    create: XOR<ExerciseTagCreateWithoutExercisesInput, ExerciseTagUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseTagUpdateWithWhereUniqueWithoutExercisesInput = {
    where: ExerciseTagWhereUniqueInput
    data: XOR<ExerciseTagUpdateWithoutExercisesInput, ExerciseTagUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseTagUpdateManyWithWhereWithoutExercisesInput = {
    where: ExerciseTagScalarWhereInput
    data: XOR<ExerciseTagUpdateManyMutationInput, ExerciseTagUncheckedUpdateManyWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutCategoryInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutCategoryInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput>
  }

  export type ExerciseCreateManyCategoryInputEnvelope = {
    data: ExerciseCreateManyCategoryInput | ExerciseCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutExerciseCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutExerciseCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutExerciseCategoriesInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutExerciseCategoriesInput, ClubUncheckedCreateWithoutExerciseCategoriesInput>
  }

  export type ExerciseTagCreateWithoutExerciseCategoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutExerciseTagsInput
    exercises?: ExerciseCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagUncheckedCreateWithoutExerciseCategoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutTagsInput
  }

  export type ExerciseTagCreateOrConnectWithoutExerciseCategoryInput = {
    where: ExerciseTagWhereUniqueInput
    create: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput>
  }

  export type ExerciseTagCreateManyExerciseCategoryInputEnvelope = {
    data: ExerciseTagCreateManyExerciseCategoryInput | ExerciseTagCreateManyExerciseCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutCategoryInput, ExerciseUncheckedUpdateWithoutCategoryInput>
    create: XOR<ExerciseCreateWithoutCategoryInput, ExerciseUncheckedCreateWithoutCategoryInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutCategoryInput, ExerciseUncheckedUpdateWithoutCategoryInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutCategoryInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ClubUpsertWithoutExerciseCategoriesInput = {
    update: XOR<ClubUpdateWithoutExerciseCategoriesInput, ClubUncheckedUpdateWithoutExerciseCategoriesInput>
    create: XOR<ClubCreateWithoutExerciseCategoriesInput, ClubUncheckedCreateWithoutExerciseCategoriesInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutExerciseCategoriesInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutExerciseCategoriesInput, ClubUncheckedUpdateWithoutExerciseCategoriesInput>
  }

  export type ClubUpdateWithoutExerciseCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutExerciseCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ExerciseTagUpsertWithWhereUniqueWithoutExerciseCategoryInput = {
    where: ExerciseTagWhereUniqueInput
    update: XOR<ExerciseTagUpdateWithoutExerciseCategoryInput, ExerciseTagUncheckedUpdateWithoutExerciseCategoryInput>
    create: XOR<ExerciseTagCreateWithoutExerciseCategoryInput, ExerciseTagUncheckedCreateWithoutExerciseCategoryInput>
  }

  export type ExerciseTagUpdateWithWhereUniqueWithoutExerciseCategoryInput = {
    where: ExerciseTagWhereUniqueInput
    data: XOR<ExerciseTagUpdateWithoutExerciseCategoryInput, ExerciseTagUncheckedUpdateWithoutExerciseCategoryInput>
  }

  export type ExerciseTagUpdateManyWithWhereWithoutExerciseCategoryInput = {
    where: ExerciseTagScalarWhereInput
    data: XOR<ExerciseTagUpdateManyMutationInput, ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryInput>
  }

  export type ClubCreateWithoutExerciseTagsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    matches?: MatchCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutExerciseTagsInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    matches?: MatchUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutExerciseTagsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutExerciseTagsInput, ClubUncheckedCreateWithoutExerciseTagsInput>
  }

  export type ExerciseCategoryCreateWithoutTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutCategoryInput
    club: ClubCreateNestedOneWithoutExerciseCategoriesInput
  }

  export type ExerciseCategoryUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ExerciseCategoryCreateOrConnectWithoutTagsInput = {
    where: ExerciseCategoryWhereUniqueInput
    create: XOR<ExerciseCategoryCreateWithoutTagsInput, ExerciseCategoryUncheckedCreateWithoutTagsInput>
  }

  export type ExerciseCreateWithoutTagsInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutTagsInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    trainings?: TrainingExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutTagsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput>
  }

  export type ClubUpsertWithoutExerciseTagsInput = {
    update: XOR<ClubUpdateWithoutExerciseTagsInput, ClubUncheckedUpdateWithoutExerciseTagsInput>
    create: XOR<ClubCreateWithoutExerciseTagsInput, ClubUncheckedCreateWithoutExerciseTagsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutExerciseTagsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutExerciseTagsInput, ClubUncheckedUpdateWithoutExerciseTagsInput>
  }

  export type ClubUpdateWithoutExerciseTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    matches?: MatchUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutExerciseTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    matches?: MatchUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ExerciseCategoryUpsertWithoutTagsInput = {
    update: XOR<ExerciseCategoryUpdateWithoutTagsInput, ExerciseCategoryUncheckedUpdateWithoutTagsInput>
    create: XOR<ExerciseCategoryCreateWithoutTagsInput, ExerciseCategoryUncheckedCreateWithoutTagsInput>
    where?: ExerciseCategoryWhereInput
  }

  export type ExerciseCategoryUpdateToOneWithWhereWithoutTagsInput = {
    where?: ExerciseCategoryWhereInput
    data: XOR<ExerciseCategoryUpdateWithoutTagsInput, ExerciseCategoryUncheckedUpdateWithoutTagsInput>
  }

  export type ExerciseCategoryUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutCategoryNestedInput
    club?: ClubUpdateOneRequiredWithoutExerciseCategoriesNestedInput
  }

  export type ExerciseCategoryUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ExerciseUpsertWithWhereUniqueWithoutTagsInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutTagsInput, ExerciseUncheckedUpdateWithoutTagsInput>
    create: XOR<ExerciseCreateWithoutTagsInput, ExerciseUncheckedCreateWithoutTagsInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutTagsInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutTagsInput, ExerciseUncheckedUpdateWithoutTagsInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutTagsInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutTagsInput>
  }

  export type ExerciseCreateWithoutTrainingsInput = {
    id?: string
    title: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    author: UserCreateNestedOneWithoutExercisesInput
    category: ExerciseCategoryCreateNestedOneWithoutExercisesInput
    club: ClubCreateNestedOneWithoutExercisesInput
    mediaItems?: MediaItemCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutTrainingsInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutExerciseInput
    tags?: ExerciseTagUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutTrainingsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutTrainingsInput, ExerciseUncheckedCreateWithoutTrainingsInput>
  }

  export type TrainingCreateWithoutExercisesInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    attendances?: PlayerAttendanceCreateNestedManyWithoutTrainingInput
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
  }

  export type TrainingUncheckedCreateWithoutExercisesInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutExercisesInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutExercisesInput, TrainingUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseUpsertWithoutTrainingsInput = {
    update: XOR<ExerciseUpdateWithoutTrainingsInput, ExerciseUncheckedUpdateWithoutTrainingsInput>
    create: XOR<ExerciseCreateWithoutTrainingsInput, ExerciseUncheckedCreateWithoutTrainingsInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutTrainingsInput, ExerciseUncheckedUpdateWithoutTrainingsInput>
  }

  export type ExerciseUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type TrainingUpsertWithoutExercisesInput = {
    update: XOR<TrainingUpdateWithoutExercisesInput, TrainingUncheckedUpdateWithoutExercisesInput>
    create: XOR<TrainingCreateWithoutExercisesInput, TrainingUncheckedCreateWithoutExercisesInput>
    where?: TrainingWhereInput
  }

  export type TrainingUpdateToOneWithWhereWithoutExercisesInput = {
    where?: TrainingWhereInput
    data: XOR<TrainingUpdateWithoutExercisesInput, TrainingUncheckedUpdateWithoutExercisesInput>
  }

  export type TrainingUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
  }

  export type TrainingUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TeamCreateWithoutPlayersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    matches?: MatchCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutPlayersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutPlayersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type PlayerAttendanceCreateWithoutPlayerInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    training: TrainingCreateNestedOneWithoutAttendancesInput
  }

  export type PlayerAttendanceUncheckedCreateWithoutPlayerInput = {
    id?: string
    trainingId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerAttendanceCreateOrConnectWithoutPlayerInput = {
    where: PlayerAttendanceWhereUniqueInput
    create: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAttendanceCreateManyPlayerInputEnvelope = {
    data: PlayerAttendanceCreateManyPlayerInput | PlayerAttendanceCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerDocumentCreateWithoutPlayerInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    uploadedBy: UserCreateNestedOneWithoutPlayerDocumentsInput
  }

  export type PlayerDocumentUncheckedCreateWithoutPlayerInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    uploadedById: string
  }

  export type PlayerDocumentCreateOrConnectWithoutPlayerInput = {
    where: PlayerDocumentWhereUniqueInput
    create: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerDocumentCreateManyPlayerInputEnvelope = {
    data: PlayerDocumentCreateManyPlayerInput | PlayerDocumentCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerMatchStatCreateWithoutPlayerInput = {
    id?: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutPlayerStatsInput
  }

  export type PlayerMatchStatUncheckedCreateWithoutPlayerInput = {
    id?: string
    matchId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerMatchStatCreateOrConnectWithoutPlayerInput = {
    where: PlayerMatchStatWhereUniqueInput
    create: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerMatchStatCreateManyPlayerInputEnvelope = {
    data: PlayerMatchStatCreateManyPlayerInput | PlayerMatchStatCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type MorningSurveyResponseCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    painAreas?: PainAreaCreateNestedManyWithoutSurveyInput
  }

  export type MorningSurveyResponseUncheckedCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    painAreas?: PainAreaUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type MorningSurveyResponseCreateOrConnectWithoutPlayerInput = {
    where: MorningSurveyResponseWhereUniqueInput
    create: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput>
  }

  export type MorningSurveyResponseCreateManyPlayerInputEnvelope = {
    data: MorningSurveyResponseCreateManyPlayerInput | MorningSurveyResponseCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutPlayersInput = {
    update: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPlayersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type TeamUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    matches?: MatchUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type PlayerAttendanceUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAttendanceWhereUniqueInput
    update: XOR<PlayerAttendanceUpdateWithoutPlayerInput, PlayerAttendanceUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerAttendanceCreateWithoutPlayerInput, PlayerAttendanceUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAttendanceUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAttendanceWhereUniqueInput
    data: XOR<PlayerAttendanceUpdateWithoutPlayerInput, PlayerAttendanceUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerAttendanceUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerAttendanceScalarWhereInput
    data: XOR<PlayerAttendanceUpdateManyMutationInput, PlayerAttendanceUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerDocumentUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerDocumentWhereUniqueInput
    update: XOR<PlayerDocumentUpdateWithoutPlayerInput, PlayerDocumentUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerDocumentCreateWithoutPlayerInput, PlayerDocumentUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerDocumentUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerDocumentWhereUniqueInput
    data: XOR<PlayerDocumentUpdateWithoutPlayerInput, PlayerDocumentUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerDocumentUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerDocumentScalarWhereInput
    data: XOR<PlayerDocumentUpdateManyMutationInput, PlayerDocumentUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerMatchStatUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerMatchStatWhereUniqueInput
    update: XOR<PlayerMatchStatUpdateWithoutPlayerInput, PlayerMatchStatUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerMatchStatCreateWithoutPlayerInput, PlayerMatchStatUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerMatchStatUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerMatchStatWhereUniqueInput
    data: XOR<PlayerMatchStatUpdateWithoutPlayerInput, PlayerMatchStatUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerMatchStatUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerMatchStatScalarWhereInput
    data: XOR<PlayerMatchStatUpdateManyMutationInput, PlayerMatchStatUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerMatchStatScalarWhereInput = {
    AND?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
    OR?: PlayerMatchStatScalarWhereInput[]
    NOT?: PlayerMatchStatScalarWhereInput | PlayerMatchStatScalarWhereInput[]
    id?: StringFilter<"PlayerMatchStat"> | string
    matchId?: StringFilter<"PlayerMatchStat"> | string
    playerId?: StringFilter<"PlayerMatchStat"> | string
    isStarter?: BoolFilter<"PlayerMatchStat"> | boolean
    minutesPlayed?: IntFilter<"PlayerMatchStat"> | number
    goals?: IntFilter<"PlayerMatchStat"> | number
    assists?: IntFilter<"PlayerMatchStat"> | number
    yellowCards?: IntFilter<"PlayerMatchStat"> | number
    redCards?: IntFilter<"PlayerMatchStat"> | number
    createdAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerMatchStat"> | Date | string
  }

  export type MorningSurveyResponseUpsertWithWhereUniqueWithoutPlayerInput = {
    where: MorningSurveyResponseWhereUniqueInput
    update: XOR<MorningSurveyResponseUpdateWithoutPlayerInput, MorningSurveyResponseUncheckedUpdateWithoutPlayerInput>
    create: XOR<MorningSurveyResponseCreateWithoutPlayerInput, MorningSurveyResponseUncheckedCreateWithoutPlayerInput>
  }

  export type MorningSurveyResponseUpdateWithWhereUniqueWithoutPlayerInput = {
    where: MorningSurveyResponseWhereUniqueInput
    data: XOR<MorningSurveyResponseUpdateWithoutPlayerInput, MorningSurveyResponseUncheckedUpdateWithoutPlayerInput>
  }

  export type MorningSurveyResponseUpdateManyWithWhereWithoutPlayerInput = {
    where: MorningSurveyResponseScalarWhereInput
    data: XOR<MorningSurveyResponseUpdateManyMutationInput, MorningSurveyResponseUncheckedUpdateManyWithoutPlayerInput>
  }

  export type MorningSurveyResponseScalarWhereInput = {
    AND?: MorningSurveyResponseScalarWhereInput | MorningSurveyResponseScalarWhereInput[]
    OR?: MorningSurveyResponseScalarWhereInput[]
    NOT?: MorningSurveyResponseScalarWhereInput | MorningSurveyResponseScalarWhereInput[]
    id?: StringFilter<"MorningSurveyResponse"> | string
    playerId?: StringFilter<"MorningSurveyResponse"> | string
    createdAt?: DateTimeFilter<"MorningSurveyResponse"> | Date | string
    readAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MorningSurveyResponse"> | Date | string | null
    sleepDuration?: FloatFilter<"MorningSurveyResponse"> | number
    sleepQuality?: IntFilter<"MorningSurveyResponse"> | number
    recovery?: IntFilter<"MorningSurveyResponse"> | number
    mood?: IntFilter<"MorningSurveyResponse"> | number
    muscleCondition?: IntFilter<"MorningSurveyResponse"> | number
    surveyId?: StringFilter<"MorningSurveyResponse"> | string
    tenantId?: StringFilter<"MorningSurveyResponse"> | string
  }

  export type PlayerCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    attendances?: PlayerAttendanceCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutDocumentsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutDocumentsInput, PlayerUncheckedCreateWithoutDocumentsInput>
  }

  export type UserCreateWithoutPlayerDocumentsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachCreateNestedManyWithoutUserInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPlayerDocumentsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    teamCoaches?: TeamCoachUncheckedCreateNestedManyWithoutUserInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutPlayerDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayerDocumentsInput, UserUncheckedCreateWithoutPlayerDocumentsInput>
  }

  export type PlayerUpsertWithoutDocumentsInput = {
    update: XOR<PlayerUpdateWithoutDocumentsInput, PlayerUncheckedUpdateWithoutDocumentsInput>
    create: XOR<PlayerCreateWithoutDocumentsInput, PlayerUncheckedCreateWithoutDocumentsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutDocumentsInput, PlayerUncheckedUpdateWithoutDocumentsInput>
  }

  export type PlayerUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    attendances?: PlayerAttendanceUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type UserUpsertWithoutPlayerDocumentsInput = {
    update: XOR<UserUpdateWithoutPlayerDocumentsInput, UserUncheckedUpdateWithoutPlayerDocumentsInput>
    create: XOR<UserCreateWithoutPlayerDocumentsInput, UserUncheckedCreateWithoutPlayerDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlayerDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlayerDocumentsInput, UserUncheckedUpdateWithoutPlayerDocumentsInput>
  }

  export type UserUpdateWithoutPlayerDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayerDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type TeamCreateWithoutCoachesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    matches?: MatchCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutCoachesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    matches?: MatchUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutCoachesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutCoachesInput, TeamUncheckedCreateWithoutCoachesInput>
  }

  export type UserCreateWithoutTeamCoachesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentCreateNestedManyWithoutUploadedByInput
    trainings?: TrainingCreateNestedManyWithoutCreatedByInput
    club: ClubCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTeamCoachesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    events?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutAuthorInput
    mediaUploads?: MediaItemUncheckedCreateNestedManyWithoutUploadedByInput
    playerDocuments?: PlayerDocumentUncheckedCreateNestedManyWithoutUploadedByInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTeamCoachesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamCoachesInput, UserUncheckedCreateWithoutTeamCoachesInput>
  }

  export type TeamUpsertWithoutCoachesInput = {
    update: XOR<TeamUpdateWithoutCoachesInput, TeamUncheckedUpdateWithoutCoachesInput>
    create: XOR<TeamCreateWithoutCoachesInput, TeamUncheckedCreateWithoutCoachesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutCoachesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutCoachesInput, TeamUncheckedUpdateWithoutCoachesInput>
  }

  export type TeamUpdateWithoutCoachesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    matches?: MatchUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutCoachesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserUpsertWithoutTeamCoachesInput = {
    update: XOR<UserUpdateWithoutTeamCoachesInput, UserUncheckedUpdateWithoutTeamCoachesInput>
    create: XOR<UserCreateWithoutTeamCoachesInput, UserUncheckedCreateWithoutTeamCoachesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamCoachesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamCoachesInput, UserUncheckedUpdateWithoutTeamCoachesInput>
  }

  export type UserUpdateWithoutTeamCoachesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
    club?: ClubUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamCoachesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type PlayerCreateWithoutAttendancesInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    documents?: PlayerDocumentCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutAttendancesInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    documents?: PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutAttendancesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutAttendancesInput, PlayerUncheckedCreateWithoutAttendancesInput>
  }

  export type TrainingCreateWithoutAttendancesInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    type?: string
    category: TrainingCategoryCreateNestedOneWithoutTrainingsInput
    club: ClubCreateNestedOneWithoutTrainingsInput
    createdBy: UserCreateNestedOneWithoutTrainingsInput
    team: TeamCreateNestedOneWithoutTrainingsInput
    exercises?: TrainingExerciseCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutAttendancesInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
    exercises?: TrainingExerciseUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutAttendancesInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutAttendancesInput, TrainingUncheckedCreateWithoutAttendancesInput>
  }

  export type PlayerUpsertWithoutAttendancesInput = {
    update: XOR<PlayerUpdateWithoutAttendancesInput, PlayerUncheckedUpdateWithoutAttendancesInput>
    create: XOR<PlayerCreateWithoutAttendancesInput, PlayerUncheckedCreateWithoutAttendancesInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutAttendancesInput, PlayerUncheckedUpdateWithoutAttendancesInput>
  }

  export type PlayerUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    documents?: PlayerDocumentUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    documents?: PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type TrainingUpsertWithoutAttendancesInput = {
    update: XOR<TrainingUpdateWithoutAttendancesInput, TrainingUncheckedUpdateWithoutAttendancesInput>
    create: XOR<TrainingCreateWithoutAttendancesInput, TrainingUncheckedCreateWithoutAttendancesInput>
    where?: TrainingWhereInput
  }

  export type TrainingUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: TrainingWhereInput
    data: XOR<TrainingUpdateWithoutAttendancesInput, TrainingUncheckedUpdateWithoutAttendancesInput>
  }

  export type TrainingUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type ClubCreateWithoutMatchesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventCreateNestedManyWithoutClubInput
    exercises?: ExerciseCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemCreateNestedManyWithoutClubInput
    teams?: TeamCreateNestedManyWithoutClubInput
    trainings?: TrainingCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryCreateNestedManyWithoutClubInput
    users?: UserCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutMatchesInput = {
    id?: string
    name: string
    subdomain: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    broadcastTime?: string | null
    events?: EventUncheckedCreateNestedManyWithoutClubInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutClubInput
    exerciseCategories?: ExerciseCategoryUncheckedCreateNestedManyWithoutClubInput
    exerciseTags?: ExerciseTagUncheckedCreateNestedManyWithoutClubInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutClubInput
    teams?: TeamUncheckedCreateNestedManyWithoutClubInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutClubInput
    trainingCategories?: TrainingCategoryUncheckedCreateNestedManyWithoutClubInput
    users?: UserUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutMatchesInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutMatchesInput, ClubUncheckedCreateWithoutMatchesInput>
  }

  export type TeamCreateWithoutMatchesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
    events?: EventCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    club: ClubCreateNestedOneWithoutTeamsInput
    coaches?: TeamCoachCreateNestedManyWithoutTeamInput
    trainings?: TrainingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMatchesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    order?: number
    events?: EventUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    coaches?: TeamCoachUncheckedCreateNestedManyWithoutTeamInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMatchesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMatchesInput, TeamUncheckedCreateWithoutMatchesInput>
  }

  export type PlayerMatchStatCreateWithoutMatchInput = {
    id?: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    player: PlayerCreateNestedOneWithoutMatchStatsInput
  }

  export type PlayerMatchStatUncheckedCreateWithoutMatchInput = {
    id?: string
    playerId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerMatchStatCreateOrConnectWithoutMatchInput = {
    where: PlayerMatchStatWhereUniqueInput
    create: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput>
  }

  export type PlayerMatchStatCreateManyMatchInputEnvelope = {
    data: PlayerMatchStatCreateManyMatchInput | PlayerMatchStatCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type ClubUpsertWithoutMatchesInput = {
    update: XOR<ClubUpdateWithoutMatchesInput, ClubUncheckedUpdateWithoutMatchesInput>
    create: XOR<ClubCreateWithoutMatchesInput, ClubUncheckedCreateWithoutMatchesInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutMatchesInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutMatchesInput, ClubUncheckedUpdateWithoutMatchesInput>
  }

  export type ClubUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUpdateManyWithoutClubNestedInput
    teams?: TeamUpdateManyWithoutClubNestedInput
    trainings?: TrainingUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUpdateManyWithoutClubNestedInput
    users?: UserUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broadcastTime?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutClubNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutClubNestedInput
    exerciseCategories?: ExerciseCategoryUncheckedUpdateManyWithoutClubNestedInput
    exerciseTags?: ExerciseTagUncheckedUpdateManyWithoutClubNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutClubNestedInput
    teams?: TeamUncheckedUpdateManyWithoutClubNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutClubNestedInput
    trainingCategories?: TrainingCategoryUncheckedUpdateManyWithoutClubNestedInput
    users?: UserUncheckedUpdateManyWithoutClubNestedInput
  }

  export type TeamUpsertWithoutMatchesInput = {
    update: XOR<TeamUpdateWithoutMatchesInput, TeamUncheckedUpdateWithoutMatchesInput>
    create: XOR<TeamCreateWithoutMatchesInput, TeamUncheckedCreateWithoutMatchesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMatchesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMatchesInput, TeamUncheckedUpdateWithoutMatchesInput>
  }

  export type TeamUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    club?: ClubUpdateOneRequiredWithoutTeamsNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type PlayerMatchStatUpsertWithWhereUniqueWithoutMatchInput = {
    where: PlayerMatchStatWhereUniqueInput
    update: XOR<PlayerMatchStatUpdateWithoutMatchInput, PlayerMatchStatUncheckedUpdateWithoutMatchInput>
    create: XOR<PlayerMatchStatCreateWithoutMatchInput, PlayerMatchStatUncheckedCreateWithoutMatchInput>
  }

  export type PlayerMatchStatUpdateWithWhereUniqueWithoutMatchInput = {
    where: PlayerMatchStatWhereUniqueInput
    data: XOR<PlayerMatchStatUpdateWithoutMatchInput, PlayerMatchStatUncheckedUpdateWithoutMatchInput>
  }

  export type PlayerMatchStatUpdateManyWithWhereWithoutMatchInput = {
    where: PlayerMatchStatScalarWhereInput
    data: XOR<PlayerMatchStatUpdateManyMutationInput, PlayerMatchStatUncheckedUpdateManyWithoutMatchInput>
  }

  export type MatchCreateWithoutPlayerStatsInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club: ClubCreateNestedOneWithoutMatchesInput
    team: TeamCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateWithoutPlayerStatsInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MatchCreateOrConnectWithoutPlayerStatsInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayerStatsInput, MatchUncheckedCreateWithoutPlayerStatsInput>
  }

  export type PlayerCreateWithoutMatchStatsInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    attendances?: PlayerAttendanceCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutMatchStatsInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput
    morningSurveys?: MorningSurveyResponseUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutMatchStatsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMatchStatsInput, PlayerUncheckedCreateWithoutMatchStatsInput>
  }

  export type MatchUpsertWithoutPlayerStatsInput = {
    update: XOR<MatchUpdateWithoutPlayerStatsInput, MatchUncheckedUpdateWithoutPlayerStatsInput>
    create: XOR<MatchCreateWithoutPlayerStatsInput, MatchUncheckedCreateWithoutPlayerStatsInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutPlayerStatsInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutPlayerStatsInput, MatchUncheckedUpdateWithoutPlayerStatsInput>
  }

  export type MatchUpdateWithoutPlayerStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club?: ClubUpdateOneRequiredWithoutMatchesNestedInput
    team?: TeamUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutPlayerStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    teamId?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlayerUpsertWithoutMatchStatsInput = {
    update: XOR<PlayerUpdateWithoutMatchStatsInput, PlayerUncheckedUpdateWithoutMatchStatsInput>
    create: XOR<PlayerCreateWithoutMatchStatsInput, PlayerUncheckedCreateWithoutMatchStatsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMatchStatsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMatchStatsInput, PlayerUncheckedUpdateWithoutMatchStatsInput>
  }

  export type PlayerUpdateWithoutMatchStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    attendances?: PlayerAttendanceUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMatchStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type ScheduleEventCreateWithoutScheduleInput = {
    id?: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleEventUncheckedCreateWithoutScheduleInput = {
    id?: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleEventCreateOrConnectWithoutScheduleInput = {
    where: ScheduleEventWhereUniqueInput
    create: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput>
  }

  export type ScheduleEventCreateManyScheduleInputEnvelope = {
    data: ScheduleEventCreateManyScheduleInput | ScheduleEventCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleEventUpsertWithWhereUniqueWithoutScheduleInput = {
    where: ScheduleEventWhereUniqueInput
    update: XOR<ScheduleEventUpdateWithoutScheduleInput, ScheduleEventUncheckedUpdateWithoutScheduleInput>
    create: XOR<ScheduleEventCreateWithoutScheduleInput, ScheduleEventUncheckedCreateWithoutScheduleInput>
  }

  export type ScheduleEventUpdateWithWhereUniqueWithoutScheduleInput = {
    where: ScheduleEventWhereUniqueInput
    data: XOR<ScheduleEventUpdateWithoutScheduleInput, ScheduleEventUncheckedUpdateWithoutScheduleInput>
  }

  export type ScheduleEventUpdateManyWithWhereWithoutScheduleInput = {
    where: ScheduleEventScalarWhereInput
    data: XOR<ScheduleEventUpdateManyMutationInput, ScheduleEventUncheckedUpdateManyWithoutScheduleInput>
  }

  export type ScheduleEventScalarWhereInput = {
    AND?: ScheduleEventScalarWhereInput | ScheduleEventScalarWhereInput[]
    OR?: ScheduleEventScalarWhereInput[]
    NOT?: ScheduleEventScalarWhereInput | ScheduleEventScalarWhereInput[]
    id?: StringFilter<"ScheduleEvent"> | string
    scheduleId?: StringFilter<"ScheduleEvent"> | string
    type?: StringFilter<"ScheduleEvent"> | string
    time?: StringFilter<"ScheduleEvent"> | string
    description?: StringFilter<"ScheduleEvent"> | string
    createdAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleEvent"> | Date | string
  }

  export type ScheduleCreateWithoutEventsInput = {
    id?: string
    teamId: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUncheckedCreateWithoutEventsInput = {
    id?: string
    teamId: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutEventsInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutEventsInput, ScheduleUncheckedCreateWithoutEventsInput>
  }

  export type ScheduleUpsertWithoutEventsInput = {
    update: XOR<ScheduleUpdateWithoutEventsInput, ScheduleUncheckedUpdateWithoutEventsInput>
    create: XOR<ScheduleCreateWithoutEventsInput, ScheduleUncheckedCreateWithoutEventsInput>
    where?: ScheduleWhereInput
  }

  export type ScheduleUpdateToOneWithWhereWithoutEventsInput = {
    where?: ScheduleWhereInput
    data: XOR<ScheduleUpdateWithoutEventsInput, ScheduleUncheckedUpdateWithoutEventsInput>
  }

  export type ScheduleUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCreateWithoutMorningSurveysInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    attendances?: PlayerAttendanceCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutMorningSurveysInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    attendances?: PlayerAttendanceUncheckedCreateNestedManyWithoutPlayerInput
    documents?: PlayerDocumentUncheckedCreateNestedManyWithoutPlayerInput
    matchStats?: PlayerMatchStatUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutMorningSurveysInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMorningSurveysInput, PlayerUncheckedCreateWithoutMorningSurveysInput>
  }

  export type PainAreaCreateWithoutSurveyInput = {
    id?: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
  }

  export type PainAreaUncheckedCreateWithoutSurveyInput = {
    id?: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
  }

  export type PainAreaCreateOrConnectWithoutSurveyInput = {
    where: PainAreaWhereUniqueInput
    create: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput>
  }

  export type PainAreaCreateManySurveyInputEnvelope = {
    data: PainAreaCreateManySurveyInput | PainAreaCreateManySurveyInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithoutMorningSurveysInput = {
    update: XOR<PlayerUpdateWithoutMorningSurveysInput, PlayerUncheckedUpdateWithoutMorningSurveysInput>
    create: XOR<PlayerCreateWithoutMorningSurveysInput, PlayerUncheckedCreateWithoutMorningSurveysInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMorningSurveysInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMorningSurveysInput, PlayerUncheckedUpdateWithoutMorningSurveysInput>
  }

  export type PlayerUpdateWithoutMorningSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    attendances?: PlayerAttendanceUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMorningSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PainAreaUpsertWithWhereUniqueWithoutSurveyInput = {
    where: PainAreaWhereUniqueInput
    update: XOR<PainAreaUpdateWithoutSurveyInput, PainAreaUncheckedUpdateWithoutSurveyInput>
    create: XOR<PainAreaCreateWithoutSurveyInput, PainAreaUncheckedCreateWithoutSurveyInput>
  }

  export type PainAreaUpdateWithWhereUniqueWithoutSurveyInput = {
    where: PainAreaWhereUniqueInput
    data: XOR<PainAreaUpdateWithoutSurveyInput, PainAreaUncheckedUpdateWithoutSurveyInput>
  }

  export type PainAreaUpdateManyWithWhereWithoutSurveyInput = {
    where: PainAreaScalarWhereInput
    data: XOR<PainAreaUpdateManyMutationInput, PainAreaUncheckedUpdateManyWithoutSurveyInput>
  }

  export type PainAreaScalarWhereInput = {
    AND?: PainAreaScalarWhereInput | PainAreaScalarWhereInput[]
    OR?: PainAreaScalarWhereInput[]
    NOT?: PainAreaScalarWhereInput | PainAreaScalarWhereInput[]
    id?: StringFilter<"PainArea"> | string
    surveyId?: StringFilter<"PainArea"> | string
    areaName?: StringFilter<"PainArea"> | string
    painLevel?: IntFilter<"PainArea"> | number
    createdAt?: DateTimeFilter<"PainArea"> | Date | string
  }

  export type MorningSurveyResponseCreateWithoutPainAreasInput = {
    id?: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
    player: PlayerCreateNestedOneWithoutMorningSurveysInput
  }

  export type MorningSurveyResponseUncheckedCreateWithoutPainAreasInput = {
    id?: string
    playerId: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
  }

  export type MorningSurveyResponseCreateOrConnectWithoutPainAreasInput = {
    where: MorningSurveyResponseWhereUniqueInput
    create: XOR<MorningSurveyResponseCreateWithoutPainAreasInput, MorningSurveyResponseUncheckedCreateWithoutPainAreasInput>
  }

  export type MorningSurveyResponseUpsertWithoutPainAreasInput = {
    update: XOR<MorningSurveyResponseUpdateWithoutPainAreasInput, MorningSurveyResponseUncheckedUpdateWithoutPainAreasInput>
    create: XOR<MorningSurveyResponseCreateWithoutPainAreasInput, MorningSurveyResponseUncheckedCreateWithoutPainAreasInput>
    where?: MorningSurveyResponseWhereInput
  }

  export type MorningSurveyResponseUpdateToOneWithWhereWithoutPainAreasInput = {
    where?: MorningSurveyResponseWhereInput
    data: XOR<MorningSurveyResponseUpdateWithoutPainAreasInput, MorningSurveyResponseUncheckedUpdateWithoutPainAreasInput>
  }

  export type MorningSurveyResponseUpdateWithoutPainAreasInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    player?: PlayerUpdateOneRequiredWithoutMorningSurveysNestedInput
  }

  export type MorningSurveyResponseUncheckedUpdateWithoutPainAreasInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyClubInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId?: string | null
    createdById: string
  }

  export type ExerciseCreateManyClubInput = {
    id?: string
    title: string
    description: string
    authorId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
  }

  export type ExerciseCategoryCreateManyClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseTagCreateManyClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exerciseCategoryId: string
  }

  export type MatchCreateManyClubInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    teamId: string
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MediaItemCreateManyClubInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type TeamCreateManyClubInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: number
  }

  export type TrainingCreateManyClubInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    categoryId: string
    createdById: string
    type?: string
  }

  export type TrainingCategoryCreateManyClubInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyClubInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    emailVerified?: Date | string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutEventsNestedInput
    team?: TeamUpdateOneWithoutEventsNestedInput
    mediaItems?: MediaItemUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    mediaItems?: MediaItemUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExerciseCategoryUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutCategoryNestedInput
    tags?: ExerciseTagUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ExerciseCategoryUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutCategoryNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryNestedInput
  }

  export type ExerciseCategoryUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseTagUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseCategory?: ExerciseCategoryUpdateOneRequiredWithoutTagsNestedInput
    exercises?: ExerciseUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    team?: TeamUpdateOneRequiredWithoutMatchesNestedInput
    playerStats?: PlayerMatchStatUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    teamId?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    teamId?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MediaItemUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    event?: EventUpdateOneWithoutMediaItemsNestedInput
    exercise?: ExerciseUpdateOneWithoutMediaItemsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutMediaUploadsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUpdateManyWithoutTeamNestedInput
    matches?: MatchUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
    events?: EventUncheckedUpdateManyWithoutTeamNestedInput
    matches?: MatchUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    coaches?: TeamCoachUncheckedUpdateManyWithoutTeamNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type TrainingUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingCategoryUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainings?: TrainingUpdateManyWithoutCategoryNestedInput
  }

  export type TrainingCategoryUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trainings?: TrainingUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TrainingCategoryUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUpdateManyWithoutUserNestedInput
    trainings?: TrainingUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutAuthorNestedInput
    mediaUploads?: MediaItemUncheckedUpdateManyWithoutUploadedByNestedInput
    playerDocuments?: PlayerDocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamCoaches?: TeamCoachUncheckedUpdateManyWithoutUserNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId?: string | null
  }

  export type ExerciseCreateManyAuthorInput = {
    id?: string
    title: string
    description: string
    clubId: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
  }

  export type MediaItemCreateManyUploadedByInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type PlayerDocumentCreateManyUploadedByInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playerId: string
    clubId: string
  }

  export type TeamCoachCreateManyUserInput = {
    id?: string
    teamId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    categoryId: string
    type?: string
  }

  export type EventUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    team?: TeamUpdateOneWithoutEventsNestedInput
    mediaItems?: MediaItemUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MediaItemUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    club?: ClubUpdateOneRequiredWithoutMediaItemsNestedInput
    event?: EventUpdateOneWithoutMediaItemsNestedInput
    exercise?: ExerciseUpdateOneWithoutMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlayerDocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    player?: PlayerUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type PlayerDocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerDocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCoachUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutCoachesNestedInput
  }

  export type TeamCoachUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCoachUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyTeamInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    createdById: string
  }

  export type MatchCreateManyTeamInput = {
    id?: string
    competitionType: $Enums.CompetitionType
    date: Date | string
    time: string
    isHome: boolean
    opponentName: string
    teamGoals?: number
    opponentGoals?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    formation?: string | null
    gameFormat?: string | null
    markerColor?: string | null
    notes?: string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlayerCreateManyTeamInput = {
    id?: string
    firstName: string
    lastName: string
    middleName?: string | null
    number?: number | null
    position?: string | null
    strongFoot?: string | null
    dateOfBirth?: Date | string | null
    academyJoinDate?: Date | string | null
    nationality?: string | null
    imageUrl?: string | null
    status?: string | null
    birthCertificateNumber?: string | null
    pinCode: string
    telegramId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCoachCreateManyTeamInput = {
    id?: string
    userId: string
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyTeamInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    categoryId: string
    createdById: string
    type?: string
  }

  export type EventUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutEventsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutEventsNestedInput
    mediaItems?: MediaItemUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    mediaItems?: MediaItemUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    club?: ClubUpdateOneRequiredWithoutMatchesNestedInput
    playerStats?: PlayerMatchStatUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
    playerStats?: PlayerMatchStatUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    competitionType?: EnumCompetitionTypeFieldUpdateOperationsInput | $Enums.CompetitionType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    isHome?: BoolFieldUpdateOperationsInput | boolean
    opponentName?: StringFieldUpdateOperationsInput | string
    teamGoals?: IntFieldUpdateOperationsInput | number
    opponentGoals?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    formation?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    markerColor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    playerPositions?: NullableJsonNullValueInput | InputJsonValue
    positionAssignments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlayerUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: PlayerAttendanceUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutPlayerNestedInput
    documents?: PlayerDocumentUncheckedUpdateManyWithoutPlayerNestedInput
    matchStats?: PlayerMatchStatUncheckedUpdateManyWithoutPlayerNestedInput
    morningSurveys?: MorningSurveyResponseUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    strongFoot?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    academyJoinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    birthCertificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCoachUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTeamCoachesNestedInput
  }

  export type TeamCoachUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCoachUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    category?: TrainingCategoryUpdateOneRequiredWithoutTrainingsNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MediaItemCreateManyEventInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    uploadedById: string
    exerciseId?: string | null
    publicUrl?: string | null
  }

  export type MediaItemUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    club?: ClubUpdateOneRequiredWithoutMediaItemsNestedInput
    exercise?: ExerciseUpdateOneWithoutMediaItemsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutMediaUploadsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    exerciseId?: NullableStringFieldUpdateOperationsInput | string | null
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingCreateManyCategoryInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    time: string
    location?: string | null
    notes?: string | null
    status?: $Enums.TrainingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    teamId: string
    createdById: string
    type?: string
  }

  export type TrainingUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUpdateManyWithoutTrainingNestedInput
    club?: ClubUpdateOneRequiredWithoutTrainingsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTrainingsNestedInput
    team?: TeamUpdateOneRequiredWithoutTrainingsNestedInput
    exercises?: TrainingExerciseUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    attendances?: PlayerAttendanceUncheckedUpdateManyWithoutTrainingNestedInput
    exercises?: TrainingExerciseUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTrainingStatusFieldUpdateOperationsInput | $Enums.TrainingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerAttendanceCreateManyTrainingInput = {
    id?: string
    playerId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingExerciseCreateManyTrainingInput = {
    id?: string
    position: number
    exerciseId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerAttendanceUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type PlayerAttendanceUncheckedUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerAttendanceUncheckedUpdateManyWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingExerciseUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutTrainingsNestedInput
  }

  export type TrainingExerciseUncheckedUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingExerciseUncheckedUpdateManyWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemCreateManyExerciseInput = {
    id?: string
    name: string
    type: $Enums.MediaType
    url: string
    size: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    eventId?: string | null
    uploadedById: string
    publicUrl?: string | null
  }

  export type TrainingExerciseCreateManyExerciseInput = {
    id?: string
    position: number
    trainingId: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    club?: ClubUpdateOneRequiredWithoutMediaItemsNestedInput
    event?: EventUpdateOneWithoutMediaItemsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutMediaUploadsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedById?: StringFieldUpdateOperationsInput | string
    publicUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingExerciseUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    training?: TrainingUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type TrainingExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    trainingId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    trainingId?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseTagUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutExerciseTagsNestedInput
    exerciseCategory?: ExerciseCategoryUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseTagUncheckedUpdateManyWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exerciseCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateManyCategoryInput = {
    id?: string
    title: string
    description: string
    authorId: string
    clubId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    length?: number | null
    width?: number | null
  }

  export type ExerciseTagCreateManyExerciseCategoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
  }

  export type ExerciseUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    tags?: ExerciseTagUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExerciseTagUpdateWithoutExerciseCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutExerciseTagsNestedInput
    exercises?: ExerciseUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateWithoutExerciseCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type ExerciseTagUncheckedUpdateManyWithoutExerciseCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutExercisesNestedInput
    category?: ExerciseCategoryUpdateOneRequiredWithoutExercisesNestedInput
    club?: ClubUpdateOneRequiredWithoutExercisesNestedInput
    mediaItems?: MediaItemUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
    mediaItems?: MediaItemUncheckedUpdateManyWithoutExerciseNestedInput
    trainings?: TrainingExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    width?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PlayerAttendanceCreateManyPlayerInput = {
    id?: string
    trainingId: string
    status?: $Enums.AttendanceStatus
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerDocumentCreateManyPlayerInput = {
    id?: string
    name: string
    type: $Enums.DocumentType
    url: string
    publicUrl: string
    size: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clubId: string
    uploadedById: string
  }

  export type PlayerMatchStatCreateManyPlayerInput = {
    id?: string
    matchId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MorningSurveyResponseCreateManyPlayerInput = {
    id?: string
    createdAt?: Date | string
    readAt?: Date | string | null
    completedAt?: Date | string | null
    sleepDuration: number
    sleepQuality: number
    recovery: number
    mood: number
    muscleCondition: number
    surveyId: string
    tenantId: string
  }

  export type PlayerAttendanceUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    training?: TrainingUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type PlayerAttendanceUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerAttendanceUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerDocumentUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedBy?: UserUpdateOneRequiredWithoutPlayerDocumentsNestedInput
  }

  export type PlayerDocumentUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerDocumentUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    publicUrl?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerMatchStatUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutPlayerStatsNestedInput
  }

  export type PlayerMatchStatUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerMatchStatUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MorningSurveyResponseUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    painAreas?: PainAreaUpdateManyWithoutSurveyNestedInput
  }

  export type MorningSurveyResponseUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    painAreas?: PainAreaUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type MorningSurveyResponseUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sleepDuration?: FloatFieldUpdateOperationsInput | number
    sleepQuality?: IntFieldUpdateOperationsInput | number
    recovery?: IntFieldUpdateOperationsInput | number
    mood?: IntFieldUpdateOperationsInput | number
    muscleCondition?: IntFieldUpdateOperationsInput | number
    surveyId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerMatchStatCreateManyMatchInput = {
    id?: string
    playerId: string
    isStarter?: boolean
    minutesPlayed?: number
    goals?: number
    assists?: number
    yellowCards?: number
    redCards?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerMatchStatUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutMatchStatsNestedInput
  }

  export type PlayerMatchStatUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerMatchStatUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    minutesPlayed?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    yellowCards?: IntFieldUpdateOperationsInput | number
    redCards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventCreateManyScheduleInput = {
    id?: string
    type?: string
    time: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleEventUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventUncheckedUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleEventUncheckedUpdateManyWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PainAreaCreateManySurveyInput = {
    id?: string
    areaName: string
    painLevel: number
    createdAt?: Date | string
  }

  export type PainAreaUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PainAreaUncheckedUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PainAreaUncheckedUpdateManyWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    areaName?: StringFieldUpdateOperationsInput | string
    painLevel?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}