// @ts-nocheck
import { db } from './db';
import { playerGameModel } from '@/db/schema/playerGameModel';
import { gpsReport } from '@/db/schema/gpsReport';
import { gpsReportData } from '@/db/schema/gpsReportData';
import { match } from '@/db/schema/match';
import { player } from '@/db/schema/player';
import { eq, and, inArray, desc, sql } from 'drizzle-orm';
import { gpsCanonicalMetric } from '@/db/schema/gpsCanonicalMetric';

interface GameModelResult {
  playerId: string;
  matchesCount: number;
  totalMinutes: number;
  metrics: Record<string, number>;
  matchIds: string[];
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ GPS –æ—Ç—á–µ—Ç–∞—Ö
 * @param matchIds –ú–∞—Å—Å–∏–≤ ID –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param clubId ID –∫–ª—É–±–∞
 * @returns –ú–∞—Å—Å–∏–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –º–∞—Ç—á–µ–π
 */
async function validateMatchIds(matchIds: string[], clubId: string): Promise<string[]> {
  if (matchIds.length === 0) return [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –º–∞—Ç—á–µ–π
    const existingReports = await db
      .select({ eventId: gpsReport.eventId })
      .from(gpsReport)
      .where(and(
        eq(gpsReport.clubId, clubId),
        eq(gpsReport.eventType, 'match'),
        inArray(gpsReport.eventId, matchIds)
      ));
    
    const existingMatchIds = existingReports.map(r => r.eventId);
    const missingMatchIds = matchIds.filter(id => !existingMatchIds.includes(id));
    
    if (missingMatchIds.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏: ${missingMatchIds.join(', ')}`);
    }
    
    return existingMatchIds;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π:', error);
    return [];
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏
 * @param playerId ID –∏–≥—Ä–æ–∫–∞
 * @param clubId ID –∫–ª—É–±–∞
 */
async function cleanupInvalidGameModel(playerId: string, clubId: string): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞
    const existingModel = await db
      .select()
      .from(playerGameModel)
      .where(and(
        eq(playerGameModel.playerId, playerId),
        eq(playerGameModel.clubId, clubId)
      ))
      .limit(1);
    
    if (existingModel.length === 0) return;
    
    const model = existingModel[0];
    const matchIds = Array.isArray(model.matchIds) ? model.matchIds : [];
    
    if (matchIds.length === 0) return;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Ç—á–∏
    const validMatchIds = await validateMatchIds(matchIds, clubId);
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–∞—Ç—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã - —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
    if (validMatchIds.length === 0) {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
      await db
        .delete(playerGameModel)
        .where(and(
          eq(playerGameModel.playerId, playerId),
          eq(playerGameModel.clubId, clubId)
        ));
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
    if (validMatchIds.length < matchIds.length) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}: ${validMatchIds.length}/${matchIds.length} –º–∞—Ç—á–µ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã`);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏
      const recalculatedModel = await calculatePlayerGameModelWithValidation(playerId, clubId, validMatchIds);
      
      if (recalculatedModel) {
        await savePlayerGameModel(playerId, clubId, recalculatedModel);
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å - —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        await db
          .delete(playerGameModel)
          .where(and(
            eq(playerGameModel.playerId, playerId),
            eq(playerGameModel.clubId, clubId)
          ));
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
 * @param playerId ID –∏–≥—Ä–æ–∫–∞
 * @param clubId ID –∫–ª—É–±–∞
 * @param validMatchIds –ú–∞—Å—Å–∏–≤ –≤–∞–ª–∏–¥–Ω—ã—Ö ID –º–∞—Ç—á–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 */
async function calculatePlayerGameModelWithValidation(
  playerId: string, 
  clubId: string,
  validMatchIds?: string[]
): Promise<GameModelResult | null> {
  try {
    console.log(`üîç –†–∞—Å—á–µ—Ç –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}...`);
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ä–µ–¥–Ω—è–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ –ë–î
    const averageableMetrics = await db
      .select({ code: gpsCanonicalMetric.code })
      .from(gpsCanonicalMetric)
      .where(and(
        eq(gpsCanonicalMetric.isActive, true),
        eq(gpsCanonicalMetric.isAverageable, true)
      ));

    const averageableMetricCodes = averageableMetrics.map(m => m.code);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É—Å—Ä–µ–¥–Ω—è–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫: ${averageableMetricCodes.length}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const [playerData] = await db
      .select()
      .from(player)
      .where(eq(player.id, playerId));

    if (!playerData) {
      console.log(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }
    
    console.log(`üë§ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: ${playerData.firstName} ${playerData.lastName}, –∫–æ–º–∞–Ω–¥–∞: ${playerData.teamId}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º GPS –æ—Ç—á–µ—Ç—ã –¥–ª—è –º–∞—Ç—á–µ–π
    let gpsReports;
    
    if (validMatchIds && validMatchIds.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
      gpsReports = await db
        .select({
          id: gpsReport.id,
          eventId: gpsReport.eventId,
          createdAt: gpsReport.createdAt
        })
        .from(gpsReport)
        .where(and(
          eq(gpsReport.eventType, 'match'),
          eq(gpsReport.clubId, clubId),
          inArray(gpsReport.eventId, validMatchIds)
        ))
        .orderBy(desc(gpsReport.createdAt));
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ GPS –æ—Ç—á–µ—Ç—ã –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Ö
      const allReports = await db
        .select({
          id: gpsReport.id,
          eventId: gpsReport.eventId,
          createdAt: gpsReport.createdAt
        })
        .from(gpsReport)
        .where(and(
          eq(gpsReport.eventType, 'match'),
          eq(gpsReport.clubId, clubId)
        ))
        .orderBy(desc(gpsReport.createdAt));
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
      const reportIds = allReports.map(r => r.eventId);
      const validReportIds = await validateMatchIds(reportIds, clubId);
      
      gpsReports = allReports.filter(r => validReportIds.includes(r.eventId));
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö GPS –æ—Ç—á–µ—Ç–æ–≤: ${gpsReports.length}`);
    
    if (gpsReports.length === 0) {
      console.log(`‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö GPS –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∫–ª—É–±–∞`);
      return null;
    }

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞
    const allPlayerMatches: Array<{
      matchId: string;
      durationMinutes: number;
      metrics: Record<string, number>;
      createdAt: Date;
    }> = [];

    for (const report of gpsReports) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞ –º–∞—Ç—á
      const playerData = await db
        .select({
          canonicalMetric: gpsReportData.canonicalMetric,
          value: gpsReportData.value,
          unit: gpsReportData.unit
        })
        .from(gpsReportData)
        .where(and(
          eq(gpsReportData.gpsReportId, report.id),
          eq(gpsReportData.playerId, playerId),
          inArray(gpsReportData.canonicalMetric, averageableMetricCodes)
        ));

      if (playerData.length === 0) continue;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
      const durationData = playerData.find(d => d.canonicalMetric === 'duration');
      if (!durationData) continue;
      
      const durationSeconds = parseFloat(durationData.value);
      const durationMinutes = durationSeconds / 60; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª 60+ –º–∏–Ω—É—Ç
      if (durationMinutes < 60) {
        console.log(`‚è∞ –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª —Ç–æ–ª—å–∫–æ ${durationMinutes.toFixed(1)} –º–∏–Ω—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á ${report.eventId}`);
        continue;
      }

      // 5. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ö 1 –ú–ò–ù–£–¢–ï
      const matchMetrics: Record<string, number> = {};
      
      for (const data of playerData) {
        if (data.canonicalMetric === 'duration') continue;
        
        const value = parseFloat(data.value);
        if (isNaN(value) || value <= 0) continue;
        
        // –ü–†–ê–í–ò–õ–¨–ù–û: –º–µ—Ç—Ä–∏–∫–∞ –∑–∞ –º–∏–Ω—É—Ç—É = –æ–±—â–∞—è_–º–µ—Ç—Ä–∏–∫–∞ / –º–∏–Ω—É—Ç—ã_–∏–≥—Ä—ã
        const metricPerMinute = value / durationMinutes;
        matchMetrics[data.canonicalMetric] = metricPerMinute;
      }

      allPlayerMatches.push({
        matchId: report.eventId,
        durationMinutes,
        metrics: matchMetrics,
        createdAt: report.createdAt
      });

      console.log(`‚úÖ –ú–∞—Ç—á ${report.eventId}: ${durationMinutes.toFixed(1)} –º–∏–Ω—É—Ç, ${Object.keys(matchMetrics).length} –º–µ—Ç—Ä–∏–∫`);
    }

    // 6. –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ —Å 60+ –º–∏–Ω—É—Ç–∞–º–∏
    const validMatches = allPlayerMatches
      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      .slice(0, 10); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –º–∞—Ç—á
    if (validMatches.length === 0) {
      console.log(`‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π —Å 60+ –º–∏–Ω—É—Ç–∞–º–∏ –∏–≥—Ä—ã`);
      return null;
    }

    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${validMatches.length}`);

    // 7. –£–°–†–ï–î–ù–ï–ù–ò–ï –ü–û –í–°–ï–ú –ú–ê–¢–ß–ê–ú
    const averageMetrics: Record<string, number> = {};
    const metricSums: Record<string, number> = {};
    const metricCounts: Record<string, number> = {};

    for (const match of validMatches) {
      for (const [metricCode, valuePerMinute] of Object.entries(match.metrics)) {
        if (!metricSums[metricCode]) {
          metricSums[metricCode] = 0;
          metricCounts[metricCode] = 0;
        }
        
        metricSums[metricCode] += valuePerMinute;
        metricCounts[metricCode]++;
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –º–∏–Ω—É—Ç—É
    for (const metricCode of averageableMetricCodes) {
      if (metricCounts[metricCode] > 0) {
        averageMetrics[metricCode] = metricSums[metricCode] / metricCounts[metricCode];
      }
    }

    const totalMinutes = validMatches.reduce((sum, match) => sum + match.durationMinutes, 0);
    const validMatchIds = validMatches.map(match => match.matchId);

    console.log(`üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ ${Object.keys(averageMetrics).length} –º–µ—Ç—Ä–∏–∫ –∑–∞ –º–∏–Ω—É—Ç—É`);
    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: ${totalMinutes.toFixed(1)} –º–∏–Ω—É—Ç`);

    return {
      playerId,
      matchesCount: validMatches.length,
      totalMinutes: Math.round(totalMinutes),
      metrics: averageMetrics, // –ó–Ω–∞—á–µ–Ω–∏—è –ó–ê –ú–ò–ù–£–¢–£!
      matchIds: validMatchIds
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
    return null;
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 * @param playerId ID –∏–≥—Ä–æ–∫–∞
 * @param clubId ID –∫–ª—É–±–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 */
export async function calculatePlayerGameModel(
  playerId: string, 
  clubId: string
): Promise<GameModelResult | null> {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
  await cleanupInvalidGameModel(playerId, clubId);
  
  // –ó–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
  return await calculatePlayerGameModelWithValidation(playerId, clubId);
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param playerId ID –∏–≥—Ä–æ–∫–∞
 * @param clubId ID –∫–ª—É–±–∞
 * @param gameModel –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏
 */
export async function savePlayerGameModel(
  playerId: string,
  clubId: string,
  gameModel: GameModelResult
): Promise<void> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await db
      .insert(playerGameModel)
      .values({
        playerId,
        clubId,
        calculatedAt: new Date(),
        matchesCount: gameModel.matchesCount,
        totalMinutes: gameModel.totalMinutes,
        metrics: gameModel.metrics,
        matchIds: gameModel.matchIds,
        version: 1
      })
      .onConflictDoUpdate({
        target: [playerGameModel.playerId, playerGameModel.clubId],
        set: {
          calculatedAt: new Date(),
          matchesCount: gameModel.matchesCount,
          totalMinutes: gameModel.totalMinutes,
          metrics: gameModel.metrics,
          matchIds: gameModel.matchIds,
          version: sql`${playerGameModel.version} + 1`,
          updatedAt: new Date()
        }
      });

    console.log(`‚úÖ –ò–≥—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
    throw error;
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
 * @param teamId ID –∫–æ–º–∞–Ω–¥—ã
 * @param clubId ID –∫–ª—É–±–∞
 */
export async function calculateGameModelsForTeam(
  teamId: string,
  clubId: string
): Promise<void> {
  try {
    console.log(`üîç –†–∞—Å—á–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const players = await db
      .select({ id: player.id })
      .from(player)
      .where(eq(player.teamId, teamId));

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);

    let successCount = 0;
    let errorCount = 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const { id: playerId } of players) {
      try {
        const gameModel = await calculatePlayerGameModel(playerId, clubId);
        
        if (gameModel) {
          await savePlayerGameModel(playerId, clubId, gameModel);
          successCount++;
        } else {
          console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId}:`, error);
    throw error;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª—É–±–∞
 * @param clubId ID –∫–ª—É–±–∞
 */
export async function cleanupAllInvalidGameModels(clubId: string): Promise<void> {
  try {
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–ª—É–±–∞ ${clubId}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∫–ª—É–±–∞
    const gameModels = await db
      .select()
      .from(playerGameModel)
      .where(eq(playerGameModel.clubId, clubId));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${gameModels.length}`);
    
    let cleanedCount = 0;
    
    for (const model of gameModels) {
      const matchIds = Array.isArray(model.matchIds) ? model.matchIds : [];
      
      if (matchIds.length === 0) {
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ –±–µ–∑ –º–∞—Ç—á–µ–π
        await db
          .delete(playerGameModel)
          .where(eq(playerGameModel.id, model.id));
        cleanedCount++;
        continue;
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Ç—á–∏
      const validMatchIds = await validateMatchIds(matchIds, clubId);
      
      if (validMatchIds.length === 0) {
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏
        await db
          .delete(playerGameModel)
          .where(eq(playerGameModel.id, model.id));
        cleanedCount++;
      } else if (validMatchIds.length < matchIds.length) {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ —Å —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏
        const recalculatedModel = await calculatePlayerGameModelWithValidation(
          model.playerId, 
          clubId, 
          validMatchIds
        );
        
        if (recalculatedModel) {
          await savePlayerGameModel(model.playerId, clubId, recalculatedModel);
          cleanedCount++;
        } else {
          await db
            .delete(playerGameModel)
            .where(eq(playerGameModel.id, model.id));
          cleanedCount++;
        }
      }
    }
    
    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${cleanedCount}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–ª—É–±–∞ ${clubId}:`, error);
    throw error;
  }
}