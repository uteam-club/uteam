const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function verifyDatabaseData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∫–ª—É–±–∞ Alashkert
    const alashkertClubId = 'c9ba11c6-eb0c-4fa8-9db1-ad18d8443e69';
    
    const modelsResult = await pool.query(`
      SELECT "playerId", "matchesCount", "totalMinutes", metrics
      FROM "PlayerGameModel" 
      WHERE "clubId" = $1
      ORDER BY "matchesCount" DESC, "calculatedAt" DESC
    `, [alashkertClubId]);
    
    console.log('üéØ –ò–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∫–ª—É–±–∞ Alashkert:');
    modelsResult.rows.forEach((model, index) => {
      console.log(`\n   ${index + 1}. –ò–≥—Ä–æ–∫: ${model.playerId}`);
      console.log(`      –ú–∞—Ç—á–µ–π: ${model.matchesCount}, –ú–∏–Ω—É—Ç: ${model.totalMinutes}`);
      
      if (model.metrics) {
        const metrics = typeof model.metrics === 'string' ? JSON.parse(model.metrics) : model.metrics;
        console.log(`      –ú–µ—Ç—Ä–∏–∫–∏ (–∑–∞ 1 –º–∏–Ω—É—Ç—É):`);
        Object.entries(metrics).forEach(([metric, value]) => {
          console.log(`        ${metric}: ${value.toFixed(2)}`);
        });
      }
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º GPS –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    const reportId = '019f40bf-400f-4bcd-b599-c18071f7f276';
    
    const reportDataResult = await pool.query(`
      SELECT "playerId", "canonicalMetric", value
      FROM "GpsReportData" 
      WHERE "gpsReportId" = $1
      AND "canonicalMetric" = 'total_distance'
      ORDER BY "playerId"
    `, [reportId]);
    
    console.log('\nüìä GPS –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (total_distance):');
    reportDataResult.rows.forEach(row => {
      console.log(`   –ò–≥—Ä–æ–∫ ${row.playerId}: ${row.value} –º`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
    const durationResult = await pool.query(`
      SELECT "playerId", value
      FROM "GpsReportData" 
      WHERE "gpsReportId" = $1
      AND "canonicalMetric" = 'duration'
      ORDER BY "playerId"
    `, [reportId]);
    
    console.log('\n‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):');
    durationResult.rows.forEach(row => {
      const minutes = parseFloat(row.value) / 60;
      console.log(`   –ò–≥—Ä–æ–∫ ${row.playerId}: ${row.value} —Å–µ–∫ (${minutes.toFixed(1)} –º–∏–Ω)`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const testPlayerId = '30ae6e0a-aee2-4bd5-a440-b5d51cc5a667';
    
    const playerModel = modelsResult.rows.find(m => m.playerId === testPlayerId);
    const playerDuration = durationResult.rows.find(d => d.playerId === testPlayerId);
    const playerDistance = reportDataResult.rows.find(d => d.playerId === testPlayerId);
    
    if (playerModel && playerDuration && playerDistance) {
      console.log(`\nüßÆ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${testPlayerId}:`);
      
      const actualDuration = parseFloat(playerDuration.value) / 60;
      const currentDistance = parseFloat(playerDistance.value);
      
      console.log(`   –í—Ä–µ–º—è –∏–≥—Ä—ã: ${actualDuration.toFixed(1)} –º–∏–Ω—É—Ç`);
      console.log(`   –¢–µ–∫—É—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${currentDistance} –º`);
      
      if (playerModel.metrics) {
        const metrics = typeof playerModel.metrics === 'string' ? JSON.parse(playerModel.metrics) : playerModel.metrics;
        const modelDistancePerMinute = metrics.total_distance || 0;
        const modelDistance = modelDistancePerMinute * actualDuration;
        
        console.log(`   –ú–æ–¥–µ–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–∞ 1 –º–∏–Ω: ${modelDistancePerMinute.toFixed(2)} –º/–º–∏–Ω`);
        console.log(`   –ú–æ–¥–µ–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–∞ ${actualDuration.toFixed(1)} –º–∏–Ω: ${modelDistance.toFixed(0)} –º`);
        
        const percentageDiff = modelDistance > 0 ? ((currentDistance - modelDistance) / modelDistance) * 100 : 0;
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: ${percentageDiff.toFixed(1)}%`);
      }
    }
    
    await pool.end();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

verifyDatabaseData();
