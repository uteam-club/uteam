#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö autoComplete
const patterns = [
  // –ü–∞—Ç—Ç–µ—Ä–Ω 1: /  autoComplete="off">
  /\/\s+autoComplete="off">/g,
  // –ü–∞—Ç—Ç–µ—Ä–Ω 2: /"  autoComplete="off">
  /\/"\s+autoComplete="off">/g,
  // –ü–∞—Ç—Ç–µ—Ä–Ω 3: onChange={e="handleChange('field', e.target.value)} /"  autoComplete="off">
  /onChange=\{e="handleChange\('([^']+)',\s*e\.target\.value\)\}\s*\/"\s+autoComplete="off">/g,
  // –ü–∞—Ç—Ç–µ—Ä–Ω 4: onFocus={e =  autoComplete="off"> { if (e.target.value === '0') e.target.value = ''; }}
  /onFocus=\{e\s*=\s*autoComplete="off">\s*\{\s*if\s*\(e\.target\.value\s*===\s*'0'\)\s*e\.target\.value\s*=\s*'';\s*\}\}/g,
  // –ü–∞—Ç—Ç–µ—Ä–Ω 5: onChange={(setFormData(prev => ({ ...prev, field: e.target.value )}))}
  /onChange=\{\(setFormData\(prev\s*=>\s*\(\{\s*\.\.\.prev,\s*([^:]+):\s*e\.target\.value\s*\)\)\)\}/g,
  // –ü–∞—Ç—Ç–µ—Ä–Ω 6: console.log —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
  /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setSearchQuery\(e\.target\.value\);\s*\)\}/g,
  /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setStartDate\(e\.target\.value\);\s*\)\}/g,
  /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setEndDate\(e\.target\.value\);\s*\)\}/g,
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ autoComplete
  const originalContent = content;
  content = content.replace(/\/\s+autoComplete="off">/g, ' autoComplete="off" />');
  content = content.replace(/\/"\s+autoComplete="off">/g, '" autoComplete="off" />');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
  content = content.replace(
    /onChange=\{e="handleChange\('([^']+)',\s*e\.target\.value\)\}\s*\/"\s+autoComplete="off">/g,
    'onChange={e => handleChange(\'$1\', e.target.value)} autoComplete="off" />'
  );
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º onFocus —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
  content = content.replace(
    /onFocus=\{e\s*=\s*autoComplete="off">\s*\{\s*if\s*\(e\.target\.value\s*===\s*'0'\)\s*e\.target\.value\s*=\s*'';\s*\}\}/g,
    'onFocus={e => { if (e.target.value === \'0\') e.target.value = \'\'; }} autoComplete="off" />'
  );
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º onChange —Å setFormData
  content = content.replace(
    /onChange=\{\(setFormData\(prev\s*=>\s*\(\{\s*\.\.\.prev,\s*([^:]+):\s*e\.target\.value\s*\)\)\)\}/g,
    'onChange={e => setFormData(prev => ({ ...prev, $1: e.target.value }))}'
  );
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º console.log —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
  content = content.replace(
    /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setSearchQuery\(e\.target\.value\);\s*\)\}/g,
    'console.log(\'üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞:\', e.target.value);\n                    setSearchQuery(e.target.value);\n                  }}'
  );
  
  content = content.replace(
    /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setStartDate\(e\.target\.value\);\s*\)\}/g,
    'console.log(\'üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞:\', e.target.value);\n                      setStartDate(e.target.value);\n                    }}'
  );
  
  content = content.replace(
    /console\.log\('üîç[^']*',\s*e\.target\.value\);\s*setEndDate\(e\.target\.value\);\s*\)\}/g,
    'console.log(\'üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è:\', e.target.value);\n                      setEndDate(e.target.value);\n                    }}'
  );

  if (content !== originalContent) {
    fs.writeFileSync(filePath, content, 'utf8');
    modified = true;
  }

  return modified;
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
const errorFiles = [
  'src/app/dashboard/analytics/attendance/page.tsx',
  'src/app/dashboard/coaching/matches/page.tsx',
  'src/app/dashboard/coaching/trainings/page.tsx',
  'src/app/dashboard/teams/create/page.tsx',
  'src/app/dashboard/training/exercises/page.tsx',
  'src/components/admin/AddExerciseCategoryModal.tsx',
  'src/components/admin/AddExerciseTagModal.tsx',
  'src/components/admin/AddTeamModal.tsx',
  'src/components/admin/AddTrainingCategoryModal.tsx',
  'src/components/admin/AddUserModal.tsx',
  'src/components/admin/EditExerciseCategoryModal.tsx',
  'src/components/admin/EditExerciseTagModal.tsx',
  'src/components/admin/EditTeamModal.tsx',
  'src/components/admin/EditTrainingCategoryModal.tsx',
  'src/components/admin/EditUserModal.tsx',
  'src/components/gps/CreateColumnMappingModal.tsx',
  'src/components/gps/EditColumnMappingModal.tsx',
  'src/components/teams/AddPlayerModal.tsx',
  'src/components/training/CreateExerciseModal.tsx',
  'src/components/training/PreviewExerciseModal.tsx'
];

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ autoComplete...');

let fixedCount = 0;
errorFiles.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    const modified = fixFile(filePath);
    if (modified) {
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      fixedCount++;
    } else {
      console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filePath}`);
    }
  } else {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
  }
});

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
console.log('‚ú® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π: npm run typecheck:ci');
