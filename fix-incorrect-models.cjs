const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function fixIncorrectModels() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏...\n');
    
    // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤—Ä–µ–º—è > 200 –º–∏–Ω—É—Ç)
    const deleteResult = await pool.query(`
      DELETE FROM "PlayerGameModel" 
      WHERE "totalMinutes" > 200
    `);
    
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${deleteResult.rowCount}`);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª—É–±–∞ Alashkert —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    const alashkertClubId = 'c9ba11c6-eb0c-4fa8-9db1-ad18d8443e69';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∫–ª—É–±–∞
    const reportsResult = await pool.query(`
      SELECT id, name, "eventType", "teamId", "clubId", "createdAt"
      FROM "GpsReport" 
      WHERE "clubId" = $1 AND "eventType" = 'match'
      ORDER BY "createdAt" DESC
    `, [alashkertClubId]);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reportsResult.rows.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤
    const reportIds = reportsResult.rows.map(r => r.id);
    const dataResult = await pool.query(`
      SELECT "gpsReportId", "playerId", "canonicalMetric", value, "createdAt"
      FROM "GpsReportData" 
      WHERE "gpsReportId" = ANY($1)
      ORDER BY "gpsReportId", "playerId", "canonicalMetric"
    `, [reportIds]);
    
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö: ${dataResult.rows.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º –∏ –æ—Ç—á–µ—Ç–∞–º
    const playerReportData = {};
    dataResult.rows.forEach(row => {
      if (!playerReportData[row.playerId]) {
        playerReportData[row.playerId] = {};
      }
      if (!playerReportData[row.playerId][row.gpsReportId]) {
        playerReportData[row.playerId][row.gpsReportId] = {};
      }
      playerReportData[row.playerId][row.gpsReportId][row.canonicalMetric] = parseFloat(row.value) || 0;
    });
    
    console.log(`üë• –ò–≥—Ä–æ–∫–æ–≤: ${Object.keys(playerReportData).length}`);
    
    let fixedCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const [playerId, playerReports] of Object.entries(playerReportData)) {
      console.log(`\nüë§ –ò–≥—Ä–æ–∫ ${playerId}:`);
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç—á–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const matchData = [];
      
      for (const [reportId, metrics] of Object.entries(playerReports)) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞
        const duration = metrics.duration || metrics.time_on_field || 0;
        let actualDuration = 90; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 90 –º–∏–Ω—É—Ç
        
        if (typeof duration === 'number') {
          // –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 100, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å–µ–∫—É–Ω–¥—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã
          if (duration > 100) {
            actualDuration = duration / 60;
          } else {
            actualDuration = duration;
          }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –≥–¥–µ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞–ª 60+ –º–∏–Ω—É—Ç
        if (actualDuration >= 60) {
          const perMinuteMetrics = {};
          Object.entries(metrics).forEach(([metric, value]) => {
            if (metric !== 'duration' && metric !== 'time_on_field' && value > 0) {
              perMinuteMetrics[metric] = value / actualDuration;
            }
          });
          
          matchData.push({
            reportId,
            duration: actualDuration,
            perMinuteMetrics
          });
          
          console.log(`  üìä –û—Ç—á–µ—Ç ${reportId}: ${actualDuration.toFixed(1)} –º–∏–Ω`);
        } else {
          console.log(`  ‚è≠Ô∏è  –û—Ç—á–µ—Ç ${reportId}: ${actualDuration.toFixed(1)} –º–∏–Ω (–ø—Ä–æ–ø—É—â–µ–Ω, < 60 –º–∏–Ω)`);
        }
      }
      
      if (matchData.length === 0) {
        console.log(`  ‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π —Å 60+ –º–∏–Ω—É—Ç–∞–º–∏`);
        continue;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ 1 –º–∏–Ω—É—Ç—É
      const averagePerMinuteMetrics = {};
      const metricKeys = Object.keys(matchData[0].perMinuteMetrics);
      
      metricKeys.forEach(metric => {
        let totalPerMinute = 0;
        let validCount = 0;
        
        matchData.forEach(match => {
          if (match.perMinuteMetrics[metric] !== undefined) {
            totalPerMinute += match.perMinuteMetrics[metric];
            validCount++;
          }
        });
        
        if (validCount > 0) {
          averagePerMinuteMetrics[metric] = totalPerMinute / validCount;
        }
      });
      
      console.log(`  ‚úÖ –ú–∞—Ç—á–µ–π –≤ –º–æ–¥–µ–ª–∏: ${matchData.length}`);
      console.log(`  üìà –ú–µ—Ç—Ä–∏–∫: ${Object.keys(averagePerMinuteMetrics).length}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –º–æ–¥–µ–ª—å
      await pool.query(`
        INSERT INTO "PlayerGameModel" ("playerId", "clubId", "teamId", metrics, "matchesCount", "totalMinutes", "calculatedAt")
        VALUES ($1, $2, $3, $4, $5, $6, NOW())
        ON CONFLICT ("playerId", "clubId") 
        DO UPDATE SET 
          metrics = EXCLUDED.metrics,
          "matchesCount" = EXCLUDED."matchesCount",
          "totalMinutes" = EXCLUDED."totalMinutes",
          "calculatedAt" = EXCLUDED."calculatedAt"
      `, [
        playerId,
        alashkertClubId,
        reportsResult.rows[0].teamId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º teamId –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        JSON.stringify(averagePerMinuteMetrics),
        matchData.length,
        Math.round(matchData.reduce((sum, m) => sum + m.duration, 0))
      ]);
      
      fixedCount++;
      console.log(`  ‚úÖ –ú–æ–¥–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞`);
    }
    
    await pool.end();
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: ${fixedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

fixIncorrectModels();
