#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import json
from aiohttp import web, ClientSession

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
test_data = {}

async def handle_send_morning_survey(request):
    """HTTP endpoint –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    data = await request.json()
    telegram_id = data.get('telegramId')
    club_id = data.get('clubId')
    team_id = data.get('teamId')
    date = data.get('date')
    
    if not telegram_id or not club_id:
        return web.json_response({'error': 'telegramId –∏ clubId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}, status=400)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_data['morning'] = {
        'telegram_id': telegram_id,
        'club_id': club_id,
        'team_id': team_id,
        'date': date,
        'timestamp': asyncio.get_event_loop().time()
    }
    
    print(f"[MORNING] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    return web.json_response({'success': True})

async def handle_send_rpe_survey(request):
    """HTTP endpoint –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ RPE –æ–ø—Ä–æ—Å–∞"""
    data = await request.json()
    telegram_id = data.get('telegramId')
    club_id = data.get('clubId')
    team_id = data.get('teamId')
    date = data.get('date')
    training_id = data.get('trainingId')
    
    if not telegram_id or not club_id:
        return web.json_response({'error': 'telegramId –∏ clubId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}, status=400)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_data['rpe'] = {
        'telegram_id': telegram_id,
        'club_id': club_id,
        'team_id': team_id,
        'date': date,
        'training_id': training_id,
        'timestamp': asyncio.get_event_loop().time()
    }
    
    print(f"[RPE] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    return web.json_response({'success': True})

async def handle_send_survey_success(request):
    """HTTP endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞"""
    data = await request.json()
    telegram_id = data.get('telegramId')
    lang = data.get('language', 'ru')
    survey_date = data.get('surveyDate')
    
    if not telegram_id:
        return web.json_response({'error': 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}, status=400)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_data['success'] = {
        'telegram_id': telegram_id,
        'language': lang,
        'survey_date': survey_date,
        'timestamp': asyncio.get_event_loop().time()
    }
    
    print(f"[SUCCESS] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    return web.json_response({'success': True})

async def handle_status(request):
    """HTTP endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    return web.json_response({
        'status': 'running',
        'endpoints': {
            'morning': '/send-morning-survey',
            'rpe': '/send-rpe-survey',
            'success': '/send-survey-success'
        },
        'test_data': test_data
    })

async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoints
    app.router.add_post('/send-morning-survey', handle_send_morning_survey)
    app.router.add_post('/send-rpe-survey', handle_send_rpe_survey)
    app.router.add_post('/send-survey-success', handle_send_survey_success)
    app.router.add_get('/status', handle_status)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    
    print('üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080')
    print('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:')
    print('   POST /send-morning-survey')
    print('   POST /send-rpe-survey')
    print('   POST /send-survey-success')
    print('   GET /status')
    print('')
    print('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...')
    
    # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    try:
        await asyncio.Future()
    except KeyboardInterrupt:
        print('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...')
    finally:
        await runner.cleanup()

if __name__ == '__main__':
    asyncio.run(main())
