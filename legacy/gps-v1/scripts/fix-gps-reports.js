import { db } from '../src/lib/db.ts';
import { gpsReport } from '../src/db/schema/index.ts';
import { eq } from 'drizzle-orm';

async function fixGpsReports() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
    const reports = await db
      .select()
      .from(gpsReport);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reports.length}`);

    for (const report of reports) {
      console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç: ${report.name} (${report.id})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ rawData
      if (!report.rawData || !Array.isArray(report.rawData) || report.rawData.length < 2) {
        console.log('‚ö†Ô∏è –ù–µ—Ç rawData, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
      const currentProcessedData = report.processedData;
      if (Array.isArray(currentProcessedData) && currentProcessedData.length > 0) {
        const firstRecord = currentProcessedData[0];
        const hasAllFields = firstRecord.name && firstRecord.Time && firstRecord.TD && 
                           firstRecord['Zone 3'] && firstRecord['Zone 4'] && firstRecord['Zone 5'] &&
                           firstRecord.Acc && firstRecord.Dec && firstRecord['Max Speed'] &&
                           firstRecord.HSR && firstRecord['HSR%'];
        
        if (hasAllFields) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }
      }

      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ rawData
      const fixedProcessedData = report.rawData.slice(1).map((row, index) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ "–°—Ä–µ–¥–Ω–µ–µ" –∏ "–°—É–º–º–∞"
        if (row[0] === '–°—Ä–µ–¥–Ω–µ–µ' || row[0] === '–°—É–º–º–∞') {
          return null;
        }

        return {
          name: row[0], // –ò–≥—Ä–æ–∫
          Time: row[1], // –í—Ä–µ–º—è
          TD: row[2], // –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
          'Zone 3': row[3], // –ó–æ–Ω–∞ 3
          'Zone 4': row[4], // –ó–æ–Ω–∞ 4
          'Zone 5': row[5], // –ó–æ–Ω–∞ 5
          Acc: row[6], // –£—Å–∫–æ—Ä–µ–Ω–∏—è
          Dec: row[7], // –¢–æ—Ä–º–æ–∂–µ–Ω–∏—è
          'Max Speed': row[8], // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
          HSR: row[9], // HSR
          'HSR%': row[10] // HSR %
        };
      }).filter(row => row !== null);

      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixedProcessedData.length}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db
        .update(gpsReport)
        .set({
          processedData: fixedProcessedData,
          updatedAt: new Date()
        })
        .where(eq(gpsReport.id, report.id));

      console.log('‚úÖ –û—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
  } finally {
    process.exit(0);
  }
}

fixGpsReports(); 