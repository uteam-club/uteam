const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function checkGpsData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º GPS –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ GPS –æ—Ç—á–µ—Ç—ã
    console.log('=== –í–°–ï GPS –û–¢–ß–ï–¢–´ ===');
    const allReports = await pool.query(`
      SELECT 
        id,
        name,
        "eventId",
        "eventType",
        "teamId",
        "profileId",
        "isProcessed",
        "createdAt",
        "updatedAt",
        "clubId",
        "uploadedById",
        CASE 
          WHEN "processedData" IS NOT NULL AND jsonb_typeof("processedData") = 'array' 
          THEN jsonb_array_length("processedData")::text
          ELSE 'not array'
        END as processed_data_length,
        CASE 
          WHEN "rawData" IS NOT NULL AND jsonb_typeof("rawData") = 'array' 
          THEN jsonb_array_length("rawData")::text
          ELSE 'not array'
        END as raw_data_length
      FROM "GpsReport"
      ORDER BY "createdAt" DESC
    `);

    console.log(`üìä –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: ${allReports.rows.length}`);
    allReports.rows.forEach((report, index) => {
      console.log(`${index + 1}. ${report.name} (${report.eventType}) - ${report.processed_data_length} –∑–∞–ø–∏—Å–µ–π`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ 22.07.2025
    console.log('\n=== –û–¢–ß–ï–¢–´ –ó–ê 22.07.2025 ===');
    const reportsForDate = await pool.query(`
      SELECT 
        id,
        name,
        "eventId",
        "eventType",
        "teamId",
        "profileId",
        "isProcessed",
        "createdAt",
        "updatedAt",
        "clubId",
        "uploadedById"
      FROM "GpsReport"
      WHERE DATE("createdAt") = '2025-07-22'
      ORDER BY "createdAt" DESC
    `);

    console.log(`üìÖ –û—Ç—á–µ—Ç–æ–≤ –∑–∞ 22.07.2025: ${reportsForDate.rows.length}`);
    reportsForDate.rows.forEach((report, index) => {
      console.log(`${index + 1}. ${report.name} (${report.eventType}) - ID —Å–æ–±—ã—Ç–∏—è: ${report.eventId}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n=== –û–¢–ß–ï–¢–´ –° –î–ê–ù–ù–´–ú–ò ===');
    const reportsWithData = await pool.query(`
      SELECT 
        id,
        name,
        "eventId",
        "eventType",
        "isProcessed",
        "processedData" IS NOT NULL as has_processed_data,
        "rawData" IS NOT NULL as has_raw_data,
        CASE 
          WHEN "processedData" IS NOT NULL AND jsonb_typeof("processedData") = 'array' 
          THEN jsonb_array_length("processedData")
          ELSE 0
        END as processed_data_count
      FROM "GpsReport"
      WHERE "processedData" IS NOT NULL OR "rawData" IS NOT NULL
      ORDER BY "createdAt" DESC
    `);

    console.log(`üìä –û—Ç—á–µ—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: ${reportsWithData.rows.length}`);
    reportsWithData.rows.forEach((report, index) => {
      console.log(`${index + 1}. ${report.name} - ${report.processed_data_count} –∑–∞–ø–∏—Å–µ–π`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ processedData
    if (reportsWithData.rows.length > 0) {
      console.log('\n=== –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• ===');
      const firstReport = reportsWithData.rows[0];
      const dataStructure = await pool.query(`
        SELECT 
          id,
          name,
          "processedData"->0 as first_row_sample
        FROM "GpsReport"
        WHERE id = $1
      `, [firstReport.id]);

      if (dataStructure.rows[0] && dataStructure.rows[0].first_row_sample) {
        console.log('üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(JSON.stringify(dataStructure.rows[0].first_row_sample, null, 2));
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –º–∞—Ç—á–∏ –∑–∞ 22.07.2025
    console.log('\n=== –°–û–ë–´–¢–ò–Ø –ó–ê 22.07.2025 ===');
    const eventsForDate = await pool.query(`
      SELECT 
        'training' as type,
        id,
        title,
        date,
        "teamId"
      FROM "Training"
      WHERE DATE(date) = '2025-07-22'
      UNION ALL
      SELECT 
        'match' as type,
        id,
        "opponentName" as title,
        date,
        "teamId"
      FROM "Match"
      WHERE DATE(date) = '2025-07-22'
      ORDER BY date
    `);

    console.log(`üìÖ –°–æ–±—ã—Ç–∏–π –∑–∞ 22.07.2025: ${eventsForDate.rows.length}`);
    eventsForDate.rows.forEach((event, index) => {
      console.log(`${index + 1}. ${event.type.toUpperCase()}: ${event.title} (ID: ${event.id})`);
    });

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –æ—Ç—á–µ—Ç–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
    console.log('\n=== –°–í–Ø–ó–¨ –û–¢–ß–ï–¢–û–í –ò –°–û–ë–´–¢–ò–ô ===');
    const reportEventLinks = await pool.query(`
      SELECT 
        r.id as report_id,
        r.name as report_name,
        r."eventId",
        r."eventType",
        CASE 
          WHEN r."eventType" = 'TRAINING' THEN t.title
          WHEN r."eventType" = 'MATCH' THEN m."opponentName"
          ELSE 'Unknown'
        END as event_name,
        CASE 
          WHEN r."eventType" = 'TRAINING' THEN t.date
          WHEN r."eventType" = 'MATCH' THEN m.date
          ELSE NULL
        END as event_date
      FROM "GpsReport" r
      LEFT JOIN "Training" t ON r."eventId" = t.id AND r."eventType" = 'TRAINING'
      LEFT JOIN "Match" m ON r."eventId" = m.id AND r."eventType" = 'MATCH'
      ORDER BY r."createdAt" DESC
    `);

    console.log(`üîó –°–≤—è–∑–µ–π –æ—Ç—á–µ—Ç-—Å–æ–±—ã—Ç–∏–µ: ${reportEventLinks.rows.length}`);
    reportEventLinks.rows.forEach((link, index) => {
      console.log(`${index + 1}. ${link.report_name} -> ${link.event_name} (${link.event_date})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await pool.end();
  }
}

checkGpsData(); 