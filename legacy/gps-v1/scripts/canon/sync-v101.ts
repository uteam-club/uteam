#!/usr/bin/env tsx
// scripts/canon/sync-v101.ts

import fs from 'fs';
import path from 'path';

// –¢–∏–ø—ã
type CanonMetric = {
  key: string;
  nameRu: string;
  dimension: string;
  unit: string;
};

type RegistryMetric = {
  key: string;
  labels?: { ru?: string; en?: string };
  unit?: string;
  dimension?: string;
  [key: string]: any; // –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
};

type SyncPlan = {
  missing: CanonMetric[];
  mismatch: Array<{
    key: string;
    expected: CanonMetric;
    actual: RegistryMetric;
    changes: string[];
  }>;
  extra: Array<{
    key: string;
    nameRu: string;
    dimension: string;
    unit: string;
  }>;
  deprecated: Array<{
    key: string;
    reason: string;
  }>;
};

// –≠—Ç–∞–ª–æ–Ω v1.0.1
const EXPECTED: CanonMetric[] = [
  { key: "athlete_name", nameRu: "–ò–º—è –∏–≥—Ä–æ–∫–∞", dimension: "text", unit: "text" },
  { key: "position", nameRu: "–ü–æ–∑–∏—Ü–∏—è", dimension: "text", unit: "text" },
  { key: "player_external_id", nameRu: "–í–Ω–µ—à–Ω–∏–π ID –∏–≥—Ä–æ–∫–∞", dimension: "text", unit: "text" },
  { key: "gps_system", nameRu: "GPS —Å–∏—Å—Ç–µ–º–∞", dimension: "text", unit: "text" },

  { key: "total_distance_m", nameRu: "–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)", dimension: "distance", unit: "m" },
  { key: "distance_per_min_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–∞ –º–∏–Ω—É—Ç—É (–º/–º–∏–Ω)", dimension: "speed", unit: "m/min" },
  { key: "hsr_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è HSR (–º)", dimension: "distance", unit: "m" },
  { key: "very_high_speed_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è VHSR (–º)", dimension: "distance", unit: "m" },
  { key: "hard_running_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è HR (–º)", dimension: "distance", unit: "m" },

  { key: "duration_s", nameRu: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "minutes_played", nameRu: "–í—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ (–º–∏–Ω)", dimension: "time", unit: "min" },
  { key: "work_time_s", nameRu: "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "standing_time_s", nameRu: "–í—Ä–µ–º—è —Å—Ç–æ—è (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "walking_time_s", nameRu: "–í—Ä–µ–º—è —Ö–æ–¥—å–±—ã (—Å–µ–∫)", dimension: "time", unit: "s" },

  { key: "average_speed_ms", nameRu: "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", dimension: "speed", unit: "m/s" },
  { key: "max_speed_ms", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", dimension: "speed", unit: "m/s" },
  { key: "max_speed_kmh", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", dimension: "speed", unit: "km/h" },
  { key: "sprint_max_speed_ms", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —Å–ø—Ä–∏–Ω—Ç–µ (–º/—Å)", dimension: "speed", unit: "m/s" },

  { key: "number_of_sprints_count", nameRu: "–ö–æ–ª-–≤–æ —Å–ø—Ä–∏–Ω—Ç–æ–≤", dimension: "count", unit: "count" },
  { key: "flying_sprints_count", nameRu: "–ö–æ–ª-–≤–æ ¬´–ª–µ—Ç—è—â–∏—Ö¬ª —Å–ø—Ä–∏–Ω—Ç–æ–≤", dimension: "count", unit: "count" },

  { key: "accelerations_count", nameRu: "–ö–æ–ª-–≤–æ —É—Å–∫–æ—Ä–µ–Ω–∏–π", dimension: "count", unit: "count" },
  { key: "accelerations_high_count", nameRu: "–ö–æ–ª-–≤–æ —É—Å–∫–æ—Ä–µ–Ω–∏–π (–≤—ã—Å–æ–∫–∏–µ)", dimension: "count", unit: "count" },
  { key: "decelerations_count", nameRu: "–ö–æ–ª-–≤–æ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–π", dimension: "count", unit: "count" },
  { key: "decelerations_high_count", nameRu: "–ö–æ–ª-–≤–æ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–π (–≤—ã—Å–æ–∫–∏–µ)", dimension: "count", unit: "count" },

  { key: "meters_per_acceleration_m", nameRu: "–ú–µ—Ç—Ä–æ–≤ –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º)", dimension: "distance", unit: "m" },
  { key: "meters_per_deceleration_m", nameRu: "–ú–µ—Ç—Ä–æ–≤ –Ω–∞ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ (–º)", dimension: "distance", unit: "m" },

  { key: "hsr_ratio", nameRu: "HSR % –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "sprint_ratio", nameRu: "–î–æ–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "very_high_speed_ratio", nameRu: "VHSR % –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "work_ratio", nameRu: "–†–∞–±–æ—á–∞—è –¥–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏", dimension: "ratio", unit: "ratio" },

  { key: "heart_rate_avg_bpm", nameRu: "–ü—É–ª—å—Å —Å—Ä–µ–¥–Ω–∏–π (—É–¥/–º–∏–Ω)", dimension: "bpm", unit: "bpm" },
  { key: "heart_rate_max_bpm", nameRu: "–ü—É–ª—å—Å –º–∞–∫—Å–∏–º—É–º (—É–¥/–º–∏–Ω)", dimension: "bpm", unit: "bpm" },
  { key: "heart_rate_time_in_zone_1_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 1 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_2_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 2 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_3_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 3 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_4_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 4 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_5_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 5 (—Å–µ–∫)", dimension: "time", unit: "s" },

  { key: "steps_total_count", nameRu: "–ö–æ–ª-–≤–æ —à–∞–≥–æ–≤ –≤—Å–µ–≥–æ", dimension: "count", unit: "count" },
  { key: "left_foot_contacts_count", nameRu: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ª–µ–≤–æ–π", dimension: "count", unit: "count" },
  { key: "right_foot_contacts_count", nameRu: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∞–≤–æ–π", dimension: "count", unit: "count" },

  { key: "total_load_au", nameRu: "–û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "neuromuscular_load_au", nameRu: "–ù–µ–π—Ä–æ–º—ã—à–µ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "accumulated_load_au", nameRu: "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "session_rpe_au", nameRu: "sRPE (AU)", dimension: "au", unit: "au" },

  { key: "aee_kcal", nameRu: "–ê–∫—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞ (–∫–∫–∞–ª)", dimension: "energy", unit: "kcal" },
  { key: "body_mass_kg", nameRu: "–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ (–∫–≥)", dimension: "mass", unit: "kg" },

  { key: "distance_zone_0_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 0 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_1_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 1 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_2_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 2 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_3_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 3 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_4_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 4 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_5_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 5 (–º)", dimension: "distance", unit: "m" },

  { key: "x_pos_m", nameRu: "X –ø–æ–∑–∏—Ü–∏—è (–º)", dimension: "distance", unit: "m" },
  { key: "y_pos_m", nameRu: "Y –ø–æ–∑–∏—Ü–∏—è (–º)", dimension: "distance", unit: "m" },

  { key: "uptime_s", nameRu: "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞ (—Å–µ–∫)", dimension: "time", unit: "s" }
] satisfies Array<{key:string;nameRu:string;dimension:string;unit:string}>;

async function syncCanonRegistry() {
  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ —Å v1.0.1...\n');

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  const apply = process.argv.includes('--apply=true');
  console.log(`üìã –†–µ–∂–∏–º: ${apply ? '–ü–†–ò–ú–ï–ù–ï–ù–ò–ï' : 'DRY-RUN'}`);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–µ—Å—Ç—Ä
    const registryPath = path.resolve('src/canon/metrics.registry.json');
    const registryContent = fs.readFileSync(registryPath, 'utf8');
    const registry = JSON.parse(registryContent);

    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–µ—Å—Ç—Ä –∏–∑:', registryPath);
    console.log('üìä –ú–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ:', registry.metrics?.length || 0);
    console.log('üìä –û–∂–∏–¥–∞–µ—Ç—Å—è –º–µ—Ç—Ä–∏–∫:', EXPECTED.length);

    // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã
    const expectedByKey = new Map(EXPECTED.map(item => [item.key, item]));
    const actualByKey = new Map((registry.metrics || []).map((item: RegistryMetric) => [item.key, item]));

    // –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const plan: SyncPlan = {
      missing: [],
      mismatch: [],
      extra: [],
      deprecated: []
    };

    // 1. MISSING - –∫–ª—é—á–∏ –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    for (const expected of EXPECTED) {
      if (!actualByKey.has(expected.key)) {
        plan.missing.push(expected);
      }
    }

    // 2. MISMATCH - –∫–ª—é—á–∏ –µ—Å—Ç—å, –Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ–ª—è
    for (const expected of EXPECTED) {
      const actual = actualByKey.get(expected.key);
      if (actual) {
        const changes: string[] = [];
        
        if (actual.labels?.ru !== expected.nameRu) {
          changes.push(`labels.ru: "${actual.labels?.ru || ''}" ‚Üí "${expected.nameRu}"`);
        }
        if (actual.dimension !== expected.dimension) {
          changes.push(`dimension: "${actual.dimension || ''}" ‚Üí "${expected.dimension}"`);
        }
        if (actual.unit !== expected.unit) {
          changes.push(`unit: "${actual.unit || ''}" ‚Üí "${expected.unit}"`);
        }

        if (changes.length > 0) {
          plan.mismatch.push({
            key: expected.key,
            expected,
            actual,
            changes
          });
        }
      }
    }

    // 3. EXTRA - –∫–ª—é—á–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —ç—Ç–∞–ª–æ–Ω–µ
    for (const [key, actual] of actualByKey) {
      if (!expectedByKey.has(key)) {
        plan.extra.push({
          key,
          nameRu: actual.labels?.ru || '',
          dimension: actual.dimension || '',
          unit: actual.unit || ''
        });
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    console.log('\n=== SYNC PLAN SUMMARY ===');
    console.log(`‚ûï MISSING: ${plan.missing.length}`);
    console.log(`üîÑ MISMATCH: ${plan.mismatch.length}`);
    console.log(`‚ûï EXTRA: ${plan.extra.length}`);
    console.log(`‚ö†Ô∏è  DEPRECATED: ${plan.extra.length}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    const planPath = path.resolve('artifacts/canon-sync/PLAN.json');
    fs.writeFileSync(planPath, JSON.stringify(plan, null, 2), 'utf8');
    console.log(`\nüìÑ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${planPath}`);

    // –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
    await createReport(plan);

    if (apply) {
      console.log('\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
      await applyChanges(registry, plan, registryPath);
    } else {
      console.log('\nüí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run canon:sync:apply');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }

  console.log('\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}

async function createReport(plan: SyncPlan) {
  const lines: string[] = [];
  
  lines.push('# Canon Registry Sync Report v1.0.1');
  lines.push('');
  lines.push(`**–î–∞—Ç–∞:** ${new Date().toISOString()}`);
  lines.push('');
  lines.push('## –°–≤–æ–¥–∫–∞');
  lines.push(`- **MISSING:** ${plan.missing.length} –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`);
  lines.push(`- **MISMATCH:** ${plan.mismatch.length} –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
  lines.push(`- **EXTRA:** ${plan.extra.length} –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ deprecated`);
  lines.push('');

  // MISSING —Å–µ–∫—Ü–∏—è
  if (plan.missing.length > 0) {
    lines.push('## ‚ûï MISSING (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã)');
    lines.push('');
    lines.push('| Key | Name (RU) | Dimension | Unit |');
    lines.push('|-----|-----------|-----------|------|');
    plan.missing.forEach(item => {
      lines.push(`| ${item.key} | ${item.nameRu} | ${item.dimension} | ${item.unit} |`);
    });
    lines.push('');
  }

  // MISMATCH —Å–µ–∫—Ü–∏—è
  if (plan.mismatch.length > 0) {
    lines.push('## üîÑ MISMATCH (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã)');
    lines.push('');
    lines.push('| Key | –ò–∑–º–µ–Ω–µ–Ω–∏—è |');
    lines.push('|-----|-----------|');
    plan.mismatch.forEach(item => {
      lines.push(`| ${item.key} | ${item.changes.join(', ')} |`);
    });
    lines.push('');
  }

  // EXTRA —Å–µ–∫—Ü–∏—è
  if (plan.extra.length > 0) {
    lines.push('## ‚ö†Ô∏è  EXTRA (–±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã deprecated)');
    lines.push('');
    lines.push('| Key | Name (RU) | Dimension | Unit |');
    lines.push('|-----|-----------|-----------|------|');
    plan.extra.forEach(item => {
      lines.push(`| ${item.key} | ${item.nameRu} | ${item.dimension} | ${item.unit} |`);
    });
    lines.push('');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const reportPath = path.resolve('artifacts/canon-sync/REPORT.md');
  fs.writeFileSync(reportPath, lines.join('\n'), 'utf8');
  console.log(`üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
}

async function applyChanges(registry: any, plan: SyncPlan, registryPath: string) {
  // –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø
  const backupPath = path.resolve('artifacts/canon-sync/backup.metrics.registry.json');
  fs.writeFileSync(backupPath, JSON.stringify(registry, null, 2), 'utf8');
  console.log(`üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);

  // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const updatedRegistry = JSON.parse(JSON.stringify(registry));
  const metrics = updatedRegistry.metrics || [];

  // 1. –î–æ–±–∞–≤–ª—è–µ–º MISSING –º–µ—Ç—Ä–∏–∫–∏
  for (const missing of plan.missing) {
    const newMetric: RegistryMetric = {
      key: missing.key,
      labels: { ru: missing.nameRu, en: '' },
      unit: missing.unit,
      dimension: missing.dimension,
      description: '',
      agg: 'sum',
      scaling: 'none',
      category: 'metric',
      isDerived: false
    };
    metrics.push(newMetric);
    console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞: ${missing.key}`);
  }

  // 2. –û–±–Ω–æ–≤–ª—è–µ–º MISMATCH –º–µ—Ç—Ä–∏–∫–∏
  for (const mismatch of plan.mismatch) {
    const metric = metrics.find((m: RegistryMetric) => m.key === mismatch.key);
    if (metric) {
      if (!metric.labels) metric.labels = {};
      metric.labels.ru = mismatch.expected.nameRu;
      metric.dimension = mismatch.expected.dimension;
      metric.unit = mismatch.expected.unit;
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${mismatch.key}`);
    }
  }

  // 3. –ü–æ–º–µ—á–∞–µ–º EXTRA –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ deprecated
  for (const extra of plan.extra) {
    const metric = metrics.find((m: RegistryMetric) => m.key === extra.key);
    if (metric) {
      metric.deprecated = true;
      metric.deprecatedReason = "Not in canon v1.0.1";
      console.log(`‚ö†Ô∏è  Deprecated: ${extra.key}`);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ key
  metrics.sort((a: RegistryMetric, b: RegistryMetric) => a.key.localeCompare(b.key));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
  updatedRegistry.metrics = metrics;
  fs.writeFileSync(registryPath, JSON.stringify(updatedRegistry, null, 2), 'utf8');
  console.log(`üíæ –†–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: ${registryPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
syncCanonRegistry();
