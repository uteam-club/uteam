#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GPS –∑–∞–≥—Ä—É–∑–∫–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç self-test –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ debug —Ñ–∞–π–ª–∞
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GPS –∑–∞–≥—Ä—É–∑–∫–∏...\n');

try {
  // –ó–∞–ø—É—Å–∫–∞–µ–º self-test
  console.log('1. –ó–∞–ø—É—Å–∫ self-test...');
  execSync('npm run gps:selftest', { stdio: 'inherit' });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ debug —Ñ–∞–π–ª–∞
  const debugPath = path.join(process.cwd(), 'artifacts', 'last-upload-debug.json');
  console.log(`\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ debug —Ñ–∞–π–ª–∞: ${debugPath}`);
  
  if (!fs.existsSync(debugPath)) {
    console.error('‚ùå Debug —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
  
  // –ß–∏—Ç–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º debug —Ñ–∞–π–ª
  const debugData = JSON.parse(fs.readFileSync(debugPath, 'utf8'));
  console.log('‚úÖ Debug —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
  
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ debug –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`   Timestamp: ${debugData.timestamp}`);
  console.log(`   Event ID: ${debugData.meta.eventId}`);
  console.log(`   Profile ID: ${debugData.meta.profileId}`);
  console.log(`   File: ${debugData.meta.fileName}`);
  
  const { debug } = debugData;
  
  console.log('\nüîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:');
  console.log(`   Strategy: ${debug.normalize.strategy}`);
  console.log(`   Headers: ${debug.normalize.headers?.length || 0}`);
  console.log(`   Rows: ${debug.normalize.rows}`);
  console.log(`   Sample keys: ${debug.normalize.sampleRowKeys?.join(', ') || 'none'}`);
  
  console.log('\nüìã –°–Ω–∞–ø—à–æ—Ç:');
  console.log(`   Visible columns: ${debug.snapshot.visibleCount}`);
  console.log(`   Total columns: ${debug.snapshot.totalCount}`);
  console.log(`   Expected headers: ${debug.snapshot.columns.map(c => c.sourceHeader).join(', ')}`);
  
  console.log('\nüó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥:');
  console.log(`   Canon rows: ${debug.mapping.canonRows}`);
  console.log(`   Missing headers: ${debug.mapping.missingHeaders.length}`);
  
  if (debug.mapping.missingHeaders.length > 0) {
    console.log('   Missing:');
    debug.mapping.missingHeaders.forEach(m => {
      console.log(`     - ${m.canonicalKey}: ${m.missing}`);
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  const issues = [];
  
  if (debug.mapping.canonRows === 0) {
    issues.push('‚ùå canonRows = 0');
  }
  
  if (debug.normalize.strategy === 'unknown') {
    issues.push('‚ùå Unknown normalization strategy');
  }
  
  if (debug.mapping.missingHeaders.length > 0) {
    issues.push(`‚ö†Ô∏è  Missing ${debug.mapping.missingHeaders.length} headers`);
  }
  
  if (issues.length === 0) {
    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
    issues.forEach(issue => console.log(`   ${issue}`));
  }
  
  console.log(`\nüìÑ –ü–æ–ª–Ω—ã–π debug —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${debugPath}`);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  process.exit(1);
}
