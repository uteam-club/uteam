#!/usr/bin/env tsx
// scripts/gps/backfill-sanitize-report.ts

import { config } from 'dotenv';
import { Client } from 'pg';
import { validateAthleteNameColumn } from '../../src/services/gps/validators/nameColumn.validator';
import { sanitizeRowsWithWarnings } from '../../src/services/gps/sanitizers/rowSanitizer';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

interface GpsReport {
  id: string;
  name: string;
  rawData: any[][];
  processedData: {
    canonical: {
      rows: Record<string, any>[];
      summary: Record<string, any>;
    };
    profile: {
      columns: Array<{
        sourceHeader: string;
        canonicalKey: string;
        displayName: string;
        isVisible: boolean;
      }>;
    };
  };
  importMeta: {
    warnings?: any[];
    suggestions?: any;
  };
}

async function sanitizeReport(reportId: string, dryRun: boolean = false): Promise<void> {
  console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á—ë—Ç ${reportId}...`);
  
  const result = await client.query(`
    SELECT id, name, "rawData", "processedData", "importMeta"
    FROM public."GpsReport"
    WHERE id = $1
  `, [reportId]);
  
  if (result.rows.length === 0) {
    console.error(`‚ùå –û—Ç—á—ë—Ç ${reportId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  const report: GpsReport = result.rows[0];
  console.log(`üìä –û—Ç—á—ë—Ç: ${report.name}`);
  console.log(`üìà –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${report.processedData.canonical.rows.length}`);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–∫–∏ –∏–º—ë–Ω
  console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–∫–∏ –∏–º—ë–Ω...`);
  const nameColumn = report.processedData.profile.columns.find(col => col.canonicalKey === 'athlete_name');
  let nameValidation = { warnings: [], suggestions: {} };
  
  if (nameColumn && report.rawData.length > 0) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ rawData
    const headers = report.rawData[0] || [];
    const nameValues = report.rawData
      .slice(1, 51) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
      .map(row => {
        const nameIndex = headers.findIndex((h: string) => h === nameColumn.sourceHeader);
        return nameIndex >= 0 ? String(row[nameIndex] || '') : '';
      });
    
    nameValidation = validateAthleteNameColumn(nameValues, headers, nameColumn.sourceHeader);
    
    if (nameValidation.warnings.length > 0) {
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–æ–Ω–∫–æ–π –∏–º—ë–Ω:`);
      nameValidation.warnings.forEach((warning: any) => {
        console.log(`   - ${warning.message}`);
      });
    }
    
    if (nameValidation.suggestions.athleteNameHeader) {
      console.log(`üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É "${nameValidation.suggestions.athleteNameHeader}" –¥–ª—è –∏–º—ë–Ω –∏–≥—Ä–æ–∫–æ–≤`);
    }
  }
  
  // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
  console.log(`üßπ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫...`);
  const metricKeys = report.processedData.profile.columns
    .filter(col => col.canonicalKey !== 'athlete_name' && col.isVisible)
    .map(col => col.canonicalKey);
  
  const sanitizationResult = sanitizeRowsWithWarnings(
    report.processedData.canonical.rows,
    metricKeys,
    report.importMeta || {}
  );
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏:`);
  console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${report.processedData.canonical.rows.length}`);
  console.log(`   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${sanitizationResult.updatedImportMeta.warnings.reduce((sum: number, w: any) => sum + (w.count || 0), 0)}`);
  console.log(`   - –û—Å—Ç–∞–ª–æ—Å—å: ${sanitizationResult.sanitizedRows.length}`);
  
  if (sanitizationResult.updatedImportMeta.warnings.length > 0) {
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:`);
    sanitizationResult.updatedImportMeta.warnings.forEach((warning: any) => {
      console.log(`   - ${warning.message}`);
    });
  }
  
  if (dryRun) {
    console.log(`üîç DRY RUN: –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã`);
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
  console.log(`üíæ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç...`);
  
  const updatedProcessedData = {
    ...report.processedData,
    canonical: {
      ...report.processedData.canonical,
      rows: sanitizationResult.sanitizedRows
    }
  };
  
  const updatedImportMeta = {
    ...report.importMeta,
    warnings: [
      ...(report.importMeta?.warnings || []),
      ...nameValidation.warnings,
      ...sanitizationResult.updatedImportMeta.warnings
    ],
    suggestions: {
      ...(report.importMeta?.suggestions || {}),
      ...nameValidation.suggestions
    }
  };
  
  await client.query(`
    UPDATE public."GpsReport"
    SET "processedData" = $1, "importMeta" = $2, "updatedAt" = NOW()
    WHERE id = $3
  `, [updatedProcessedData, updatedImportMeta, reportId]);
  
  console.log(`‚úÖ –û—Ç—á—ë—Ç ${reportId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω`);
}

async function main() {
  const args = process.argv.slice(2);
  const reportId = args[0] || process.env.REPORT_ID;
  const dryRun = args.includes('--dry') || process.env.DRY_RUN === 'true';
  
  if (!reportId) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞:');
    console.error('   tsx scripts/gps/backfill-sanitize-report.ts <REPORT_ID> [--dry]');
    console.error('   –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPORT_ID');
    process.exit(1);
  }
  
  try {
    await client.connect();
    console.log(`üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    
    await sanitizeReport(reportId, dryRun);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await client.end();
    console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º main
main();
