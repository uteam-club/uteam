#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
 * –°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å
 */

const fs = require('fs');
const path = require('path');
const FormData = require('form-data');
const fetch = require('node-fetch');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API...\n');

async function testDebugUpload() {
  try {
    // 1. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const testCsv = `–ò–≥—Ä–æ–∫,–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è,–î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–±—â–∞—è –º,–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –∫–º/—á
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,01:20:00,8200,32.4
–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤,00:45:00,5100,28.7`;
    
    const testFile = path.join(process.cwd(), 'artifacts', 'test-gps-debug.csv');
    fs.writeFileSync(testFile, testCsv);
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω: ${testFile}`);
    
    // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FormData
    console.log('\n2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData...');
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testFile));
    
    const meta = {
      eventId: 'test-event-id',
      teamId: 'test-team-id', 
      gpsSystem: 'B-SIGHT',
      profileId: 'test-profile-id',
      fileName: 'test-gps-debug.csv',
      eventType: 'TRAINING',
      playerMappings: []
    };
    
    formData.append('meta', JSON.stringify(meta));
    console.log('   ‚úÖ FormData –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
    console.log('\n3. –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞...');
    const response = await fetch('http://localhost:3000/api/gps-reports', {
      method: 'POST',
      body: formData
    });
    
    console.log(`   Status: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log('   ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º debug —Ñ–∞–π–ª
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ debug —Ñ–∞–π–ª–∞...');
    const debugPath = path.join(process.cwd(), 'artifacts', 'last-upload-debug.json');
    
    if (!fs.existsSync(debugPath)) {
      console.log('   ‚ùå Debug —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    const debugData = JSON.parse(fs.readFileSync(debugPath, 'utf8'));
    console.log('   ‚úÖ Debug —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
    
    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º debug –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ debug –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   Timestamp: ${debugData.timestamp}`);
    console.log(`   Event ID: ${debugData.meta.eventId}`);
    console.log(`   Profile ID: ${debugData.meta.profileId}`);
    console.log(`   File: ${debugData.meta.fileName}`);
    
    const { debug } = debugData;
    
    console.log('\nüîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:');
    console.log(`   Strategy: ${debug.normalize.strategy}`);
    console.log(`   Headers: ${debug.normalize.headers?.length || 0}`);
    console.log(`   Rows: ${debug.normalize.rows}`);
    console.log(`   Sample keys: ${debug.normalize.sampleRowKeys?.join(', ') || 'none'}`);
    
    console.log('\nüìã –°–Ω–∞–ø—à–æ—Ç:');
    console.log(`   Visible columns: ${debug.snapshot.visibleCount}`);
    console.log(`   Total columns: ${debug.snapshot.totalCount}`);
    console.log(`   Expected headers: ${debug.snapshot.columns.map(c => c.sourceHeader).join(', ')}`);
    
    console.log('\nüó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥:');
    console.log(`   Canon rows: ${debug.mapping.canonRows}`);
    console.log(`   Missing headers: ${debug.mapping.missingHeaders.length}`);
    
    if (debug.mapping.missingHeaders.length > 0) {
      console.log('   Missing:');
      debug.mapping.missingHeaders.forEach(m => {
        console.log(`     - ${m.canonicalKey}: ${m.missing}`);
      });
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const issues = [];
    
    if (debug.mapping.canonRows === 0) {
      issues.push('‚ùå canonRows = 0');
    }
    
    if (debug.normalize.strategy === 'unknown') {
      issues.push('‚ùå Unknown normalization strategy');
    }
    
    if (debug.mapping.missingHeaders.length > 0) {
      issues.push(`‚ö†Ô∏è  Missing ${debug.mapping.missingHeaders.length} headers`);
    }
    
    if (issues.length === 0) {
      console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach(issue => console.log(`   ${issue}`));
    }
    
    console.log(`\nüìÑ –ü–æ–ª–Ω—ã–π debug —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${debugPath}`);
    
    // 7. –û—á–∏—Å—Ç–∫–∞
    fs.unlinkSync(testFile);
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3000/api/test');
    return response.ok;
  } catch {
    return false;
  }
}

async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  const serverRunning = await checkServer();
  
  if (!serverRunning) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
    console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    process.exit(1);
  }
  
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  await testDebugUpload();
}

main();
