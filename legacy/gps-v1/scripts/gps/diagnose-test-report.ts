#!/usr/bin/env tsx
// scripts/gps/diagnose-test-report.ts

import { config } from 'dotenv';
import { Client } from 'pg';
import fs from 'fs';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function diagnoseTestReport() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –æ—Ç—á—ë—Ç–µ Test...\n');
  
  const lines: string[] = [];
  lines.push('# GPS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: Test Report Issues');
  lines.push('');
  lines.push(`**–î–∞—Ç–∞:** ${new Date().toISOString()}`);
  lines.push('');

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç
    const reportResult = await client.query(`
      SELECT id, "fileName", "processedData", "rawData"
      FROM public."GpsReport"
      ORDER BY "createdAt" DESC
      LIMIT 1
    `);

    if (reportResult.rows.length === 0) {
      lines.push('## ‚ùå GPS –æ—Ç—á—ë—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const report = reportResult.rows[0];
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç: ${report.fileName}`);

    lines.push('## 1. –ê–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–∞');
    lines.push(`- **ID:** ${report.id}`);
    lines.push(`- **File:** ${report.fileName}`);
    lines.push('');

    // –ê–Ω–∞–ª–∏–∑ raw –¥–∞–Ω–Ω—ã—Ö
    if (report.rawData && report.rawData.length > 0) {
      const headers = report.rawData[0] || [];
      lines.push('### Raw Headers:');
      lines.push('```');
      lines.push(headers.join(', '));
      lines.push('```');
      lines.push('');

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      lines.push('### –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ Raw –¥–∞–Ω–Ω—ã—Ö:');
      lines.push('```');
      report.rawData.slice(0, 10).forEach((row: any[], index: number) => {
        lines.push(`${index + 1}: ${row.join(', ')}`);
      });
      lines.push('```');
      lines.push('');
    }

    // –ê–Ω–∞–ª–∏–∑ canonical –¥–∞–Ω–Ω—ã—Ö
    if (report.processedData?.canonical?.rows) {
      const rows = report.processedData.canonical.rows;
      lines.push('## 2. –ê–Ω–∞–ª–∏–∑ Canonical –¥–∞–Ω–Ω—ã—Ö');
      lines.push(`- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:** ${rows.length}`);
      lines.push('');

      // 1. –ü—Ä–æ–±–ª–µ–º–∞ —Å athlete_name - –ø–æ–∑–∏—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∏–º—ë–Ω
      const athleteNames = rows.map((row: any) => row.athlete_name).filter(Boolean);
      const positionCodes = ['MF', 'W', 'S', 'CB', 'GK', 'ST', 'CM', 'DM', 'AM', 'RM', 'LM', 'RW', 'LW', 'CF', 'SS'];
      const positionCount = athleteNames.filter(name => positionCodes.includes(name)).length;
      const nameCount = athleteNames.filter(name => !positionCodes.includes(name) && name.length > 3).length;

      lines.push('### ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∑–∏—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∏–º—ë–Ω');
      lines.push(`- **–ü–æ–∑–∏—Ü–∏–∏ (MF, W, S, etc.):** ${positionCount} –∏–∑ ${athleteNames.length}`);
      lines.push(`- **–ò–º–µ–Ω–∞:** ${nameCount} –∏–∑ ${athleteNames.length}`);
      lines.push(`- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–π:** ${Math.round((positionCount / athleteNames.length) * 100)}%`);
      lines.push('');

      // 2. –ê–Ω–∞–ª–∏–∑ displayUnit
      lines.push('### –ê–Ω–∞–ª–∏–∑ Display Units:');
      const speedKeys = Object.keys(rows[0] || {}).filter(key => key.includes('speed'));
      const ratioKeys = Object.keys(rows[0] || {}).filter(key => key.includes('ratio'));
      
      lines.push(`- **Speed keys:** ${speedKeys.join(', ')}`);
      lines.push(`- **Ratio keys:** ${ratioKeys.join(', ')}`);
      lines.push('');

      // 3. –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      const problematicRows = rows.filter((row: any) => {
        const name = row.athlete_name;
        return !name || 
               name === '' || 
               name === 'n/a' || 
               name === '-' || 
               positionCodes.includes(name) ||
               name.toLowerCase().includes('–∏—Ç–æ–≥') ||
               name.toLowerCase().includes('total') ||
               name.toLowerCase().includes('summary');
      });

      lines.push('### –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:');
      lines.push(`- **–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö:** ${problematicRows.length} –∏–∑ ${rows.length}`);
      lines.push('');

      if (problematicRows.length > 0) {
        lines.push('#### –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–æ–∫:');
        lines.push('```json');
        lines.push(JSON.stringify(problematicRows.slice(0, 10), null, 2));
        lines.push('```');
        lines.push('');
      }

      // 4. –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π HSR –∏ Max Speed
      lines.push('### –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π:');
      const firstRow = rows[0];
      if (firstRow) {
        lines.push('#### –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:');
        lines.push(`- **athlete_name:** ${firstRow.athlete_name}`);
        lines.push(`- **hsr_ratio:** ${firstRow.hsr_ratio} (${firstRow.hsr_ratio > 1 ? '‚ùå –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –∞ –Ω–µ ratio' : '‚úÖ –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ ratio'})`);
        lines.push(`- **max_speed_kmh:** ${firstRow.max_speed_kmh} (${firstRow.max_speed_kmh > 50 ? '‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å' : '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å'})`);
        lines.push(`- **minutes_played:** ${firstRow.minutes_played}`);
        lines.push(`- **total_distance_m:** ${firstRow.total_distance_m}`);
        lines.push('');
      }

      // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      lines.push('## 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
      lines.push('');
      
      if (positionCount > nameCount) {
        lines.push('### üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ athlete_name:');
        lines.push('- **–ü—Ä–æ–±–ª–µ–º–∞:** –í –∫–æ–ª–æ–Ω–∫—É –∏–º—ë–Ω –ø–æ–ø–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤');
        lines.push('- **–†–µ—à–µ–Ω–∏–µ:** –ò–∑–º–µ–Ω–∏—Ç—å sourceHeader –¥–ª—è athlete_name —Å "–ò–≥—Ä–æ–∫" –Ω–∞ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–∞–º–∏');
        lines.push('- **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π sourceHeader:** –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ raw –¥–∞–Ω–Ω—ã—Ö (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞)');
        lines.push('');
      }

      if (firstRow?.hsr_ratio > 1) {
        lines.push('### üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HSR –∑–Ω–∞—á–µ–Ω–∏–π:');
        lines.push('- **–ü—Ä–æ–±–ª–µ–º–∞:** hsr_ratio —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã (80, 73, 76), –∞ –Ω–µ ratio (0.8, 0.73, 0.76)');
        lines.push('- **–†–µ—à–µ–Ω–∏–µ:** –î–æ–±–∞–≤–∏—Ç—å transform –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ % ‚Üí ratio (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100)');
        lines.push('');
      }

      if (firstRow?.max_speed_kmh > 50) {
        lines.push('### üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Max Speed –∑–Ω–∞—á–µ–Ω–∏–π:');
        lines.push('- **–ü—Ä–æ–±–ª–µ–º–∞:** max_speed_kmh —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è');
        lines.push('- **–†–µ—à–µ–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        lines.push('');
      }

      lines.push('### üßπ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:');
      lines.push(`- **–£–¥–∞–ª–∏—Ç—å:** ${problematicRows.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–æ–∫`);
      lines.push('- **–û—Å—Ç–∞–≤–∏—Ç—å:** —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤');
      lines.push('- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ~' + (rows.length - problematicRows.length) + ' —á–∏—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    lines.push('## ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ');
    lines.push(`\`\`\`\n${error}\n\`\`\``);
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const reportPath = path.resolve('artifacts/gps_diagnose_test_report.md');
  fs.writeFileSync(reportPath, lines.join('\n'), 'utf8');
  console.log(`\nüìÑ –û—Ç—á—ë—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseTestReport();
