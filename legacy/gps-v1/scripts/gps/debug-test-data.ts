#!/usr/bin/env tsx
// scripts/gps/debug-test-data.ts

import { config } from 'dotenv';
import { Client } from 'pg';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function debugTestData() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è "Test"...\n');

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileResult = await client.query(`
      SELECT id, name, "gpsSystem"
      FROM public."GpsProfile"
      WHERE name = 'Test'
      ORDER BY "createdAt" DESC
      LIMIT 1
    `);

    if (profileResult.rows.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å "Test" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const profile = profileResult.rows[0];
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.id})`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç
    const reportResult = await client.query(`
      SELECT id, "fileName", "processedData"
      FROM public."GpsReport"
      WHERE "profileId" = $1
      ORDER BY "createdAt" DESC
      LIMIT 1
    `, [profile.id]);

    if (reportResult.rows.length === 0) {
      console.log('‚ùå –û—Ç—á—ë—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const report = reportResult.rows[0];
    console.log(`‚úÖ –û—Ç—á—ë—Ç: ${report.fileName}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É processedData
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ processedData:');
    console.log('Keys:', Object.keys(report.processedData || {}));
    
    if (report.processedData?.rawData) {
      console.log('rawData length:', report.processedData.rawData.length);
      console.log('rawData[0]:', report.processedData.rawData[0]);
    } else {
      console.log('rawData: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    if (report.processedData?.headers) {
      console.log('headers:', report.processedData.headers);
    } else {
      console.log('headers: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    if (report.processedData?.profileSnapshot) {
      console.log('profileSnapshot keys:', Object.keys(report.processedData.profileSnapshot));
      if (report.processedData.profileSnapshot.columns) {
        console.log('profileSnapshot.columns length:', report.processedData.profileSnapshot.columns.length);
        console.log('profileSnapshot.columns[0]:', report.processedData.profileSnapshot.columns[0]);
      }
    } else {
      console.log('profileSnapshot: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º canonical –¥–∞–Ω–Ω—ã–µ
    if (report.processedData?.canonical) {
      console.log('\nüìä Canonical –¥–∞–Ω–Ω—ã–µ:');
      console.log('canonical keys:', Object.keys(report.processedData.canonical));
      if (report.processedData.canonical.rows) {
        console.log('canonical.rows length:', report.processedData.canonical.rows.length);
        console.log('canonical.rows[0]:', report.processedData.canonical.rows[0]);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugTestData();
