const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function diagnoseGpsReports() {
  console.log('üîç GPS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤\n');

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –∏–∑ GpsReport
    console.log('=== –®–ê–ì 1: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç—á—ë—Ç–∞ ===');
    const reportsQuery = `
      SELECT 
        id,
        name,
        "createdAt",
        "gpsSystem",
        "profileId",
        CASE 
          WHEN "profileSnapshot" IS NOT NULL THEN '–µ—Å—Ç—å'
          ELSE '–Ω–µ—Ç'
        END as profileSnapshot_exists,
        CASE 
          WHEN "profileSnapshot" IS NOT NULL AND "profileSnapshot"->'columns' IS NOT NULL 
          THEN jsonb_array_length("profileSnapshot"->'columns')::text
          ELSE '0'
        END as profileSnapshot_columns_length,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL THEN '–µ—Å—Ç—å'
          ELSE '–Ω–µ—Ç'
        END as canonical_exists,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length,
        "importMeta"
      FROM public."GpsReport"
      ORDER BY "createdAt" DESC
      LIMIT 3
    `;

    const reportsResult = await pool.query(reportsQuery);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${reportsResult.rows.length}\n`);
    
    let problematicReport = null;
    
    reportsResult.rows.forEach((report, index) => {
      console.log(`${index + 1}. –û—Ç—á—ë—Ç ID: ${report.id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${report.name}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${report.createdAt}`);
      console.log(`   GPS —Å–∏—Å—Ç–µ–º–∞: ${report.gpsSystem}`);
      console.log(`   Profile ID: ${report.profileId}`);
      console.log(`   ProfileSnapshot: ${report.profilesnapshot_exists} (${report.profilesnapshot_columns_length} –∫–æ–ª–æ–Ω–æ–∫)`);
      console.log(`   Canonical: ${report.canonical_exists} (${report.canonical_rows_length} —Å—Ç—Ä–æ–∫)`);
      
      if (report.importmeta) {
        const meta = typeof report.importmeta === 'string' ? JSON.parse(report.importmeta) : report.importmeta;
        if (meta.errors && meta.errors.length > 0) {
          console.log(`   –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: ${JSON.stringify(meta.errors)}`);
        }
        if (meta.warnings && meta.warnings.length > 0) {
          console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${JSON.stringify(meta.warnings)}`);
        }
      }
      console.log('');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç—á—ë—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–º
      if (report.canonical_exists === '–Ω–µ—Ç' && parseInt(report.profilesnapshot_columns_length) > 0) {
        problematicReport = report;
        console.log(`üö® –ù–ê–ô–î–ï–ù –ü–†–û–ë–õ–ï–ú–ù–´–ô –û–¢–ß–Å–¢: ${report.id}`);
      }
    });

    if (!problematicReport) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (canonical –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ profileSnapshot.columns.length > 0)');
      return;
    }

    console.log(`\n=== –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ${problematicReport.id} ===`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º –æ—Ç—á—ë—Ç–µ
    const detailedQuery = `
      SELECT 
        "profileSnapshot",
        "processedData",
        "rawData"
      FROM public."GpsReport"
      WHERE id = $1
    `;
    
    const detailedResult = await pool.query(detailedQuery, [problematicReport.id]);
    const reportData = detailedResult.rows[0];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º profileSnapshot
    if (reportData.profileSnapshot && reportData.profileSnapshot.columns) {
      console.log('üìã –ê–Ω–∞–ª–∏–∑ profileSnapshot.columns:');
      reportData.profileSnapshot.columns.forEach((col, index) => {
        console.log(`   ${index + 1}. ${col.canonicalKey} (sourceHeader: ${col.sourceHeader})`);
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º processedData
    if (reportData.processedData) {
      console.log('\nüìä –ê–Ω–∞–ª–∏–∑ processedData:');
      console.log(`   Canonical: ${reportData.processedData.canonical ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
      if (reportData.processedData.canonical && reportData.processedData.canonical.rows) {
        console.log(`   –°—Ç—Ä–æ–∫ canonical: ${reportData.processedData.canonical.rows.length}`);
      }
      if (reportData.processedData.profile && reportData.processedData.profile.headers) {
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${JSON.stringify(reportData.processedData.profile.headers)}`);
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º rawData
    if (reportData.rawData && reportData.rawData.length > 0) {
      console.log(`\nüìÑ –ê–Ω–∞–ª–∏–∑ rawData (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞):`);
      console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(reportData.rawData[0])}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    console.log(`\n=== –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è ${problematicReport.profileId} ===`);
    const profileQuery = `
      SELECT 
        id,
        name,
        "gpsSystem",
        "canonicalKeys"
      FROM public."GpsProfile"
      WHERE id = $1
    `;
    
    const profileResult = await pool.query(profileQuery, [problematicReport.profileId]);
    
    if (profileResult.rows.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    const profile = profileResult.rows[0];
    console.log(`üìã –ü—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.gpsSystem})`);
    console.log(`   CanonicalKeys: ${JSON.stringify(profile.canonicalKeys)}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    console.log('\n=== –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π ===');
    const fs = require('fs');
    const path = require('path');
    
    try {
      const registryPath = path.join(__dirname, '..', 'src', 'canon', 'metrics.registry.json');
      const registryContent = fs.readFileSync(registryPath, 'utf8');
      const registry = JSON.parse(registryContent);
      
      console.log('üìö –†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–ª—é—á–∏:');
      Object.keys(registry).forEach(key => {
        console.log(`   - ${key}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      const unknownKeys = [];
      if (profile.canonicalKeys) {
        profile.canonicalKeys.forEach(key => {
          if (!registry[key]) {
            unknownKeys.push(key);
          }
        });
      }
      
      if (unknownKeys.length > 0) {
        console.log(`\n‚ö†Ô∏è  UNKNOWN_CANON_KEYS: ${JSON.stringify(unknownKeys)}`);
      } else {
        console.log('\n‚úÖ –í—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –∏–∑ snapshot
      const snapshotUnknownKeys = [];
      if (reportData.profileSnapshot && reportData.profileSnapshot.columns) {
        reportData.profileSnapshot.columns.forEach(col => {
          if (col.canonicalKey && !registry[col.canonicalKey]) {
            snapshotUnknownKeys.push(col.canonicalKey);
          }
        });
      }
      
      if (snapshotUnknownKeys.length > 0) {
        console.log(`\n‚ö†Ô∏è  SNAPSHOT UNKNOWN_CANON_KEYS: ${JSON.stringify(snapshotUnknownKeys)}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: ${error.message}`);
    }

    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
    console.log(`–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á—ë—Ç: ${problematicReport.id} (${problematicReport.name})`);
    console.log(`ProfileSnapshot –∫–æ–ª–æ–Ω–æ–∫: ${problematicReport.profilesnapshot_columns_length}`);
    console.log(`Canonical —Å—Ç—Ä–æ–∫: ${problematicReport.canonical_rows_length}`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${problematicReport.canonical_exists === '–Ω–µ—Ç' ? '–ü–†–û–ë–õ–ï–ú–ê - –Ω–µ—Ç canonical –¥–∞–Ω–Ω—ã—Ö' : 'OK'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseGpsReports().catch(console.error);
