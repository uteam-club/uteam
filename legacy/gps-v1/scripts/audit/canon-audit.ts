#!/usr/bin/env tsx
// scripts/audit/canon-audit.ts

import fs from 'fs';
import path from 'path';

// –¢–∏–ø—ã
type CanonRow = { 
  key: string; 
  nameRu: string; 
  dimension: string; 
  unit: string; 
};

type AuditResult = {
  ok: CanonRow[];
  mismatch: Array<{
    key: string;
    expected: CanonRow;
    actual: CanonRow;
    differences: string[];
  }>;
  missing: CanonRow[];
  extra: CanonRow[];
  duplicates: Array<{
    key: string;
    count: number;
    entries: CanonRow[];
  }>;
};

// –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
const EXPECTED: CanonRow[] = [
  { key: "accelerations_count", nameRu: "–ö–æ–ª-–≤–æ —É—Å–∫–æ—Ä–µ–Ω–∏–π", dimension: "count", unit: "count" },
  { key: "accelerations_high_count", nameRu: "–ö–æ–ª-–≤–æ —É—Å–∫–æ—Ä–µ–Ω–∏–π (–≤—ã—Å–æ–∫–∏–µ)", dimension: "count", unit: "count" },
  { key: "accumulated_load_au", nameRu: "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "aee_kcal", nameRu: "–ê–∫—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞ (–∫–∫–∞–ª)", dimension: "energy", unit: "kcal" },
  { key: "athlete_name", nameRu: "–ò–º—è –∏–≥—Ä–æ–∫–∞", dimension: "text", unit: "text" },
  { key: "average_speed_ms", nameRu: "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", dimension: "speed", unit: "m/s" },
  { key: "body_mass_kg", nameRu: "–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ (–∫–≥)", dimension: "mass", unit: "kg" },
  { key: "decelerations_count", nameRu: "–ö–æ–ª-–≤–æ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–π", dimension: "count", unit: "count" },
  { key: "decelerations_high_count", nameRu: "–ö–æ–ª-–≤–æ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–π (–≤—ã—Å–æ–∫–∏–µ)", dimension: "count", unit: "count" },
  { key: "distance_per_min_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–∞ –º–∏–Ω—É—Ç—É (–º/–º–∏–Ω)", dimension: "speed", unit: "m/min" },
  { key: "distance_zone_0_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 0 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_1_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 1 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_2_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 2 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_3_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 3 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_4_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 4 (–º)", dimension: "distance", unit: "m" },
  { key: "distance_zone_5_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–æ–Ω–∞ 5 (–º)", dimension: "distance", unit: "m" },
  { key: "duration_s", nameRu: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "flying_sprints_count", nameRu: "–ö–æ–ª-–≤–æ ¬´–ª–µ—Ç—è—â–∏—Ö¬ª —Å–ø—Ä–∏–Ω—Ç–æ–≤", dimension: "count", unit: "count" },
  { key: "gps_system", nameRu: "GPS —Å–∏—Å—Ç–µ–º–∞", dimension: "text", unit: "text" },
  { key: "hard_running_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è HR (–º)", dimension: "distance", unit: "m" },
  { key: "hard_running_distance_ratio", nameRu: "–î–æ–ª—è HR –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "heart_rate_avg_bpm", nameRu: "–ü—É–ª—å—Å —Å—Ä–µ–¥–Ω–∏–π (—É–¥/–º–∏–Ω)", dimension: "bpm", unit: "bpm" },
  { key: "heart_rate_max_bpm", nameRu: "–ü—É–ª—å—Å –º–∞–∫—Å–∏–º—É–º (—É–¥/–º–∏–Ω)", dimension: "bpm", unit: "bpm" },
  { key: "heart_rate_time_in_zone_1_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 1 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_2_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 2 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_3_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 3 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_4_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 4 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "heart_rate_time_in_zone_5_s", nameRu: "–í—Ä–µ–º—è –≤ –ø—É–ª—å—Å-–∑–æ–Ω–µ 5 (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "hsr_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è HSR (–º)", dimension: "distance", unit: "m" },
  { key: "hsr_ratio", nameRu: "HSR % –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "left_foot_contacts_count", nameRu: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ª–µ–≤–æ–π", dimension: "count", unit: "count" },
  { key: "max_speed_kmh", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", dimension: "speed", unit: "km/h" },
  { key: "max_speed_ms", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", dimension: "speed", unit: "m/s" },
  { key: "meters_per_acceleration_m", nameRu: "–ú–µ—Ç—Ä–æ–≤ –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º)", dimension: "distance", unit: "m" },
  { key: "meters_per_deceleration_m", nameRu: "–ú–µ—Ç—Ä–æ–≤ –Ω–∞ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ (–º)", dimension: "distance", unit: "m" },
  { key: "minutes_played", nameRu: "–í—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ (–º–∏–Ω)", dimension: "time", unit: "min" },
  { key: "neuromuscular_load_au", nameRu: "–ù–µ–π—Ä–æ–º—ã—à–µ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "number_of_sprints_count", nameRu: "–ö–æ–ª-–≤–æ —Å–ø—Ä–∏–Ω—Ç–æ–≤", dimension: "count", unit: "count" },
  { key: "player_external_id", nameRu: "–í–Ω–µ—à–Ω–∏–π ID –∏–≥—Ä–æ–∫–∞", dimension: "text", unit: "text" },
  { key: "position", nameRu: "–ü–æ–∑–∏—Ü–∏—è", dimension: "text", unit: "text" },
  { key: "right_foot_contacts_count", nameRu: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∞–≤–æ–π", dimension: "count", unit: "count" },
  { key: "session_rpe_au", nameRu: "sRPE (AU)", dimension: "au", unit: "au" },
  { key: "sprint_distance_m", nameRu: "–°–ø—Ä–∏–Ω—Ç-–¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)", dimension: "distance", unit: "m" },
  { key: "sprint_duration_s", nameRu: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø—Ä–∏–Ω—Ç–æ–≤ (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "sprint_max_speed_ms", nameRu: "–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —Å–ø—Ä–∏–Ω—Ç–µ (–º/—Å)", dimension: "speed", unit: "m/s" },
  { key: "sprint_ratio", nameRu: "–î–æ–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "sprint_time_per_run_s", nameRu: "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞ (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "sprint_total_time_s", nameRu: "–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–æ–≤ (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "standing_time_s", nameRu: "–í—Ä–µ–º—è —Å—Ç–æ—è (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "steps_total_count", nameRu: "–ö–æ–ª-–≤–æ —à–∞–≥–æ–≤ –≤—Å–µ–≥–æ", dimension: "count", unit: "count" },
  { key: "total_distance_m", nameRu: "–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)", dimension: "distance", unit: "m" },
  { key: "total_load_au", nameRu: "–û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (AU)", dimension: "au", unit: "au" },
  { key: "uptime_s", nameRu: "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞ (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "very_high_speed_distance_m", nameRu: "–î–∏—Å—Ç–∞–Ω—Ü–∏—è VHSR (–º)", dimension: "distance", unit: "m" },
  { key: "very_high_speed_ratio", nameRu: "VHSR % –æ—Ç –æ–±—â–µ–π", dimension: "ratio", unit: "ratio" },
  { key: "walking_time_s", nameRu: "–í—Ä–µ–º—è —Ö–æ–¥—å–±—ã (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "work_ratio", nameRu: "–†–∞–±–æ—á–∞—è –¥–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏", dimension: "ratio", unit: "ratio" },
  { key: "work_time_s", nameRu: "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–µ–∫)", dimension: "time", unit: "s" },
  { key: "x_pos_m", nameRu: "X –ø–æ–∑–∏—Ü–∏—è (–º)", dimension: "distance", unit: "m" },
  { key: "y_pos_m", nameRu: "Y –ø–æ–∑–∏—Ü–∏—è (–º)", dimension: "distance", unit: "m" }
];

async function auditCanonRegistry() {
  console.log('üîç –ê—É–¥–∏—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    const registryPath = path.resolve('src/canon/metrics.registry.json');
    const registryContent = fs.readFileSync(registryPath, 'utf8');
    const registry = JSON.parse(registryContent);

    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–µ—Å—Ç—Ä –∏–∑:', registryPath);
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–µ—Å—Ç—Ä–∞:', Object.keys(registry));

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–µ—Å—Ç—Ä –≤ –º–∞—Å—Å–∏–≤ CanonRow
    const actualMetrics: CanonRow[] = [];
    
    if (registry.metrics && Array.isArray(registry.metrics)) {
      for (const metric of registry.metrics) {
        if (metric.key && metric.labels?.ru && metric.dimension) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º unit –Ω–∞ –æ—Å–Ω–æ–≤–µ dimension –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º unit –∏–∑ –º–µ—Ç—Ä–∏–∫–∏
          let unit = metric.unit;
          if (!unit || unit === 'string') {
            // –ú–∞–ø–ø–∏–Ω–≥ dimension -> canonical unit
            const dimensionUnits: Record<string, string> = {
              'distance': 'm',
              'time': 's', 
              'speed': 'm/s',
              'ratio': 'ratio',
              'count': 'count',
              'au': 'au',
              'energy': 'kcal',
              'mass': 'kg',
              'bpm': 'bpm',
              'text': 'text',
              'identity': 'text'
            };
            unit = dimensionUnits[metric.dimension] || metric.unit || 'unknown';
          }
          
          actualMetrics.push({
            key: metric.key,
            nameRu: metric.labels.ru,
            dimension: metric.dimension,
            unit: unit
          });
        }
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${actualMetrics.length}`);
    console.log(`üìä –û–∂–∏–¥–∞–µ—Ç—Å—è –º–µ—Ç—Ä–∏–∫: ${EXPECTED.length}`);

    // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const expectedByKey = new Map(EXPECTED.map(item => [item.key, item]));
    const actualByKey = new Map(actualMetrics.map(item => [item.key, item]));

    // –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    const keyCounts = new Map<string, number>();
    const keyEntries = new Map<string, CanonRow[]>();
    
    for (const metric of actualMetrics) {
      const count = keyCounts.get(metric.key) || 0;
      keyCounts.set(metric.key, count + 1);
      
      if (!keyEntries.has(metric.key)) {
        keyEntries.set(metric.key, []);
      }
      keyEntries.get(metric.key)!.push(metric);
    }

    const duplicates = Array.from(keyCounts.entries())
      .filter(([key, count]) => count > 1)
      .map(([key, count]) => ({
        key,
        count,
        entries: keyEntries.get(key)!
      }));

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
    const result: AuditResult = {
      ok: [],
      mismatch: [],
      missing: [],
      extra: [],
      duplicates
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –æ–∂–∏–¥–∞–µ–º—É—é –º–µ—Ç—Ä–∏–∫—É
    for (const expected of EXPECTED) {
      const actual = actualByKey.get(expected.key);
      
      if (!actual) {
        result.missing.push(expected);
      } else {
        const differences: string[] = [];
        
        if (actual.nameRu !== expected.nameRu) {
          differences.push(`nameRu: "${actual.nameRu}" != "${expected.nameRu}"`);
        }
        if (actual.dimension !== expected.dimension) {
          differences.push(`dimension: "${actual.dimension}" != "${expected.dimension}"`);
        }
        if (actual.unit !== expected.unit) {
          differences.push(`unit: "${actual.unit}" != "${expected.unit}"`);
        }

        if (differences.length === 0) {
          result.ok.push(actual);
        } else {
          result.mismatch.push({
            key: expected.key,
            expected,
            actual,
            differences
          });
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    for (const actual of actualMetrics) {
      if (!expectedByKey.has(actual.key)) {
        result.extra.push(actual);
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π summary –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('\n=== CANON AUDIT SUMMARY ===');
    console.log(`‚úÖ OK: ${result.ok.length}`);
    console.log(`‚ùå MISMATCH: ${result.mismatch.length}`);
    console.log(`‚ö†Ô∏è  MISSING: ${result.missing.length}`);
    console.log(`‚ûï EXTRA: ${result.extra.length}`);
    console.log(`üîÑ DUPLICATES: ${result.duplicates.length}`);

    if (result.mismatch.length > 0) {
      console.log('\n‚ùå MISMATCHES:');
      result.mismatch.forEach(item => {
        console.log(`  ${item.key}: ${item.differences.join(', ')}`);
      });
    }

    if (result.missing.length > 0) {
      console.log('\n‚ö†Ô∏è  MISSING:');
      result.missing.forEach(item => {
        console.log(`  ${item.key}: ${item.nameRu}`);
      });
    }

    if (result.extra.length > 0) {
      console.log('\n‚ûï EXTRA:');
      result.extra.forEach(item => {
        console.log(`  ${item.key}: ${item.nameRu}`);
      });
    }

    if (result.duplicates.length > 0) {
      console.log('\nüîÑ DUPLICATES:');
      result.duplicates.forEach(item => {
        console.log(`  ${item.key}: ${item.count} entries`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
    await saveReports(result);

    console.log('\nüìÑ –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
    console.log('  - artifacts/canon-audit/REPORT.md');
    console.log('  - artifacts/canon-audit/REPORT.json');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ:', error);
    process.exit(1);
  }
}

async function saveReports(result: AuditResult) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á—ë—Ç
  const jsonPath = path.resolve('artifacts/canon-audit/REPORT.json');
  fs.writeFileSync(jsonPath, JSON.stringify(result, null, 2), 'utf8');

  // –°–æ–∑–¥–∞—ë–º Markdown –æ—Ç—á—ë—Ç
  const lines: string[] = [];
  
  lines.push('# Canon Registry Audit Report');
  lines.push('');
  lines.push(`**–î–∞—Ç–∞:** ${new Date().toISOString()}`);
  lines.push('');
  lines.push('## –°–≤–æ–¥–∫–∞');
  lines.push(`- **OK:** ${result.ok.length}`);
  lines.push(`- **MISMATCH:** ${result.mismatch.length}`);
  lines.push(`- **MISSING:** ${result.missing.length}`);
  lines.push(`- **EXTRA:** ${result.extra.length}`);
  lines.push(`- **DUPLICATES:** ${result.duplicates.length}`);
  lines.push('');

  // OK —Å–µ–∫—Ü–∏—è
  if (result.ok.length > 0) {
    lines.push('## ‚úÖ OK');
    lines.push('');
    lines.push('| Key | Name (RU) | Dimension | Unit |');
    lines.push('|-----|-----------|-----------|------|');
    result.ok.forEach(item => {
      lines.push(`| ${item.key} | ${item.nameRu} | ${item.dimension} | ${item.unit} |`);
    });
    lines.push('');
  }

  // MISMATCH —Å–µ–∫—Ü–∏—è
  if (result.mismatch.length > 0) {
    lines.push('## ‚ùå MISMATCH');
    lines.push('');
    lines.push('| Key | Field | Expected | Actual |');
    lines.push('|-----|-------|----------|--------|');
    result.mismatch.forEach(item => {
      lines.push(`| ${item.key} | nameRu | ${item.expected.nameRu} | ${item.actual.nameRu} |`);
      if (item.expected.dimension !== item.actual.dimension) {
        lines.push(`| ${item.key} | dimension | ${item.expected.dimension} | ${item.actual.dimension} |`);
      }
      if (item.expected.unit !== item.actual.unit) {
        lines.push(`| ${item.key} | unit | ${item.expected.unit} | ${item.actual.unit} |`);
      }
    });
    lines.push('');
  }

  // MISSING —Å–µ–∫—Ü–∏—è
  if (result.missing.length > 0) {
    lines.push('## ‚ö†Ô∏è  MISSING');
    lines.push('');
    lines.push('| Key | Name (RU) | Dimension | Unit |');
    lines.push('|-----|-----------|-----------|------|');
    result.missing.forEach(item => {
      lines.push(`| ${item.key} | ${item.nameRu} | ${item.dimension} | ${item.unit} |`);
    });
    lines.push('');
  }

  // EXTRA —Å–µ–∫—Ü–∏—è
  if (result.extra.length > 0) {
    lines.push('## ‚ûï EXTRA');
    lines.push('');
    lines.push('| Key | Name (RU) | Dimension | Unit |');
    lines.push('|-----|-----------|-----------|------|');
    result.extra.forEach(item => {
      lines.push(`| ${item.key} | ${item.nameRu} | ${item.dimension} | ${item.unit} |`);
    });
    lines.push('');
  }

  // DUPLICATES —Å–µ–∫—Ü–∏—è
  if (result.duplicates.length > 0) {
    lines.push('## üîÑ DUPLICATES');
    lines.push('');
    lines.push('| Key | Count | Entries |');
    lines.push('|-----|-------|---------|');
    result.duplicates.forEach(item => {
      lines.push(`| ${item.key} | ${item.count} | ${item.entries.map(e => e.nameRu).join(', ')} |`);
    });
    lines.push('');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown –æ—Ç—á—ë—Ç
  const mdPath = path.resolve('artifacts/canon-audit/REPORT.md');
  fs.writeFileSync(mdPath, lines.join('\n'), 'utf8');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
auditCanonRegistry();
