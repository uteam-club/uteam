const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function diagnoseGpsReportsDetailed() {
  console.log('üîç GPS –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü–æ–∏—Å–∫ –æ—Ç—á—ë—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ canonical –¥–∞–Ω–Ω—ã–º–∏\n');

  try {
    // –ò—â–µ–º –æ—Ç—á—ë—Ç—ã —Å profileSnapshot, –Ω–æ –ø—É—Å—Ç—ã–º–∏ canonical –¥–∞–Ω–Ω—ã–º–∏
    console.log('=== –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• –û–¢–ß–Å–¢–û–í ===');
    const reportsQuery = `
      SELECT 
        id,
        name,
        "createdAt",
        "gpsSystem",
        "profileId",
        CASE 
          WHEN "profileSnapshot" IS NOT NULL THEN '–µ—Å—Ç—å'
          ELSE '–Ω–µ—Ç'
        END as profileSnapshot_exists,
        CASE 
          WHEN "profileSnapshot" IS NOT NULL AND "profileSnapshot"->'columns' IS NOT NULL 
          THEN jsonb_array_length("profileSnapshot"->'columns')::text
          ELSE '0'
        END as profileSnapshot_columns_length,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL THEN '–µ—Å—Ç—å'
          ELSE '–Ω–µ—Ç'
        END as canonical_exists,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length,
        "importMeta"
      FROM public."GpsReport"
      WHERE 
        "profileSnapshot" IS NOT NULL 
        AND "profileSnapshot"->'columns' IS NOT NULL 
        AND jsonb_array_length("profileSnapshot"->'columns') > 0
        AND (
          "processedData" IS NULL 
          OR "processedData"->'canonical' IS NULL 
          OR "processedData"->'canonical'->'rows' IS NULL
          OR jsonb_array_length("processedData"->'canonical'->'rows') = 0
        )
      ORDER BY "createdAt" DESC
      LIMIT 10
    `;

    const reportsResult = await pool.query(reportsQuery);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤: ${reportsResult.rows.length}\n`);
    
    if (reportsResult.rows.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á—ë—Ç
    const problematicReport = reportsResult.rows[0];
    console.log(`üö® –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –û–¢–ß–Å–¢–ê: ${problematicReport.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${problematicReport.name}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${problematicReport.createdAt}`);
    console.log(`   GPS —Å–∏—Å—Ç–µ–º–∞: ${problematicReport.gpsSystem}`);
    console.log(`   Profile ID: ${problematicReport.profileId}`);
    console.log(`   ProfileSnapshot: ${problematicReport.profilesnapshot_exists} (${problematicReport.profilesnapshot_columns_length} –∫–æ–ª–æ–Ω–æ–∫)`);
    console.log(`   Canonical: ${problematicReport.canonical_exists} (${problematicReport.canonical_rows_length} —Å—Ç—Ä–æ–∫)`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º –æ—Ç—á—ë—Ç–µ
    const detailedQuery = `
      SELECT 
        "profileSnapshot",
        "processedData",
        "rawData"
      FROM public."GpsReport"
      WHERE id = $1
    `;
    
    const detailedResult = await pool.query(detailedQuery, [problematicReport.id]);
    const reportData = detailedResult.rows[0];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º profileSnapshot
    console.log('\n=== –ê–ù–ê–õ–ò–ó PROFILE SNAPSHOT ===');
    if (reportData.profileSnapshot && reportData.profileSnapshot.columns) {
      console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ profileSnapshot:');
      reportData.profileSnapshot.columns.forEach((col, index) => {
        console.log(`   ${index + 1}. canonicalKey: ${col.canonicalKey}`);
        console.log(`      sourceHeader: ${col.sourceHeader}`);
        console.log(`      dataType: ${col.dataType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log('');
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º processedData
    console.log('=== –ê–ù–ê–õ–ò–ó PROCESSED DATA ===');
    if (reportData.processedData) {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ processedData:');
      console.log(`   Canonical: ${reportData.processedData.canonical ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
      if (reportData.processedData.canonical) {
        console.log(`   Canonical rows: ${reportData.processedData.canonical.rows ? reportData.processedData.canonical.rows.length : '–Ω–µ—Ç'}`);
        console.log(`   Canonical columns: ${reportData.processedData.canonical.columns ? Object.keys(reportData.processedData.canonical.columns).length : '–Ω–µ—Ç'}`);
      }
      if (reportData.processedData.profile && reportData.processedData.profile.headers) {
        console.log(`   Profile headers: ${JSON.stringify(reportData.processedData.profile.headers)}`);
      }
    } else {
      console.log('‚ùå processedData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º rawData
    console.log('\n=== –ê–ù–ê–õ–ò–ó RAW DATA ===');
    if (reportData.rawData && reportData.rawData.length > 0) {
      console.log(`üìÑ RawData —Å—Ç—Ä–æ–∫: ${reportData.rawData.length}`);
      console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏): ${JSON.stringify(reportData.rawData[0])}`);
      if (reportData.rawData.length > 1) {
        console.log(`   –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–∞–Ω–Ω—ã–µ): ${JSON.stringify(reportData.rawData[1])}`);
      }
    } else {
      console.log('‚ùå rawData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    console.log(`\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø ${problematicReport.profileId} ===`);
    const profileQuery = `
      SELECT 
        id,
        name,
        "gpsSystem",
        "columnMapping",
        "metricsConfig"
      FROM public."GpsProfile"
      WHERE id = $1
    `;
    
    const profileResult = await pool.query(profileQuery, [problematicReport.profileId]);
    
    if (profileResult.rows.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    const profile = profileResult.rows[0];
    console.log(`üìã –ü—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.gpsSystem})`);
    console.log(`   ColumnMapping: ${JSON.stringify(profile.columnMapping)}`);
    console.log(`   MetricsConfig: ${JSON.stringify(profile.metricsConfig)}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –†–ï–ï–°–¢–†–ê –ö–ê–ù–û–ù–ò–ß–ï–°–ö–ò–• –ö–õ–Æ–ß–ï–ô ===');
    const fs = require('fs');
    const path = require('path');
    
    try {
      const registryPath = path.join(__dirname, '..', 'src', 'canon', 'metrics.registry.json');
      const registryContent = fs.readFileSync(registryPath, 'utf8');
      const registry = JSON.parse(registryContent);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∫–ª—é—á–µ–π –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
      const registryKeys = new Set();
      if (registry.metrics && Array.isArray(registry.metrics)) {
        registry.metrics.forEach(metric => {
          registryKeys.add(metric.key);
        });
      }
      
      console.log('üìö –†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–ª—é—á–∏:');
      Array.from(registryKeys).forEach(key => {
        console.log(`   - ${key}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–∏–∑ columnMapping)
      const unknownKeys = [];
      if (profile.columnMapping) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º canonicalKey –∏–∑ columnMapping
        Object.values(profile.columnMapping).forEach(mapping => {
          if (mapping && mapping.canonicalKey && !registryKeys.has(mapping.canonicalKey)) {
            unknownKeys.push(mapping.canonicalKey);
          }
        });
      }
      
      if (unknownKeys.length > 0) {
        console.log(`\n‚ö†Ô∏è  UNKNOWN_CANON_KEYS –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: ${JSON.stringify(unknownKeys)}`);
      } else {
        console.log('\n‚úÖ –í—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –∏–∑ snapshot
      const snapshotUnknownKeys = [];
      if (reportData.profileSnapshot && reportData.profileSnapshot.columns) {
        reportData.profileSnapshot.columns.forEach(col => {
          if (col.canonicalKey && !registryKeys.has(col.canonicalKey)) {
            snapshotUnknownKeys.push(col.canonicalKey);
          }
        });
      }
      
      if (snapshotUnknownKeys.length > 0) {
        console.log(`\n‚ö†Ô∏è  UNKNOWN_CANON_KEYS –∏–∑ snapshot: ${JSON.stringify(snapshotUnknownKeys)}`);
      } else {
        console.log('\n‚úÖ –í—Å–µ –∫–ª—é—á–∏ snapshot –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      console.log('\n=== –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í ===');
      const headerMismatches = [];
      
      if (reportData.profileSnapshot && reportData.profileSnapshot.columns) {
        reportData.profileSnapshot.columns.forEach(col => {
          if (col.sourceHeader) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ rawData
            let foundInRaw = false;
            if (reportData.rawData && reportData.rawData.length > 0) {
              foundInRaw = reportData.rawData[0].includes(col.sourceHeader);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ processedData.profile.headers
            let foundInProcessed = false;
            if (reportData.processedData && reportData.processedData.profile && reportData.processedData.profile.headers) {
              foundInProcessed = reportData.processedData.profile.headers.includes(col.sourceHeader);
            }
            
            if (!foundInRaw && !foundInProcessed) {
              headerMismatches.push(col.sourceHeader);
            }
          }
        });
      }
      
      if (headerMismatches.length > 0) {
        console.log(`\n‚ö†Ô∏è  HEADER_MISMATCH: ${JSON.stringify(headerMismatches)}`);
      } else {
        console.log('\n‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö');
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: ${error.message}`);
    }

    console.log('\n=== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===');
    console.log(`Report ID: ${problematicReport.id}`);
    console.log(`Name: ${problematicReport.name}`);
    console.log(`Created At: ${problematicReport.createdAt}`);
    console.log(`ProfileSnapshot columns: ${problematicReport.profilesnapshot_columns_length}`);
    console.log(`Canonical rows: ${problematicReport.canonical_rows_length}`);
    console.log(`Status: –ü–†–û–ë–õ–ï–ú–ê - canonical –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseGpsReportsDetailed().catch(console.error);
