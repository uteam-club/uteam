'use client';

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, UserPlus, AlertCircle, Users } from 'lucide-react';
// –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
interface PlayerMappingResult {
  reportName: string;
  suggestedPlayer: any | null;
  confidence: number;
  alternatives: any[];
  action: 'confirm' | 'skip' | 'manual';
  mappingId?: string;
}

// –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞
type MappingItem = {
  reportName: string;
  rowIndex?: number;
  selectedPlayerId?: string | null;
  mappingType: 'auto' | 'manual' | 'none';
  confidenceScore?: number | null; // —Ç–æ–ª—å–∫–æ –∏–∑ –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä–∞, –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–±–æ—Ä–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  candidates?: Array<{ id: string; name: string; score: number }>;
  isConfirmed?: boolean;
  changeOrigin: 'auto' | 'user' | 'saved' | 'reset'; // –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  userSelected?: boolean; // –ù–û–í–û–ï: –∏—Å—Ç–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –≤ —Å–µ–ª–µ–∫—Ç–µ
  // Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  suggestedPlayer?: any | null;
  confidence?: number;
  alternatives?: any[];
  action?: 'confirm' | 'skip' | 'manual';
  mappingId?: string;
};

interface PlayerMappingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (mappings: { reportName: string; selectedPlayerId: string }[]) => void;
  reportNames: string[];
  gpsSystem: string;
  teamId: string;
  clubId: string;
  createdById: string;
}

interface MappingState extends PlayerMappingResult {
  isConfirmed: boolean;
  selectedPlayerId?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫
function isSummaryRow(name: string) {
  const n = name.toLowerCase().trim().replace(/[—ë]/g, '–µ').replace(/[-'']+/g, ' ').replace(/\s+/g, ' ');
  return ['—Å—Ä–µ–¥–Ω–µ–µ','—Å—É–º–º–∞','average','total'].some(k => n.includes(k));
}

export default function PlayerMappingModal({
  isOpen,
  onClose,
  onConfirm,
  reportNames,
  gpsSystem,
  teamId,
  clubId,
  createdById
}: PlayerMappingModalProps) {
  const [mappings, setMappings] = useState<MappingItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [teamPlayers, setTeamPlayers] = useState<any[]>([]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  const conflicts = React.useMemo(() => {
    const byPlayer = new Map<string, string[]>(); // playerId -> [reportName...]
    mappings.forEach(r => {
      if (r.selectedPlayerId) {
        const arr = byPlayer.get(r.selectedPlayerId) ?? [];
        arr.push(r.reportName);
        byPlayer.set(r.selectedPlayerId, arr);
      }
    });
    const ids = new Set<string>();
    byPlayer.forEach((names, id) => { if (names.length > 1) ids.add(id); });
    return { ids, byPlayer }; // ids: Set<string>, byPlayer: Map<string,string[]>
  }, [mappings]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  useEffect(() => {
    console.log('useEffect for fetchTeamPlayers:', { isOpen, teamId });
    if (isOpen && teamId && teamId.trim() !== '') {
      fetchTeamPlayers();
    }
  }, [isOpen, teamId]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen && reportNames.length > 0 && teamPlayers.length > 0) {
      performAutoMapping();
    }
  }, [isOpen, reportNames, teamPlayers]);

  const fetchTeamPlayers = async () => {
    console.log('Fetching team players for teamId:', teamId);
    try {
      const response = await fetch(`/api/teams/${teamId}/players`);
      console.log('Response status:', response.status);
      if (response.ok) {
        const players = await response.json();
        console.log('Players loaded:', players);
        setTeamPlayers(players);
      } else {
        console.error('Failed to load players:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã:', error);
    }
  };

  const performAutoMapping = async () => {
    setLoading(true);
    try {
      const mappingPromises = reportNames.map(async (reportName) => {
        // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const response = await fetch('/api/player-mappings/auto-match', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            reportName,
            teamId,
            clubId,
            gpsSystem
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log('üîç Auto-match result for', reportName, ':', {
            result,
            suggestedPlayer: result.suggestedPlayer,
            suggestedPlayerId: result.suggestedPlayer?.id,
            confidence: result.confidence,
            action: result.action
          });
          const isAuto = result.action === 'confirm' && result.suggestedPlayer?.id;
          
          return {
            ...result,
            reportName,
            rowIndex: reportNames.indexOf(reportName),
            selectedPlayerId: isAuto ? result.suggestedPlayer.id : null,
            mappingType: isAuto ? 'auto' : 'none',
            confidenceScore: typeof result.confidence === 'number' ? result.confidence : 0,
            candidates: [], // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            isConfirmed: !!isAuto,
            changeOrigin: result.source === 'saved' ? 'saved' : 'auto',
            userSelected: false,
            // Legacy –ø–æ–ª—è
            suggestedPlayer: result.suggestedPlayer,
            confidence: result.confidence,
            alternatives: [],
            action: result.action,
            mappingId: result.mappingId,
            source: result.source
          };
        } else {
          // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return {
            reportName,
            rowIndex: reportNames.indexOf(reportName),
            selectedPlayerId: null,
            mappingType: 'none' as const,
            confidenceScore: 0,
            candidates: [],
            isConfirmed: false,
            changeOrigin: 'auto',
            userSelected: false,
            // Legacy –ø–æ–ª—è
            suggestedPlayer: null,
            confidence: 0,
            alternatives: [],
            action: 'manual',
          };
        }
      });

      const results = await Promise.all(mappingPromises);
      console.log('üîç Final mapping results:', results);
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ dev)
      if (process.env.NEXT_PUBLIC_GPS_DEBUG === '1') {
        console.table(results.map(m => ({
          reportName: m.reportName,
          mappingType: m.mappingType,
          changeOrigin: m.changeOrigin,
          userSelected: !!m.userSelected,
          selectedPlayerId: m.selectedPlayerId,
          confidence: m.confidenceScore
        })));
      }
      
      setMappings(results);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', error);
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const results = reportNames.map(reportName => ({
        reportName,
        rowIndex: reportNames.indexOf(reportName),
        selectedPlayerId: null,
        mappingType: 'none' as const,
        confidenceScore: 0,
        candidates: [],
        isConfirmed: false,
        changeOrigin: 'auto' as const,
        userSelected: false,
        // Legacy –ø–æ–ª—è
        suggestedPlayer: null,
        confidence: 0,
        alternatives: [],
        action: 'manual' as const,
      }));
      setMappings(results);
    } finally {
      setLoading(false);
    }
  };

  const handleMappingChange = (rowIndex: number, selectedPlayerId: string | null, isUser: boolean) => {
    console.log('Mapping change:', { rowIndex, selectedPlayerId, isUser, teamPlayers });
    setMappings(ms => ms.map((m, i) => i !== rowIndex ? m : {
      ...m,
      selectedPlayerId,
      mappingType: isUser ? 'manual' : m.mappingType, // manual —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      isConfirmed: !!selectedPlayerId,
      changeOrigin: isUser ? 'user' : m.changeOrigin ?? 'auto',
      userSelected: isUser ? true : m.userSelected ?? false,
      // Legacy –ø–æ–ª—è
      suggestedPlayer: selectedPlayerId ? teamPlayers.find(p => p.id === selectedPlayerId) || null : null,
      action: 'manual',
    }));
  };

  // –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞


  const handleConfirmAll = async () => {
    setLoading(true);
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savePromises = mappings
        .filter(mapping => mapping.selectedPlayerId)
        .map(async (mapping) => {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ API
          const response = await fetch('/api/player-mappings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              reportName: mapping.reportName,
              playerId: mapping.selectedPlayerId,
              gpsSystem,
              teamId,
              confidenceScore: mapping.confidenceScore || mapping.confidence,
              mappingType: mapping.mappingType || mapping.action,
              notes: '–°–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞'
            })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞');
          }
          
          return response.json();
        });

      const savedMappings = await Promise.all(savePromises);
      console.log('‚úÖ –ú–∞–ø–ø–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É:', savedMappings);
      
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞
      console.log('üîç –í—Å–µ mappings –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:', mappings);
      const apiMappings = mappings
        .filter(mapping => mapping.selectedPlayerId)
        .map(mapping => ({
          reportName: mapping.reportName,
          rowIndex: mapping.rowIndex,
          selectedPlayerId: mapping.selectedPlayerId!,
          mappingType: mapping.mappingType,
          confidenceScore: mapping.confidenceScore
        }));
      
      console.log('üîó –ü–µ—Ä–µ–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –≤ UploadGpsReportModal:', apiMappings);
      onConfirm(apiMappings);
      onClose();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤
      if (error.message && error.message.includes('duplicate_player_mapping')) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
        console.error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∞–ø–ø–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤:', error.details);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      }
    } finally {
      setLoading(false);
    }
  };

  const getMappingBadge = (mapping: MappingItem) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä—É—á–Ω—É—é
    if (mapping.userSelected === true) {
      return {
        text: '–í—ã–±—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é',
        className: 'bg-blue-500/20 text-blue-400 border-blue-500/30'
      };
    }
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
    if (mapping.mappingType === 'auto' && mapping.selectedPlayerId) {
      const confidence = mapping.confidenceScore || 0;
      const pct = Math.round(confidence * 100);
      return {
        text: `–ê–≤—Ç–æ ‚Ä¢ ${pct}%`,
        className: confidence >= 0.8 
          ? 'bg-green-500/20 text-green-400 border-green-500/30'
          : confidence >= 0.6 
            ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'
            : 'bg-red-500/20 text-red-400 border-red-500/30'
      };
    }
    
    return {
      text: '–ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
      className: 'bg-gray-500/20 text-gray-400 border-gray-500/30'
    };
  };

  const getActionIcon = (action: string, selectedPlayerId?: string) => {
    if (!selectedPlayerId || selectedPlayerId === 'undefined' || selectedPlayerId === '') {
      return <AlertCircle className="w-4 h-4 text-yellow-400" />;
    }
    
    switch (action) {
      case 'confirm':
        return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'create':
        return <UserPlus className="w-4 h-4 text-red-400" />;
      default:
        return <CheckCircle className="w-4 h-4 text-blue-400" />;
    }
  };

  const getActionText = (action: string, selectedPlayerId?: string) => {
    if (!selectedPlayerId || selectedPlayerId === 'undefined' || selectedPlayerId === '') {
      return '–ù–µ –≤—ã–±—Ä–∞–Ω';
    }
    
    switch (action) {
      case 'confirm':
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case 'create':
        return '–ò–≥—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      case 'manual':
        return '–í—ã–±—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é';
      default:
        return '–ù–µ –≤—ã–±—Ä–∞–Ω';
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ mappingType –∏ confidence score
  const getSimilarityLevel = (mapping: MappingItem) => {
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 'none'
    if (!mapping.selectedPlayerId || mapping.selectedPlayerId === 'undefined' || mapping.selectedPlayerId === '') {
      return 'none';
    }
    
    if (mapping.mappingType === 'auto' && mapping.confidenceScore !== undefined && mapping.confidenceScore !== null) {
      if (mapping.confidenceScore >= 0.8) return 'high';
      if (mapping.confidenceScore >= 0.5) return 'medium';
      if (mapping.confidenceScore >= 0.3) return 'low';
    }
    
    if (mapping.mappingType === 'manual') {
      return 'manual';
    }
    
    return 'none';
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø
  const getSeparatorStyles = (groupKey: string) => {
    switch (groupKey) {
      case 'high':
        return {
          lineClass: 'bg-gradient-to-r from-green-500 to-green-400',
          iconClass: 'text-green-400',
          bgClass: 'bg-green-500/10',
          borderClass: 'border-green-500/20'
        };
      case 'medium':
        return {
          lineClass: 'bg-gradient-to-r from-yellow-500 to-yellow-400',
          iconClass: 'text-yellow-400',
          bgClass: 'bg-yellow-500/10',
          borderClass: 'border-yellow-500/20'
        };
      case 'low':
        return {
          lineClass: 'bg-gradient-to-r from-orange-500 to-orange-400',
          iconClass: 'text-orange-400',
          bgClass: 'bg-orange-500/10',
          borderClass: 'border-orange-500/20'
        };
      case 'manual':
        return {
          lineClass: 'bg-gradient-to-r from-blue-500 to-blue-400',
          iconClass: 'text-blue-400',
          bgClass: 'bg-blue-500/10',
          borderClass: 'border-blue-500/20'
        };
      case 'none':
        return {
          lineClass: 'bg-gradient-to-r from-gray-500 to-gray-400',
          iconClass: 'text-gray-400',
          bgClass: 'bg-gray-500/10',
          borderClass: 'border-gray-500/20'
        };
      default:
        return {
          lineClass: 'bg-gradient-to-r from-gray-500 to-gray-400',
          iconClass: 'text-gray-400',
          bgClass: 'bg-gray-500/10',
          borderClass: 'border-gray-500/20'
        };
    }
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ö–æ–¥—Å—Ç–≤–∞
  const groupedMappings = mappings.reduce((groups, mapping) => {
    const similarityLevel = getSimilarityLevel(mapping);
    if (!groups[similarityLevel]) {
      groups[similarityLevel] = [];
    }
    groups[similarityLevel].push(mapping);
    return groups;
  }, {} as Record<string, MappingItem[]>);

  // –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø
  const groupOrder = ['high', 'medium', 'low', 'manual', 'none'];
  const groupTitles = {
    high: '–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (80-100%)',
    medium: '–°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (50-79%)',
    low: '–ù–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (30-49%)',
    manual: '–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä',
    none: '–ò–≥—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏'
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent 
        className="bg-vista-dark border border-vista-secondary/30 text-vista-light shadow-xl rounded-xl max-w-2xl overflow-y-auto max-h-[80vh] focus:outline-none focus:ring-0 custom-scrollbar"
        aria-describedby="player-mapping-description"
      >
        <DialogHeader>
          <DialogTitle className="text-vista-light text-xl flex items-center gap-2">
            <Users className="h-5 w-5 text-vista-primary" />
            –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –æ—Ç—á–µ—Ç–∞
          </DialogTitle>
        </DialogHeader>
        <div id="player-mapping-description" className="sr-only">
          –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GPS –æ—Ç—á–µ—Ç–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
        </div>

        <div className="grid gap-4 py-4 custom-scrollbar">
          {loading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-vista-primary mx-auto"></div>
              <p className="text-vista-light/70 mt-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤...</p>
            </div>
          ) : (
            <>
              <div className="space-y-6">
                {groupOrder.map(groupKey => {
                  const groupMappings = groupedMappings[groupKey] || [];
                  if (groupMappings.length === 0) return null;

                  const groupTitle = groupTitles[groupKey as keyof typeof groupTitles];
                  const separatorStyles = getSeparatorStyles(groupKey);

                  return (
                    <div key={groupKey} className="space-y-4">
                      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –ø–æ–ª–æ—Å–∫–æ–π */}
                      <div className={`relative ${separatorStyles.bgClass} rounded-md px-3 py-2 border ${separatorStyles.borderClass}`}>
                        <div className="flex items-center gap-3">
                          {/* –ò–∫–æ–Ω–∫–∞ */}
                          <div className={`flex-shrink-0 w-6 h-6 rounded-full ${separatorStyles.bgClass} flex items-center justify-center`}>
                            {groupKey === 'high' && (
                              <svg className={`w-4 h-4 ${separatorStyles.iconClass}`} fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                              </svg>
                            )}
                            {groupKey === 'medium' && (
                              <svg className={`w-4 h-4 ${separatorStyles.iconClass}`} fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                              </svg>
                            )}
                            {groupKey === 'low' && (
                              <svg className={`w-4 h-4 ${separatorStyles.iconClass}`} fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                              </svg>
                            )}
                            {groupKey === 'manual' && (
                              <svg className={`w-4 h-4 ${separatorStyles.iconClass}`} fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                              </svg>
                            )}
                            {groupKey === 'none' && (
                              <svg className={`w-4 h-4 ${separatorStyles.iconClass}`} fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                              </svg>
                            )}
                          </div>
                          
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã */}
                          <div className="flex-1">
                            <h4 className="text-sm font-semibold text-vista-light">{groupTitle}</h4>
                          </div>
                          
                          {/* –°—á–µ—Ç—á–∏–∫ */}
                          <Badge className={`${getMappingBadge(groupMappings[0] || {}).className} text-xs px-2 py-1`}>
                            {groupMappings.length}
                          </Badge>
                        </div>
                        
                        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ */}
                        <div className={`absolute bottom-0 left-0 right-0 h-0.5 ${separatorStyles.lineClass} rounded-b-md`}></div>
                      </div>
                      
                      {/* –ü–ª–∏—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ */}
                      <div className="space-y-3">
                        {groupMappings.map((mapping, index) => {
                          console.log('üîç Rendering mapping for', mapping.reportName, ':', {
                            selectedPlayerId: mapping.selectedPlayerId,
                            confidence: mapping.confidence,
                            suggestedPlayer: mapping.suggestedPlayer,
                            action: mapping.action
                          });
                          
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ selectedPlayerId –≤ teamPlayers
                          const selectedPlayer = teamPlayers.find(p => p.id === mapping.selectedPlayerId);
                          console.log('üîç Selected player in teamPlayers:', selectedPlayer);
                          console.log('üîç Team players count:', teamPlayers.length);
                          const hasConflict = conflicts.ids.has(mapping.selectedPlayerId || '');
                          return (
                          <div key={index} className={`bg-vista-dark/50 border border-vista-secondary/30 rounded-lg p-3 ${hasConflict ? 'ring-1 ring-red-500/60' : ''}`}>
                            <div className="flex items-center justify-between mb-3">
                              <h3 className="text-vista-light font-medium text-base">{mapping.reportName}</h3>
                              <div className="flex items-center gap-2">
                                <Badge className={getMappingBadge(mapping).className}>
                                  {getMappingBadge(mapping).text}
                                </Badge>
                                {hasConflict && (
                                  <Badge className="bg-red-500/20 text-red-400 border-red-500/30" title={`–¢–∞–∫–∂–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è: ${conflicts.byPlayer.get(mapping.selectedPlayerId || '')?.filter(n => n !== mapping.reportName).join(', ')}`}>
                                    –ö–æ–Ω—Ñ–ª–∏–∫—Ç
                                  </Badge>
                                )}
                                <div className="flex items-center gap-1">
                                  {getActionIcon(mapping.action || 'manual', mapping.selectedPlayerId || undefined)}
                                  <span className="text-xs">{getActionText(mapping.action || 'manual', mapping.selectedPlayerId || undefined)}</span>
                                </div>
                              </div>
                            </div>
                    
                    <div className="space-y-3">

                                            {/* –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ */}
                      <div>
                        <p className="text-vista-light/70 text-xs mb-1">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:</p>
                        <Select
                          value={mapping.selectedPlayerId || '__none__'}
                          onValueChange={(value) => handleMappingChange(mapping.rowIndex || 0, value === '__none__' ? null : value, true)}
                        >
                          <SelectTrigger className="bg-vista-dark border-vista-secondary/30 text-vista-light focus:outline-none focus:ring-0">
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã">
                              {mapping.selectedPlayerId && teamPlayers.find(p => p.id === mapping.selectedPlayerId) 
                                ? `${teamPlayers.find(p => p.id === mapping.selectedPlayerId)?.firstName || ''} ${teamPlayers.find(p => p.id === mapping.selectedPlayerId)?.lastName || ''}`.trim()
                                : mapping.suggestedPlayer 
                                  ? `${mapping.suggestedPlayer.firstName || ''} ${mapping.suggestedPlayer.lastName || ''}`.trim()
                                  : "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"
                              }
                            </SelectValue>
                          </SelectTrigger>
                          <SelectContent className="bg-vista-dark border border-vista-secondary/30 text-vista-light shadow-lg">
                            <SelectItem value="__none__">
                              <span className="text-gray-400">–ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>
                            </SelectItem>
                            {teamPlayers.map((player) => (
                              <SelectItem key={player.id} value={player.id}>
                                {`${player.firstName || ''} ${player.lastName || ''}`.trim() || player.id}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                          </div>
                        </div>
                        );
                      })}
                    </div>
                  </div>
                );
              })}
            </div>

              {/* –ü—Ä–µ–≤—å—é –º–∞–ø–ø–∏–Ω–≥–∞ */}
              <div className="mt-4 p-3 rounded-lg border border-vista-secondary/30 bg-vista-dark/30">
                <div className="text-sm font-medium text-vista-light mb-2">–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:</div>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-lg font-bold text-green-400">
                      {mappings.filter(m => m.selectedPlayerId && !isSummaryRow(m.reportName)).length}
                    </div>
                    <div className="text-xs text-vista-light/70">‚úî –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–ø—Ä–æ–º–∞–ø–ª–µ–Ω–æ)</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-orange-400">
                      {mappings.filter(m => !m.selectedPlayerId && !isSummaryRow(m.reportName)).length}
                    </div>
                    <div className="text-xs text-vista-light/70">‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-blue-400">
                      {mappings.filter(m => isSummaryRow(m.reportName)).length}
                    </div>
                    <div className="text-xs text-vista-light/70">üõà –°–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏</div>
                  </div>
                </div>
                
                {mappings.filter(m => m.selectedPlayerId && !isSummaryRow(m.reportName)).length === 0 && (
                  <div className="mt-2 text-sm text-red-400">
                    ‚ö†Ô∏è –ù—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                  </div>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <div className="flex justify-end gap-2 pt-4 border-t border-vista-secondary/30">
                <Button
                  type="button"
                  variant="outline"
                  className="bg-transparent border border-vista-error/50 text-vista-error hover:bg-vista-error/10 h-9 px-3 font-normal"
                  onClick={onClose}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  type="button"
                  className="bg-transparent border border-vista-primary/40 text-vista-primary hover:bg-vista-primary/15 h-9 px-3 font-normal"
                  onClick={handleConfirmAll}
                  disabled={loading || conflicts.ids.size > 0 || mappings.filter(m => m.selectedPlayerId && !isSummaryRow(m.reportName)).length === 0}
                  title={
                    conflicts.ids.size > 0 ? '–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π' : 
                    mappings.filter(m => m.selectedPlayerId && !isSummaryRow(m.reportName)).length === 0 ? '–ù—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞' : ''
                  }
                >
                  {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 
                   conflicts.ids.size > 0 ? '–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π' : 
                   mappings.filter(m => m.selectedPlayerId && !isSummaryRow(m.reportName)).length === 0 ? '–ù—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞' : 
                   '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                </Button>
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
} 