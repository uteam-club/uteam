#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–∫—Å–∞ –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏–∏ GPS-–æ—Ç—á—ë—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ GPS-—Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç,
 * —á—Ç–æ canonical.rows —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
 */

const { buildCanonColumns, mapRowsToCanonical } = require('./src/services/canon.mapper.ts');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∫—Å–∞ –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏–∏ GPS-–æ—Ç—á—ë—Ç–æ–≤\n');

// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–æ–ª–æ–Ω–æ–∫
const profile = {
  id: 'test-profile',
  columnMapping: [
    {
      type: 'column',
      name: 'Total Distance',
      mappedColumn: '–î–∏—Å—Ç–∞–Ω—Ü–∏—è',
      canonicalKey: 'total_distance_m',
      isVisible: true,
      order: 1
    },
    {
      type: 'column',
      name: 'Max Speed',
      mappedColumn: 'Max Speed (km/h)',
      canonicalKey: 'max_speed_ms',
      isVisible: true,
      order: 2
    },
    {
      type: 'column',
      name: 'HSR Percentage',
      mappedColumn: 'HSR%',
      canonicalKey: 'hsr_ratio',
      isVisible: true,
      order: 3
    }
  ]
};

// –°–∏–º—É–ª–∏—Ä—É–µ–º rawRows —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ —Ñ–∞–π–ª–∞)
const rawRows = [
  {
    'name': '–ò–≥—Ä–æ–∫ 1',
    '–î–∏—Å—Ç–∞–Ω—Ü–∏—è': '12345',
    'Max Speed (km/h)': '32.4',
    'HSR%': '8.5'
  },
  {
    'name': '–ò–≥—Ä–æ–∫ 2',
    '–î–∏—Å—Ç–∞–Ω—Ü–∏—è': '9800',
    'Max Speed (km/h)': '34.2',
    'HSR%': '12.1'
  }
];

console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å:');
console.log('  - –ö–æ–ª–æ–Ω–æ–∫ –≤ –º–∞–ø–ø–∏–Ω–≥–µ:', profile.columnMapping.length);
profile.columnMapping.forEach(col => {
  console.log(`    ‚Ä¢ ${col.mappedColumn} ‚Üí ${col.canonicalKey}`);
});

console.log('\nüìä RawRows (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏):');
console.log('  - –°—Ç—Ä–æ–∫:', rawRows.length);
console.log('  - –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.keys(rawRows[0]));

// –°—Ç—Ä–æ–∏–º canonical –∫–æ–ª–æ–Ω–∫–∏
const canonColumns = buildCanonColumns(profile.columnMapping);
console.log('\nüîß Canonical –∫–æ–ª–æ–Ω–∫–∏:');
console.log('  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', canonColumns.length);
canonColumns.forEach(col => {
  console.log(`    ‚Ä¢ ${col.sourceHeader} ‚Üí ${col.canonicalKey} (${col.dimension})`);
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫ rawRows
const { rows: canonicalRows, meta } = mapRowsToCanonical(rawRows, canonColumns);

console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏–∏:');
console.log('  - Canonical —Å—Ç—Ä–æ–∫:', canonicalRows.length);
console.log('  - –í–µ—Ä—Å–∏—è:', meta.canonVersion);
console.log('  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', meta.warnings.length);

if (canonicalRows.length > 0) {
  console.log('\nüìà –ü–µ—Ä–≤–∞—è canonical —Å—Ç—Ä–æ–∫–∞:');
  const firstRow = canonicalRows[0];
  Object.entries(firstRow).forEach(([key, value]) => {
    console.log(`    ‚Ä¢ ${key}: ${value}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π:');
  console.log(`  - –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${rawRows[0]['–î–∏—Å—Ç–∞–Ω—Ü–∏—è']} ‚Üí ${firstRow.total_distance_m} –º`);
  console.log(`  - –°–∫–æ—Ä–æ—Å—Ç—å: ${rawRows[0]['Max Speed (km/h)']} –∫–º/—á ‚Üí ${firstRow.max_speed_ms} –º/—Å`);
  console.log(`  - HSR: ${rawRows[0]['HSR%']}% ‚Üí ${firstRow.hsr_ratio} (ratio)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º athlete_name
  console.log(`  - –ò–º—è: ${rawRows[0]['name']} ‚Üí ${firstRow.athlete_name}`);
}

if (meta.warnings.length > 0) {
  console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
  meta.warnings.forEach(warning => {
    console.log(`    ‚Ä¢ ${warning}`);
  });
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
const success = canonicalRows.length > 0 && 
                canonicalRows[0].athlete_name && 
                canonicalRows[0].total_distance_m && 
                canonicalRows[0].max_speed_ms && 
                canonicalRows[0].hsr_ratio;

console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:', success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê');
console.log('   –ö–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏!');
