const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function fixCanonicalData(reportId) {
  console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ canonical –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞: ${reportId}\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á—ë—Ç–µ
    const reportQuery = `
      SELECT 
        id,
        name,
        "createdAt",
        "gpsSystem",
        "profileId",
        "rawData",
        "processedData",
        "profileSnapshot",
        CASE 
          WHEN "profileSnapshot" IS NOT NULL AND "profileSnapshot"->'columns' IS NOT NULL 
          THEN jsonb_array_length("profileSnapshot"->'columns')::text
          ELSE '0'
        END as profileSnapshot_columns_length,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_before
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const reportResult = await pool.query(reportQuery, [reportId]);
    
    if (reportResult.rows.length === 0) {
      console.log('‚ùå –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { success: false, reason: 'Report not found' };
    }

    const report = reportResult.rows[0];
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–∞:');
    console.log(`   ID: ${report.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${report.name}`);
    console.log(`   ProfileSnapshot –∫–æ–ª–æ–Ω–æ–∫: ${report.profilesnapshot_columns_length}`);
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${report.canonical_rows_length_before}`);
    console.log(`   RawData —Å—Ç—Ä–æ–∫: ${report.rawData ? report.rawData.length : 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Å—á—ë—Ç
    if (parseInt(report.profilesnapshot_columns_length) === 0) {
      console.log('‚ö†Ô∏è  ProfileSnapshot –ø—É—Å—Ç - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
      return { success: false, reason: 'Empty profileSnapshot' };
    }

    if (!report.rawData || report.rawData.length === 0) {
      console.log('‚ö†Ô∏è  RawData –ø—É—Å—Ç - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
      return { success: false, reason: 'Empty rawData' };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º rawData
    if (report.rawData && report.rawData.length > 0) {
      console.log('üìÑ RawData:');
      console.log(`   –°—Ç—Ä–æ–∫: ${report.rawData.length}`);
      console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏): ${JSON.stringify(report.rawData[0])}`);
      if (report.rawData.length > 1) {
        console.log(`   –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–∞–Ω–Ω—ã–µ): ${JSON.stringify(report.rawData[1])}`);
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º profileSnapshot
    if (report.profileSnapshot && report.profileSnapshot.columns) {
      console.log('\nüìã ProfileSnapshot columns:');
      report.profileSnapshot.columns.forEach((col, index) => {
        console.log(`   ${index + 1}. ${col.canonicalKey} -> ${col.sourceHeader}`);
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º processedData
    if (report.processedData) {
      console.log('\nüìä ProcessedData:');
      console.log(`   Canonical: ${report.processedData.canonical ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
      if (report.processedData.canonical) {
        console.log(`   Canonical rows: ${report.processedData.canonical.rows ? report.processedData.canonical.rows.length : '–Ω–µ—Ç'}`);
        console.log(`   Canonical columns: ${report.processedData.canonical.columns ? Object.keys(report.processedData.canonical.columns).length : '–Ω–µ—Ç'}`);
      }
      if (report.processedData.players) {
        console.log(`   Players: ${report.processedData.players.length}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º canonical –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ rawData –∏ profileSnapshot
    console.log('\nüîß –°–æ–∑–¥–∞–Ω–∏–µ canonical –¥–∞–Ω–Ω—ã—Ö...');
    
    if (!report.profileSnapshot || !report.profileSnapshot.columns) {
      console.log('‚ùå ProfileSnapshot.columns –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return { success: false, reason: 'Missing profileSnapshot.columns' };
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerMapping = {};
    report.profileSnapshot.columns.forEach(col => {
      if (col.canonicalKey && col.sourceHeader) {
        headerMapping[col.sourceHeader] = col.canonicalKey;
      }
    });

    console.log('üìã –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:');
    Object.entries(headerMapping).forEach(([source, canonical]) => {
      console.log(`   ${source} -> ${canonical}`);
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ rawData
    const columnIndexes = {};
    if (report.rawData && report.rawData.length > 0) {
      const headers = report.rawData[0];
      console.log('üîç –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:');
      headers.forEach((header, index) => {
        console.log(`   ${index}: "${header}"`);
        if (headerMapping[header]) {
          columnIndexes[headerMapping[header]] = index;
          console.log(`     ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${header} -> ${headerMapping[header]}`);
        }
      });
    }

    console.log('\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫:');
    Object.entries(columnIndexes).forEach(([canonical, index]) => {
      console.log(`   ${canonical}: ${index}`);
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    if (Object.keys(columnIndexes).length === 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä—è–º—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏...');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É rawData
      if (report.rawData.length > 1) {
        const firstDataRow = report.rawData[1];
        console.log('üìÑ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', firstDataRow);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        // –°—É–¥—è –ø–æ –¥–∞–Ω–Ω—ã–º, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å: –∏–º—è, –ø–æ–∑–∏—Ü–∏—è, –≤—Ä–µ–º—è, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, ...
        console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
        firstDataRow.forEach((value, index) => {
          console.log(`   ${index}: ${value} (${typeof value})`);
        });
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        // athlete_name - –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (—Å—Ç—Ä–æ–∫–∞)
        // minutes_played - –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
        // total_distance_m - —á–∏—Å–ª–æ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è)
        // hsr_ratio - –ø—Ä–æ—Ü–µ–Ω—Ç (—á–∏—Å–ª–æ)
        // max_speed_kmh - —Å–∫–æ—Ä–æ—Å—Ç—å (—á–∏—Å–ª–æ)
        
        const dataMapping = {};
        firstDataRow.forEach((value, index) => {
          if (typeof value === 'string') {
            // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
            if (value.match(/^\d{1,2}:\d{2}:\d{2}$/)) {
              dataMapping.minutes_played = index;
              console.log(`   ‚è∞ –í—Ä–µ–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}: ${value}`);
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è (–Ω–µ —á–∏—Å–ª–æ –∏ –Ω–µ –≤—Ä–µ–º—è)
            else if (!value.match(/^\d+$/) && !value.match(/^\d+\.\d+$/)) {
              dataMapping.athlete_name = index;
              console.log(`   üë§ –ò–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}: ${value}`);
            }
          } else if (typeof value === 'number') {
            // –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
            if (value > 1000) {
              dataMapping.total_distance_m = index;
              console.log(`   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}: ${value}`);
            }
            // –ü—Ä–æ—Ü–µ–Ω—Ç—ã - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ hsr_ratio
            else if (value <= 100 && value > 0) {
              dataMapping.hsr_ratio = index;
              console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}: ${value}`);
            }
            // –°–∫–æ—Ä–æ—Å—Ç—å - —Å—Ä–µ–¥–Ω–∏–µ —á–∏—Å–ª–∞
            else if (value > 100 && value <= 1000) {
              dataMapping.max_speed_kmh = index;
              console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}: ${value}`);
            }
          }
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        Object.entries(dataMapping).forEach(([canonical, index]) => {
          columnIndexes[canonical] = index;
          console.log(`   ‚úÖ ${canonical}: ${index}`);
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º canonical —Å—Ç—Ä–æ–∫–∏
    const canonicalRows = [];
    if (report.rawData && report.rawData.length > 1) {
      for (let i = 1; i < report.rawData.length; i++) {
        const row = report.rawData[i];
        const canonicalRow = {};
        
        Object.entries(columnIndexes).forEach(([canonicalKey, index]) => {
          if (index < row.length) {
            let value = row[index];
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if (canonicalKey === 'athlete_name') {
              canonicalRow[canonicalKey] = String(value || '');
            } else if (canonicalKey === 'minutes_played') {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
              if (typeof value === 'string' && value.includes(':')) {
                const parts = value.split(':');
                const hours = parseInt(parts[0]) || 0;
                const minutes = parseInt(parts[1]) || 0;
                const seconds = parseInt(parts[2]) || 0;
                canonicalRow[canonicalKey] = hours * 60 + minutes + seconds / 60;
              } else {
                canonicalRow[canonicalKey] = parseFloat(value) || 0;
              }
            } else {
              canonicalRow[canonicalKey] = parseFloat(value) || 0;
            }
          }
        });
        
        canonicalRows.push(canonicalRow);
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${canonicalRows.length} canonical —Å—Ç—Ä–æ–∫`);

    if (canonicalRows.length > 0) {
      console.log('üìÑ –ü–µ—Ä–≤–∞—è canonical —Å—Ç—Ä–æ–∫–∞:');
      console.log(JSON.stringify(canonicalRows[0], null, 2));
    }

    // –°–æ–∑–¥–∞–µ–º canonical —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const canonicalData = {
      rows: canonicalRows,
      columns: {},
      metadata: {
        generated_at: new Date().toISOString(),
        source: 'manual_fix',
        total_rows: canonicalRows.length
      }
    };

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è canonical
    report.profileSnapshot.columns.forEach(col => {
      if (col.canonicalKey) {
        canonicalData.columns[col.canonicalKey] = {
          type: col.dataType || 'string',
          source: col.sourceHeader,
          canonicalKey: col.canonicalKey
        };
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º processedData
    const updatedProcessedData = {
      ...report.processedData,
      canonical: canonicalData
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...');
    const updateQuery = `
      UPDATE public."GpsReport"
      SET 
        "processedData" = $1,
        "isProcessed" = true,
        "updatedAt" = NOW()
      WHERE id = $2
    `;
    
    await pool.query(updateQuery, [JSON.stringify(updatedProcessedData), reportId]);
    console.log('‚úÖ –û—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const afterQuery = `
      SELECT 
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_after
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const afterResult = await pool.query(afterQuery, [reportId]);
    const reportAfter = afterResult.rows[0];

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${reportAfter.canonical_rows_length_after}`);

    const success = parseInt(reportAfter.canonical_rows_length_after) > 0;
    
    if (success) {
      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }

    return {
      success,
      before: {
        profileSnapshotColumns: parseInt(report.profilesnapshot_columns_length),
        canonicalRows: parseInt(report.canonical_rows_length_before)
      },
      after: {
        canonicalRows: parseInt(reportAfter.canonical_rows_length_after)
      },
      canonicalData: canonicalData
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    return { success: false, reason: error.message };
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
const reportId = process.argv[2];
if (!reportId) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞: node scripts/gps-fix-canonical.cjs <reportId>');
  process.exit(1);
}

fixCanonicalData(reportId).then(result => {
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  console.log(JSON.stringify(result, null, 2));
  process.exit(result.success ? 0 : 1);
}).catch(console.error);
