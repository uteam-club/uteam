const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
const pool = new Pool({
  host: process.env.DATABASE_HOST || 'localhost',
  port: process.env.DATABASE_PORT || 5432,
  database: process.env.DATABASE_NAME || 'uteam',
  user: process.env.DATABASE_USER || 'postgres',
  password: process.env.DATABASE_PASSWORD || 'password',
});

async function checkGpsReports() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º GPS –æ—Ç—á–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsResult = await pool.query(`
      SELECT 
        COUNT(*) as total_reports,
        COUNT(CASE WHEN "eventType" = 'TRAINING' THEN 1 END) as training_reports,
        COUNT(CASE WHEN "eventType" = 'MATCH' THEN 1 END) as match_reports,
        COUNT(CASE WHEN "isProcessed" = true THEN 1 END) as processed_reports,
        COUNT(CASE WHEN "isProcessed" = false THEN 1 END) as unprocessed_reports
      FROM "GpsReport"
    `);

    const stats = statsResult.rows[0];
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: ${stats.total_reports}`);
    console.log(`   –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${stats.training_reports}`);
    console.log(`   –ú–∞—Ç—á–µ–π: ${stats.match_reports}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed_reports}`);
    console.log(`   –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.unprocessed_reports}\n`);

    if (stats.total_reports === 0) {
      console.log('‚ùå GPS –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–∞—Ö
    const reportsResult = await pool.query(`
      SELECT 
        gr."id",
        gr."name",
        gr."fileName",
        gr."eventType",
        gr."createdAt",
        gr."updatedAt",
        gr."isProcessed",
        tm."name" as team_name,
        CASE 
          WHEN gr."eventType" = 'TRAINING' THEN t."title"
          WHEN gr."eventType" = 'MATCH' THEN CONCAT(m."opponentName", ' (', m."teamGoals", ':', m."opponentGoals", ')')
          ELSE 'Unknown'
        END as event_info,
        CASE 
          WHEN gr."eventType" = 'TRAINING' THEN t."date"
          WHEN gr."eventType" = 'MATCH' THEN m."date"
          ELSE NULL
        END as event_date
      FROM "GpsReport" gr
      LEFT JOIN "Team" tm ON gr."teamId" = tm."id"
      LEFT JOIN "Training" t ON gr."eventId" = t."id" AND gr."eventType" = 'TRAINING'
      LEFT JOIN "Match" m ON gr."eventId" = m."id" AND gr."eventType" = 'MATCH'
      ORDER BY gr."createdAt" DESC
    `);

    console.log('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPS –æ—Ç—á–µ—Ç–∞—Ö:');
    console.log('‚îÄ'.repeat(120));
    
    reportsResult.rows.forEach((row, index) => {
      const date = new Date(row.createdAt).toLocaleDateString('ru-RU');
      const eventDate = row.event_date ? new Date(row.event_date).toLocaleDateString('ru-RU') : 'N/A';
      const status = row.isProcessed ? '‚úÖ' : '‚è≥';
      
      console.log(`${index + 1}. ${status} ${row.name}`);
      console.log(`   –§–∞–π–ª: ${row.fileName}`);
      console.log(`   –¢–∏–ø: ${row.eventType === 'TRAINING' ? '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' : '–ú–∞—Ç—á'}`);
      console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${row.team_name || 'N/A'}`);
      console.log(`   –°–æ–±—ã—Ç–∏–µ: ${row.event_info || 'N/A'}`);
      console.log(`   –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: ${eventDate}`);
      console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω: ${date}`);
      console.log('');
    });

    // –û—Ç—á–µ—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyResult = await pool.query(`
      SELECT 
        DATE_TRUNC('month', gr."createdAt") as month,
        COUNT(*) as reports_count,
        COUNT(CASE WHEN "eventType" = 'TRAINING' THEN 1 END) as training_count,
        COUNT(CASE WHEN "eventType" = 'MATCH' THEN 1 END) as match_count
      FROM "GpsReport" gr
      GROUP BY DATE_TRUNC('month', gr."createdAt")
      ORDER BY month DESC
    `);

    console.log('üìÖ –û—Ç—á–µ—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º:');
    console.log('‚îÄ'.repeat(50));
    
    monthlyResult.rows.forEach(row => {
      const month = new Date(row.month).toLocaleDateString('ru-RU', { 
        year: 'numeric', 
        month: 'long' 
      });
      console.log(`${month}: ${row.reports_count} –æ—Ç—á–µ—Ç–æ–≤ (${row.training_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, ${row.match_count} –º–∞—Ç—á–µ–π)`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GPS –æ—Ç—á–µ—Ç–æ–≤:', error);
  } finally {
    await pool.end();
    process.exit(0);
  }
}

checkGpsReports(); 