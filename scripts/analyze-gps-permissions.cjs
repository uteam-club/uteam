const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

async function analyzeGpsPermissions() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∏—Ö —Å–≤—è–∑–∏ —Å —Ä–æ–ª—è–º–∏...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –∏—Ö ID
    const permissionsResult = await pool.query(`
      SELECT id, code, name, category 
      FROM "GpsPermission" 
      ORDER BY category, name
    `);
    
    console.log('üìã GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:');
    permissionsResult.rows.forEach(perm => {
      console.log(`  ${perm.id}: ${perm.code} - ${perm.name} (${perm.category})`);
    });
    
    console.log('\nüë• GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º:');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'MEMBER', 'SCOUT', 'DOCTOR', 'DIRECTOR'];
    
    for (const role of roles) {
      console.log(`\nüî∏ –†–æ–ª—å: ${role}`);
      
      const rolePermissionsResult = await pool.query(`
        SELECT 
          rp."permissionId",
          rp.allowed,
          p.code,
          p.name,
          p.category
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1
        ORDER BY p.category, p.name
      `, [role]);
      
      if (rolePermissionsResult.rows.length === 0) {
        console.log('  ‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
        continue;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const byCategory = {};
      rolePermissionsResult.rows.forEach(rp => {
        if (!byCategory[rp.category]) {
          byCategory[rp.category] = [];
        }
        byCategory[rp.category].push(rp);
      });
      
      Object.keys(byCategory).forEach(category => {
        console.log(`  üìÅ ${category}:`);
        byCategory[category].forEach(rp => {
          const status = rp.allowed ? '‚úÖ' : '‚ùå';
          console.log(`    ${status} ${rp.code} - ${rp.name}`);
        });
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "gps.profiles.delete" –¥–ª—è —Ä–æ–ª–∏ COACH
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "gps.profiles.delete" –¥–ª—è —Ä–æ–ª–∏ COACH:');
    
    const specificCheck = await pool.query(`
      SELECT 
        rp."permissionId",
        rp.allowed,
        p.code,
        p.name
      FROM "GpsRolePermission" rp
      JOIN "GpsPermission" p ON rp."permissionId" = p.id
      WHERE rp.role = 'COACH' AND p.code = 'gps.profiles.delete'
    `);
    
    if (specificCheck.rows.length > 0) {
      const perm = specificCheck.rows[0];
      console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${perm.code} - ${perm.name} (${perm.allowed ? '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' : '–∑–∞–ø—Ä–µ—â–µ–Ω–æ'})`);
    } else {
      console.log('  ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ gps.profiles.delete –ù–ï –ù–ê–ô–î–ï–ù–û –¥–ª—è —Ä–æ–ª–∏ COACH');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ gps.profiles.delete
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ gps.profiles.delete:');
    
    const permExists = await pool.query(`
      SELECT id, code, name, category 
      FROM "GpsPermission" 
      WHERE code = 'gps.profiles.delete'
    `);
    
    if (permExists.rows.length > 0) {
      const perm = permExists.rows[0];
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${perm.id} - ${perm.code} - ${perm.name} (${perm.category})`);
    } else {
      console.log('  ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ gps.profiles.delete –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error.message);
  } finally {
    await pool.end();
  }
}

analyzeGpsPermissions();
