import 'dotenv/config';
import { db } from '../src/lib/db';
import { training } from '../src/db/schema/training';
import { eq, and } from 'drizzle-orm';

async function checkGymTrainings() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ GYM –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ç–∏–ø–æ–º GYM
    const gymTrainings = await db
      .select({
        id: training.id,
        title: training.title,
        type: training.type,
        clubId: training.clubId,
        createdAt: training.createdAt
      })
      .from(training)
      .where(eq(training.type, 'GYM'));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ GYM: ${gymTrainings.length}`);
    
    if (gymTrainings.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ GYM:');
      gymTrainings.slice(0, 5).forEach(t => {
        console.log(`  "${t.title}" - clubId: ${t.clubId} - ${t.createdAt}`);
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ clubId
      const clubGroups = gymTrainings.reduce((acc, t) => {
        acc[t.clubId] = (acc[t.clubId] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      console.log('\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GYM —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –∫–ª—É–±–∞–º:');
      Object.entries(clubGroups).forEach(([clubId, count]) => {
        console.log(`  ${clubId}: ${count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—É–± –∏–∑ –ª–æ–≥–æ–≤
    const targetClubId = '0af208e0-aed2-4374-bb67-c38443a46b8a';
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–ª—É–±–∞ ${targetClubId}:`);
    
    const clubTrainings = await db
      .select({
        id: training.id,
        title: training.title,
        type: training.type,
        clubId: training.clubId
      })
      .from(training)
      .where(eq(training.clubId, targetClubId));
    
    console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∫–ª—É–±–µ: ${clubTrainings.length}`);
    
    const clubTypeGroups = clubTrainings.reduce((acc, t) => {
      acc[t.type] = (acc[t.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –≤ –∫–ª—É–±–µ:');
    Object.entries(clubTypeGroups).forEach(([type, count]) => {
      console.log(`  ${type}: ${count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`);
    });
    
    const gymInClub = clubTrainings.filter(t => t.type === 'GYM');
    console.log(`üèãÔ∏è GYM —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∫–ª—É–±–µ: ${gymInClub.length}`);
    
    if (gymInClub.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã GYM —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∫–ª—É–±–µ:');
      gymInClub.slice(0, 3).forEach(t => {
        console.log(`  "${t.title}" - ${t.type}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GYM —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
  } finally {
    process.exit(0);
  }
}

checkGymTrainings();
