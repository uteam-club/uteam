#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Comprehensive Drizzle vs Database Schema Comparison\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PostgreSQL
function getTableStructure(tableName) {
  try {
    const command = `psql "postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt" -c "\\d \\"${tableName}\\""`;
    const output = execSync(command, { encoding: 'utf8' });
    
    const lines = output.split('\n');
    const columns = [];
    let inColumns = false;
    
    for (const line of lines) {
      if (line.includes('Column') && line.includes('Type')) {
        inColumns = true;
        continue;
      }
      if (inColumns && line.trim() && !line.includes('Indexes:') && !line.includes('(')) {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 3) {
          const columnName = parts[0];
          const dataType = parts[1];
          const nullable = parts[2] === 'not' ? 'NOT NULL' : 'NULL';
          const defaultValue = parts.slice(3).join(' ') || null;
          
          columns.push({
            name: columnName,
            type: dataType,
            nullable: nullable,
            default: defaultValue
          });
        }
      }
      if (line.includes('Indexes:')) {
        break;
      }
    }
    
    return columns;
  } catch (error) {
    console.error(`Error getting structure for ${tableName}:`, error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Drizzle —Å—Ö–µ–º—ã
function parseDrizzleSchema(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const columns = [];
    
    // –ò—â–µ–º pgTable –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const tableMatch = content.match(/export const (\w+) = pgTable\('([^']+)',\s*{([^}]+)}/s);
    if (!tableMatch) return { tableName: null, columns: [] };
    
    const tableName = tableMatch[2];
    const tableContent = tableMatch[3];
    
    // –ü–∞—Ä—Å–∏–º –∫–æ–ª–æ–Ω–∫–∏
    const columnMatches = tableContent.matchAll(/(\w+):\s*(\w+)\(['"`]([^'"`]+)['"`]([^)]*)\)/g);
    
    for (const match of columnMatches) {
      const columnName = match[3];
      const columnType = match[2];
      const options = match[4] || '';
      
      const nullable = !options.includes('.notNull()');
      const hasDefault = options.includes('.default');
      
      columns.push({
        name: columnName,
        type: columnType,
        nullable: nullable ? 'NULL' : 'NOT NULL',
        default: hasDefault ? 'HAS_DEFAULT' : null
      });
    }
    
    return { tableName, columns };
  } catch (error) {
    console.error(`Error parsing Drizzle schema ${filePath}:`, error.message);
    return { tableName: null, columns: [] };
  }
}

// –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const tablesToCheck = [
  'GpsReport',
  'GpsReportData', 
  'GpsCanonicalMetric',
  'GpsUnit',
  'GpsColumnMapping',
  'GpsVisualizationProfile',
  'GpsProfileColumn',
  'GpsProfileTeam',
  'GpsDataChangeLog',
  'GpsDataPermissions'
];

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ Drizzle —Å—Ö–µ–º
const drizzleFiles = [
  'src/db/schema/gpsReport.ts',
  'src/db/schema/gpsReportData.ts',
  'src/db/schema/gpsCanonicalMetric.ts',
  'src/db/schema/gpsColumnMapping.ts'
];

console.log('üìä Checking all GPS-related tables...\n');

let totalIssues = 0;
let criticalIssues = 0;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
for (const tableName of tablesToCheck) {
  console.log(`\nüîç Checking table: ${tableName}`);
  console.log('='.repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const dbColumns = getTableStructure(tableName);
  
  if (dbColumns.length === 0) {
    console.log(`‚ùå Table ${tableName} not found in database`);
    criticalIssues++;
    continue;
  }
  
  // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Drizzle
  let drizzleSchema = null;
  for (const file of drizzleFiles) {
    if (fs.existsSync(file)) {
      const schema = parseDrizzleSchema(file);
      if (schema.tableName === tableName) {
        drizzleSchema = schema;
        break;
      }
    }
  }
  
  if (!drizzleSchema) {
    console.log(`‚ùå No Drizzle schema found for ${tableName}`);
    criticalIssues++;
    continue;
  }
  
  console.log(`‚úÖ Found Drizzle schema for ${tableName}`);
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
  const dbColumnNames = new Set(dbColumns.map(col => col.name));
  const drizzleColumnNames = new Set(drizzleSchema.columns.map(col => col.name));
  
  // –ö–æ–ª–æ–Ω–∫–∏ –≤ –ë–î, –Ω–æ –Ω–µ –≤ Drizzle
  const missingInDrizzle = [...dbColumnNames].filter(name => !drizzleColumnNames.has(name));
  if (missingInDrizzle.length > 0) {
    console.log(`‚ùå Missing in Drizzle schema: ${missingInDrizzle.join(', ')}`);
    totalIssues += missingInDrizzle.length;
    criticalIssues += missingInDrizzle.length;
  }
  
  // –ö–æ–ª–æ–Ω–∫–∏ –≤ Drizzle, –Ω–æ –Ω–µ –≤ –ë–î
  const missingInDB = [...drizzleColumnNames].filter(name => !dbColumnNames.has(name));
  if (missingInDB.length > 0) {
    console.log(`‚ùå Missing in database: ${missingInDB.join(', ')}`);
    totalIssues += missingInDB.length;
    criticalIssues += missingInDB.length;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ nullable
  for (const dbCol of dbColumns) {
    const drizzleCol = drizzleSchema.columns.find(col => col.name === dbCol.name);
    if (!drizzleCol) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º nullable
    if (dbCol.nullable !== drizzleCol.nullable) {
      console.log(`‚ö†Ô∏è  ${dbCol.name}: nullable mismatch - DB: ${dbCol.nullable}, Drizzle: ${drizzleCol.nullable}`);
      totalIssues++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const dbType = dbCol.type.toLowerCase();
    const drizzleType = drizzleCol.type.toLowerCase();
    
    if (!dbType.includes(drizzleType) && !drizzleType.includes(dbType)) {
      console.log(`‚ö†Ô∏è  ${dbCol.name}: type mismatch - DB: ${dbCol.type}, Drizzle: ${drizzleCol.type}`);
      totalIssues++;
    }
  }
  
  if (missingInDrizzle.length === 0 && missingInDB.length === 0) {
    console.log(`‚úÖ ${tableName} schema matches perfectly!`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã Drizzle –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
console.log('\n\nüîç Checking Drizzle schema files for syntax errors...\n');

for (const file of drizzleFiles) {
  if (fs.existsSync(file)) {
    try {
      const content = fs.readFileSync(file, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (!content.includes('export const')) {
        console.log(`‚ùå ${file}: Missing export const`);
        totalIssues++;
        criticalIssues++;
      }
      
      if (!content.includes('pgTable')) {
        console.log(`‚ùå ${file}: Missing pgTable`);
        totalIssues++;
        criticalIssues++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
      const openBraces = (content.match(/\{/g) || []).length;
      const closeBraces = (content.match(/\}/g) || []).length;
      if (openBraces !== closeBraces) {
        console.log(`‚ùå ${file}: Unmatched braces - ${openBraces} open, ${closeBraces} close`);
        totalIssues++;
        criticalIssues++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
      const openParens = (content.match(/\(/g) || []).length;
      const closeParens = (content.match(/\)/g) || []).length;
      if (openParens !== closeParens) {
        console.log(`‚ùå ${file}: Unmatched parentheses - ${openParens} open, ${closeParens} close`);
        totalIssues++;
        criticalIssues++;
      }
      
      console.log(`‚úÖ ${file}: Syntax OK`);
      
    } catch (error) {
      console.log(`‚ùå ${file}: Error reading file - ${error.message}`);
      totalIssues++;
      criticalIssues++;
    }
  } else {
    console.log(`‚ùå ${file}: File not found`);
    totalIssues++;
    criticalIssues++;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é
console.log('\n\nüîç Checking TypeScript compilation...\n');

try {
  execSync('npx tsc --noEmit', { stdio: 'pipe' });
  console.log('‚úÖ TypeScript compilation successful');
} catch (error) {
  console.log('‚ùå TypeScript compilation failed:');
  console.log(error.stdout.toString());
  console.log(error.stderr.toString());
  totalIssues++;
  criticalIssues++;
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('\n\nüìä COMPREHENSIVE ANALYSIS SUMMARY');
console.log('='.repeat(50));
console.log(`Total issues found: ${totalIssues}`);
console.log(`Critical issues: ${criticalIssues}`);

if (criticalIssues === 0) {
  console.log('üéâ All schemas are perfectly synchronized!');
} else if (criticalIssues < 5) {
  console.log('‚ö†Ô∏è  Minor schema issues detected - needs attention');
} else {
  console.log('üö® Major schema issues detected - immediate action required');
}

console.log('\nüîß Next steps:');
if (criticalIssues > 0) {
  console.log('1. Fix missing columns in Drizzle schemas');
  console.log('2. Update database to match Drizzle schemas');
  console.log('3. Fix TypeScript compilation errors');
  console.log('4. Re-run this script to verify fixes');
} else {
  console.log('1. All schemas are synchronized');
  console.log('2. System is ready for production');
}
