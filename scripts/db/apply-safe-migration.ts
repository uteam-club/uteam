#!/usr/bin/env ts-node

import { readFileSync } from 'fs';
import { writeFileSync } from 'fs';
import { Client } from 'pg';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π pg-–∫–ª–∏–µ–Ω—Ç –¥–ª—è raw SQL
const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function applySafeMigration() {
  const logFile = 'artifacts/migration-apply.log';
  const log: string[] = [];
  
  function logMessage(message: string) {
    const timestamp = new Date().toISOString();
    const logLine = `[${timestamp}] ${message}`;
    console.log(logLine);
    log.push(logLine);
  }

  try {
    logMessage('üîÑ Starting GPS safe migration...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL environment variable is not set');
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await client.connect();
    logMessage('üîå Connected to database');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º statement_timeout = 0
    await client.query('SET statement_timeout = 0');
    logMessage('‚è±Ô∏è Set statement_timeout = 0');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connectionInfo = await client.query(`
      SELECT current_database(), current_schema(), version()
    `);
    logMessage(`üìä Database: ${connectionInfo.rows[0].current_database}`);
    logMessage(`üìä Schema: ${connectionInfo.rows[0].current_schema}`);
    logMessage(`üìä PostgreSQL version: ${connectionInfo.rows[0].version.split(' ')[0]}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const sqlOperations = [
      'ALTER TABLE "GpsReport" ADD COLUMN IF NOT EXISTS "profileSnapshot" jsonb;',
      'ALTER TABLE "GpsReport" ADD COLUMN IF NOT EXISTS "canonVersion" text;',
      'ALTER TABLE "GpsReport" ADD COLUMN IF NOT EXISTS "importMeta" jsonb;',
      'ALTER TABLE "GpsReport" ALTER COLUMN "importMeta" SET DEFAULT \'{}\'::jsonb;',
      'CREATE INDEX IF NOT EXISTS "idx_GpsReport_profileId" ON "GpsReport" ("profileId");'
    ];
    
    logMessage('üîß Starting transaction...');
    await client.query('BEGIN');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < sqlOperations.length; i++) {
      const sql = sqlOperations[i];
      const operationName = [
        'Add profileSnapshot column',
        'Add canonVersion column', 
        'Add importMeta column',
        'Set importMeta default',
        'Create profileId index'
      ][i];
      
      logMessage(`üîß Step ${i + 1}/5: ${operationName}`);
      logMessage(`üìù SQL: ${sql}`);
      
      try {
        await client.query(sql);
        logMessage(`‚úÖ Step ${i + 1} completed successfully`);
      } catch (error) {
        logMessage(`‚ùå Step ${i + 1} failed: ${error}`);
        await client.query('ROLLBACK');
        throw new Error(`Migration failed at step ${i + 1}: ${error}`);
      }
    }
    
    // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');
    logMessage('‚úÖ Transaction committed successfully');
    logMessage('üéâ All GPS columns and index added safely');
    
  } catch (error) {
    const errorMsg = `‚ùå Migration failed: ${error}`;
    logMessage(errorMsg);
    console.error(errorMsg);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.end();
    logMessage('üîå Database connection closed');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    writeFileSync(logFile, log.join('\n'));
    logMessage(`üìã Log saved to: ${logFile}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
applySafeMigration()
  .then(() => {
    console.log('üéØ Migration script completed');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Migration script failed:', error);
    process.exit(1);
  });