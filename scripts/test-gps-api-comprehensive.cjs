const fetch = require('node-fetch');

async function testGpsApiComprehensive() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é GPS API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...\n');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º API GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é /api/gps/permissions...');
    try {
      const response = await fetch(`${baseUrl}/api/gps/permissions`);
      const data = await response.json();
      
      if (response.ok && Array.isArray(data)) {
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${data.length}`);
        console.log(`   üìã –ü–µ—Ä–≤—ã–µ 3 —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:`);
        data.slice(0, 3).forEach(perm => {
          console.log(`      - ${perm.code}: ${perm.name} (${perm.category})`);
        });
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${JSON.stringify(data)}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–æ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é /api/roles...');
    try {
      const response = await fetch(`${baseUrl}/api/roles`);
      const data = await response.json();
      
      if (response.ok && Array.isArray(data)) {
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–æ–ª–µ–π: ${data.length}`);
        console.log(`   üìã –†–æ–ª–∏: ${data.join(', ')}`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${JSON.stringify(data)}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–µ–π...');
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'MEMBER', 'SCOUT', 'DOCTOR', 'DIRECTOR'];
    
    for (const role of roles) {
      try {
        const response = await fetch(`${baseUrl}/api/gps/roles/${role}/permissions`);
        const data = await response.json();
        
        if (response.ok && Array.isArray(data)) {
          console.log(`   ‚úÖ ${role}: ${data.length} GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          if (data.length > 0) {
            const sample = data[0];
            const hasRequiredFields = sample.permissionId && sample.allowed !== undefined && sample.code && sample.description;
            if (hasRequiredFields) {
              console.log(`      ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
            } else {
              console.log(`      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(sample)}`);
            }
          }
        } else {
          console.log(`   ‚ùå ${role}: –û—à–∏–±–∫–∞ ${response.status} - ${JSON.stringify(data)}`);
        }
      } catch (error) {
        console.log(`   ‚ùå ${role}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - ${error.message}`);
      }
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (POST –∑–∞–ø—Ä–æ—Å)
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
    try {
      const testPermissions = [
        {
          permissionId: 'test-id',
          allowed: true,
          code: 'gps.test.permission',
          description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
        }
      ];
      
      const response = await fetch(`${baseUrl}/api/gps/roles/COACH/permissions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testPermissions)
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`   ‚úÖ POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${JSON.stringify(data)}`);
      } else {
        const errorData = await response.json();
        console.log(`   ‚ö†Ô∏è  POST –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${response.status}: ${JSON.stringify(errorData)}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');
    const startTime = Date.now();
    
    try {
      const promises = [];
      for (let i = 0; i < 10; i++) {
        promises.push(fetch(`${baseUrl}/api/gps/permissions`));
      }
      
      const responses = await Promise.all(promises);
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      const successfulRequests = responses.filter(r => r.ok).length;
      console.log(`   ‚úÖ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${duration}ms`);
      console.log(`   üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successfulRequests}/10`);
      console.log(`   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${duration / 10}ms –Ω–∞ –∑–∞–ø—Ä–æ—Å`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ API:');
    console.log('   üîç –í—Å–µ GPS API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GPS API:', error.message);
  }
}

testGpsApiComprehensive();
