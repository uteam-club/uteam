const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

// –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
async function hasGpsPermission(userId, clubId, teamId, permissionCode) {
  const client = await pool.connect();
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É
    const [permission] = await client.query(`
      SELECT id FROM "GpsPermission" WHERE code = $1
    `, [permissionCode]);
    
    if (!permission) {
      return { hasPermission: false, source: 'none', details: 'Permission not found' };
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–µ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const [rolePermission] = await client.query(`
      SELECT rp.allowed
      FROM "GpsRolePermission" rp
      WHERE rp.role = $1 AND rp."permissionId" = $2
    `, ['COACH', permission.id]); // –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º COACH

    if (rolePermission && rolePermission.allowed) {
      return { hasPermission: true, source: 'role', details: 'Role-based permission' };
    }

    return { hasPermission: false, source: 'none', details: 'No permission found' };

  } catch (error) {
    console.error('Error checking GPS permission:', error);
    return { hasPermission: false, source: 'none', details: 'Error checking permission' };
  } finally {
    client.release();
  }
}

async function testPermissionFunctions() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...\n');

    // 1. –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
    const testPermissions = [
      'gps.reports.view',
      'gps.reports.create', 
      'gps.reports.edit',
      'gps.reports.delete',
      'gps.profiles.view',
      'gps.profiles.create',
      'gps.data.view',
      'gps.data.edit',
      'gps.admin.manage'
    ];

    for (const permission of testPermissions) {
      const result = await hasGpsPermission('test-user', 'test-club', 'test-team', permission);
      const status = result.hasPermission ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${permission}: ${result.hasPermission} (${result.source})`);
    }

    // 2. –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
    const invalidPermissions = [
      'gps.nonexistent.permission',
      'gps.invalid.code',
      'invalid.permission.code',
      'gps.reports.invalid'
    ];

    for (const permission of invalidPermissions) {
      const result = await hasGpsPermission('test-user', 'test-club', 'test-team', permission);
      const status = !result.hasPermission ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${permission}: ${result.hasPermission} (–æ–∂–∏–¥–∞–ª–æ—Å—å: false)`);
    }

    // 3. –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π');
    const edgeCases = [
      { permission: '', description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
      { permission: null, description: 'null –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { permission: undefined, description: 'undefined –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { permission: '   ', description: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã' },
      { permission: 'gps.', description: '–ù–µ–ø–æ–ª–Ω—ã–π –∫–æ–¥' },
      { permission: '.reports.view', description: '–ö–æ–¥ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞' }
    ];

    for (const testCase of edgeCases) {
      try {
        const result = await hasGpsPermission('test-user', 'test-club', 'test-team', testCase.permission);
        const status = !result.hasPermission ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${testCase.description}: ${result.hasPermission}`);
      } catch (error) {
        console.log(`   ‚úÖ ${testCase.description}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }

    // 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π');
    const iterations = 50;
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
      await hasGpsPermission('test-user', 'test-club', 'test-team', 'gps.reports.view');
    }
    
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / iterations;
    
    console.log(`   ‚úÖ ${iterations} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ ${endTime - startTime}ms`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
    
    if (avgTime > 50) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${avgTime.toFixed(2)}ms > 50ms`);
    }

    // 5. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤');
    const concurrentCalls = 10;
    const promises = [];
    
    for (let i = 0; i < concurrentCalls; i++) {
      promises.push(hasGpsPermission('test-user', 'test-club', 'test-team', 'gps.reports.view'));
    }
    
    const concurrentStartTime = Date.now();
    const results = await Promise.all(promises);
    const concurrentEndTime = Date.now();
    
    const successCount = results.filter(r => r.hasPermission).length;
    console.log(`   ‚úÖ ${concurrentCalls} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∑–∞ ${concurrentEndTime - concurrentStartTime}ms`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}/${concurrentCalls}`);

    // 6. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π');
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'DOCTOR', 'DIRECTOR', 'SCOUT', 'MEMBER'];
    
    for (const role of roles) {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
      const client = await pool.connect();
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count
          FROM "GpsRolePermission" rp
          JOIN "GpsPermission" p ON rp."permissionId" = p.id
          WHERE rp.role = $1 AND rp.allowed = true
        `, [role]);
        
        const permissionCount = parseInt(result.rows[0].count);
        console.log(`   ‚úÖ ${role}: ${permissionCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
        
      } catch (error) {
        console.log(`   ‚ùå ${role}: –û—à–∏–±–∫–∞ - ${error.message}`);
      } finally {
        client.release();
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await pool.end();
  }
}

testPermissionFunctions();
