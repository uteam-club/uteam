#!/usr/bin/env tsx
// scripts/canon/scan-deprecated-usage.ts

import fs from 'fs';
import path from 'path';
import { config } from 'dotenv';
import { Client } from 'pg';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function scanDeprecatedUsage() {
  console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è deprecated –º–µ—Ç—Ä–∏–∫...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    const registryPath = path.resolve('src/canon/metrics.registry.json');
    const registryContent = fs.readFileSync(registryPath, 'utf8');
    const registry = JSON.parse(registryContent);

    // –ù–∞—Ö–æ–¥–∏–º deprecated –º–µ—Ç—Ä–∏–∫–∏
    const deprecatedMetrics = registry.metrics
      .filter((m: any) => m.deprecated === true)
      .map((m: any) => m.key);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ deprecated –º–µ—Ç—Ä–∏–∫: ${deprecatedMetrics.length}`);
    console.log('Deprecated –º–µ—Ç—Ä–∏–∫–∏:', deprecatedMetrics.join(', '));

    // 1. –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–¥
    console.log('\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...');
    const codeResults = await scanCodeForDeprecated(deprecatedMetrics);
    
    // 2. –°–∫–∞–Ω–∏—Ä—É–µ–º –ë–î
    console.log('\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î...');
    const dbResults = await scanDbForDeprecated(deprecatedMetrics);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç—ã
    await saveReports(codeResults, dbResults, deprecatedMetrics);

    console.log('\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log(`üìÑ –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ artifacts/canon-usage/`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await client.end();
  }
}

async function scanCodeForDeprecated(deprecatedMetrics: string[]) {
  const results: Array<{ file: string; line: number; content: string; metric: string }> = [];
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .ts –∏ .tsx —Ñ–∞–π–ª—ã –≤ src
  const srcFiles = await getAllTsFiles('src');
  
  for (const file of srcFiles) {
    try {
      const content = fs.readFileSync(file, 'utf8');
      const lines = content.split('\n');
      
      lines.forEach((line, index) => {
        deprecatedMetrics.forEach(metric => {
          // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–¥–µ
          if (line.includes(metric) && !line.includes('//') && !line.includes('*')) {
            results.push({
              file: file.replace(process.cwd() + '/', ''),
              line: index + 1,
              content: line.trim(),
              metric
            });
          }
        });
      });
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${file}:`, error);
    }
  }
  
  return results;
}

async function getAllTsFiles(dir: string): Promise<string[]> {
  const files: string[] = [];
  
  try {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .next, dist
        if (!['node_modules', '.next', 'dist', 'coverage'].includes(entry.name)) {
          const subFiles = await getAllTsFiles(fullPath);
          files.push(...subFiles);
        }
      } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.tsx'))) {
        files.push(fullPath);
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}:`, error);
  }
  
  return files;
}

async function scanDbForDeprecated(deprecatedMetrics: string[]) {
  const results: any = {
    profiles: [],
    reports: []
  };

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    const profilesResult = await client.query(`
      SELECT id, name, "columnMapping"
      FROM public."GpsProfile"
      WHERE "columnMapping" IS NOT NULL
    `);

    for (const profile of profilesResult.rows) {
      const columnMapping = profile.columnMapping || [];
      const deprecatedInProfile = [];
      
      for (const column of columnMapping) {
        if (column.canonicalKey && deprecatedMetrics.includes(column.canonicalKey)) {
          deprecatedInProfile.push({
            canonicalKey: column.canonicalKey,
            mappedColumn: column.mappedColumn,
            name: column.name
          });
        }
      }
      
      if (deprecatedInProfile.length > 0) {
        results.profiles.push({
          id: profile.id,
          name: profile.name,
          deprecatedColumns: deprecatedInProfile
        });
      }
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á—ë—Ç–æ–≤
    const reportsResult = await client.query(`
      SELECT id, "fileName", "processedData"
      FROM public."GpsReport"
      ORDER BY "createdAt" DESC
      LIMIT 10
    `);

    for (const report of reportsResult.rows) {
      const profileSnapshot = report.processedData?.profileSnapshot;
      const columns = profileSnapshot?.columns || [];
      const deprecatedInReport = [];
      
      for (const column of columns) {
        if (column.canonicalKey && deprecatedMetrics.includes(column.canonicalKey)) {
          deprecatedInReport.push({
            canonicalKey: column.canonicalKey,
            sourceHeader: column.sourceHeader,
            displayName: column.displayName
          });
        }
      }
      
      if (deprecatedInReport.length > 0) {
        results.reports.push({
          id: report.id,
          fileName: report.fileName,
          deprecatedColumns: deprecatedInReport
        });
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î:', error);
  }

  return results;
}

async function saveReports(codeResults: any[], dbResults: any, deprecatedMetrics: string[]) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –ø–æ –∫–æ–¥—É
  const codeReport = [
    '# Deprecated Metrics Usage in Code',
    '',
    `**–î–∞—Ç–∞:** ${new Date().toISOString()}`,
    `**Deprecated –º–µ—Ç—Ä–∏–∫:** ${deprecatedMetrics.length}`,
    `**–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–¥–µ:** ${codeResults.length}`,
    '',
    '## Deprecated –º–µ—Ç—Ä–∏–∫–∏:',
    deprecatedMetrics.map(m => `- ${m}`).join('\n'),
    '',
    '## –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–¥–µ:',
    ''
  ];

  if (codeResults.length === 0) {
    codeReport.push('‚úÖ Deprecated –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ');
  } else {
    codeReport.push('| –§–∞–π–ª | –°—Ç—Ä–æ–∫–∞ | –°–æ–¥–µ—Ä–∂–∏–º–æ–µ | –ú–µ—Ç—Ä–∏–∫–∞ |');
    codeReport.push('|------|--------|------------|---------|');
    
    codeResults.forEach(result => {
      codeReport.push(`| ${result.file} | ${result.line} | \`${result.content}\` | ${result.metric} |`);
    });
  }

  const codeReportPath = path.resolve('artifacts/canon-usage/DEPRECATED_CODE.txt');
  fs.writeFileSync(codeReportPath, codeReport.join('\n'), 'utf8');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –ø–æ –ë–î
  const dbReportPath = path.resolve('artifacts/canon-usage/DEPRECATED_DB.json');
  fs.writeFileSync(dbReportPath, JSON.stringify(dbResults, null, 2), 'utf8');

  console.log(`üìÑ –ö–æ–¥: ${codeResults.length} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
  console.log(`üìÑ –ü—Ä–æ—Ñ–∏–ª–∏: ${dbResults.profiles.length} —Å deprecated –º–µ—Ç—Ä–∏–∫–∞–º–∏`);
  console.log(`üìÑ –û—Ç—á—ë—Ç—ã: ${dbResults.reports.length} —Å deprecated –º–µ—Ç—Ä–∏–∫–∞–º–∏`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
scanDeprecatedUsage();
