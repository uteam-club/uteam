const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testGpsApiEndpoints() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ GPS API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...\n');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç GET /api/gps/permissions');
    try {
      const result = await client.query(`
        SELECT p.code, p.name, p.category, p.description
        FROM "GpsPermission" p
        ORDER BY p.category, p.code
      `);
      
      console.log(`   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${result.rows.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categories = [...new Set(result.rows.map(r => r.category))];
      console.log(`   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length} (${categories.join(', ')})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤
      const codes = result.rows.map(r => r.code);
      const uniqueCodes = [...new Set(codes)];
      console.log(`   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${uniqueCodes.length}/${codes.length}`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–æ–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç GET /api/gps/roles/[role]/permissions');
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'DOCTOR', 'DIRECTOR', 'SCOUT', 'MEMBER'];
    
    for (const role of roles) {
      try {
        const result = await client.query(`
          SELECT rp.role, p.code, p.name, p.category, rp.allowed
          FROM "GpsRolePermission" rp
          JOIN "GpsPermission" p ON rp."permissionId" = p.id
          WHERE rp.role = $1
          ORDER BY p.category, p.code
        `, [role]);
        
        const allowedCount = result.rows.filter(r => r.allowed).length;
        console.log(`   ‚úÖ ${role}: ${allowedCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è allowed = true
        const notAllowed = result.rows.filter(r => !r.allowed);
        if (notAllowed.length > 0) {
          console.log(`   ‚ö†Ô∏è  ${role}: ${notAllowed.length} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å allowed = false`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå ${role}: –û—à–∏–±–∫–∞ - ${error.message}`);
      }
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      const result = await client.query(`
        SELECT p.code, p.name
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1 AND p.category = $2 AND rp.allowed = true
        ORDER BY p.code
      `, ['COACH', 'reports']);
      
      console.log(`   ‚úÖ COACH + reports: ${result.rows.length} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
      result.rows.forEach(row => {
        console.log(`      - ${row.code}: ${row.name}`);
      });
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
    
    const iterations = 100;
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
      await client.query(`
        SELECT rp.allowed
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1 AND p.code = $2
      `, ['COACH', 'gps.reports.create']);
    }
    
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / iterations;
    
    console.log(`   ‚úÖ ${iterations} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${endTime - startTime}ms`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
    
    if (avgTime > 10) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${avgTime.toFixed(2)}ms > 10ms`);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
    
    try {
      const explainResult = await client.query(`
        EXPLAIN (ANALYZE, BUFFERS) 
        SELECT rp.allowed
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1 AND p.code = $2
      `, ['COACH', 'gps.reports.create']);
      
      const plan = explainResult.rows[0]['QUERY PLAN'];
      console.log(`   ‚úÖ –ü–ª–∞–Ω –∑–∞–ø—Ä–æ—Å–∞: ${plan}`);
      
      if (plan.includes('Index Scan')) {
        console.log(`   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è`);
      } else {
        console.log(`   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ EXPLAIN: ${error.message}`);
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const roleCounts = await client.query(`
      SELECT role, COUNT(*) as count
      FROM "GpsRolePermission"
      WHERE allowed = true
      GROUP BY role
      ORDER BY role
    `);
    
    console.log(`   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º:`);
    roleCounts.rows.forEach(row => {
      console.log(`      ${row.role}: ${row.count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç "–≤–∏—Å—è—á–∏—Ö" —Å—Å—ã–ª–æ–∫
    const orphanedPermissions = await client.query(`
      SELECT rp.id, rp.role, rp."permissionId"
      FROM "GpsRolePermission" rp
      LEFT JOIN "GpsPermission" p ON rp."permissionId" = p.id
      WHERE p.id IS NULL
    `);
    
    if (orphanedPermissions.rows.length > 0) {
      console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω—ã –≤–∏—Å—è—á–∏–µ —Å—Å—ã–ª–∫–∏: ${orphanedPermissions.rows.length}`);
    } else {
      console.log(`   ‚úÖ –í–∏—Å—è—á–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

testGpsApiEndpoints();
