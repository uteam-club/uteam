#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

import { db } from '../src/lib/db';
import { rpeSurveyResponse, player, team } from '../src/db/schema';
import { eq, desc, gte, lte, and } from 'drizzle-orm';

async function debugDurationDisplay() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const teams = await db.select().from(team).limit(5);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥`);

    for (const teamRecord of teams) {
      console.log(`\nüèÜ –ö–æ–º–∞–Ω–¥–∞: ${teamRecord.name} (ID: ${teamRecord.id})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const today = new Date();
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      
      for (let i = 0; i < 3; i++) {
        const checkDate = new Date();
        checkDate.setDate(checkDate.getDate() - i);
        const dateStr = checkDate.toISOString().split('T')[0];
        
        console.log(`\nüìÖ –î–∞—Ç–∞: ${dateStr}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (–∫–∞–∫ –≤ API)
        const startDate = new Date(dateStr);
        startDate.setHours(0, 0, 0, 0);
        const endDate = new Date(dateStr);
        endDate.setHours(23, 59, 59, 999);

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã RPE –∑–∞ –¥–µ–Ω—å (–∫–∞–∫ –≤ API)
        const responses = await db.select({
          id: rpeSurveyResponse.id,
          playerId: rpeSurveyResponse.playerId,
          durationMinutes: rpeSurveyResponse.durationMinutes,
          rpeScore: rpeSurveyResponse.rpeScore,
          createdAt: rpeSurveyResponse.createdAt,
        })
          .from(rpeSurveyResponse)
          .leftJoin(player, eq(rpeSurveyResponse.playerId, player.id))
          .where(
            and(
              eq(player.teamId, teamRecord.id),
              gte(rpeSurveyResponse.createdAt, startDate),
              lte(rpeSurveyResponse.createdAt, endDate)
            )
          );

        if (responses.length === 0) {
          console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
          continue;
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–≥–∏–∫—É API
        const individualDurations: Record<string, number> = {};
        let globalDuration: number | null = null;

        const durations = responses
          .map(r => r.durationMinutes)
          .filter(d => d !== null && d !== undefined);

        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${responses.length} –æ—Ç–≤–µ—Ç–æ–≤, ${durations.length} —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é`);
        
        if (durations.length > 0) {
          const uniqueDurations = [...new Set(durations)];
          console.log(`   üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${uniqueDurations.join(', ')}`);
          
          if (uniqueDurations.length === 1) {
            globalDuration = uniqueDurations[0];
            console.log(`   ‚úÖ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${globalDuration} –º–∏–Ω`);
          } else {
            responses.forEach(response => {
              if (response.durationMinutes) {
                individualDurations[response.playerId] = response.durationMinutes;
              }
            });
            console.log(`   üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${Object.keys(individualDurations).length} –∏–≥—Ä–æ–∫–æ–≤`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            Object.entries(individualDurations).slice(0, 3).forEach(([playerId, duration]) => {
              console.log(`     - –ò–≥—Ä–æ–∫ ${playerId}: ${duration} –º–∏–Ω`);
            });
          }
        } else {
          console.log('   ‚ö†Ô∏è  –ù–∏ —É –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        }

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API
        const apiResult = {
          globalDuration,
          individualDurations
        };
        
        console.log(`   üîå API –≤–µ—Ä–Ω–µ—Ç: globalDuration=${apiResult.globalDuration}, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö=${Object.keys(apiResult.individualDurations).length}`);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ
    console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const allDurations = await db
      .select({
        durationMinutes: rpeSurveyResponse.durationMinutes,
        count: rpeSurveyResponse.id
      })
      .from(rpeSurveyResponse)
      .where(gte(rpeSurveyResponse.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

    const durationStats = allDurations.reduce((acc, record) => {
      const duration = record.durationMinutes || 'null';
      acc[duration] = (acc[duration] || 0) + 1;
      return acc;
    }, {} as Record<string | number, number>);

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:');
    Object.entries(durationStats)
      .sort(([, a], [, b]) => b - a)
      .forEach(([duration, count]) => {
        console.log(`   ${duration} –º–∏–Ω: ${count} –∑–∞–ø–∏—Å–µ–π`);
      });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
debugDurationDisplay()
  .then(() => {
    console.log('\nüèÅ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
