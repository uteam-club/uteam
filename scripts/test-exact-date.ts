#!/usr/bin/env tsx

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ —Ç—É –¥–∞—Ç—É –∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
 */

import { db } from '../src/lib/db';
import { rpeSurveyResponse, player, team } from '../src/db/schema';
import { eq, and, gte, lte } from 'drizzle-orm';

async function testExactDate() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –∫–æ–º–∞–Ω–¥—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...');
  
  try {
    // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É FDC Vista
    const fdcVista = await db.select().from(team).where(eq(team.name, 'FDC Vista')).limit(1);
    
    if (fdcVista.length === 0) {
      console.log('‚ùå –ö–æ–º–∞–Ω–¥–∞ FDC Vista –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const teamId = fdcVista[0].id;
    console.log(`üèÜ –ö–æ–º–∞–Ω–¥–∞ FDC Vista –Ω–∞–π–¥–µ–Ω–∞: ${teamId}`);

    // –î–∞—Ç–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: 22.08.2025
    const dateStr = '2025-08-22';
    console.log(`üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É: ${dateStr}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (–∫–∞–∫ –≤ API)
    const startDate = new Date(dateStr);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateStr);
    endDate.setHours(23, 59, 59, 999);

    console.log(`üïê –î–∏–∞–ø–∞–∑–æ–Ω: ${startDate.toISOString()} - ${endDate.toISOString()}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const teamPlayers = await db
      .select({
        id: player.id,
        firstName: player.firstName,
        lastName: player.lastName,
      })
      .from(player)
      .where(eq(player.teamId, teamId));

    console.log(`üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: ${teamPlayers.length}`);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã RPE –∑–∞ —ç—Ç—É –¥–∞—Ç—É
    const responses = await db.select({
      id: rpeSurveyResponse.id,
      playerId: rpeSurveyResponse.playerId,
      durationMinutes: rpeSurveyResponse.durationMinutes,
      rpeScore: rpeSurveyResponse.rpeScore,
      createdAt: rpeSurveyResponse.createdAt,
    })
      .from(rpeSurveyResponse)
      .leftJoin(player, eq(rpeSurveyResponse.playerId, player.id))
      .where(
        and(
          eq(player.teamId, teamId),
          gte(rpeSurveyResponse.createdAt, startDate),
          lte(rpeSurveyResponse.createdAt, endDate)
        )
      );

    console.log(`üìä –û—Ç–≤–µ—Ç–æ–≤ RPE –∑–∞ ${dateStr}: ${responses.length}`);

    if (responses.length === 0) {
      console.log('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ RPE –∑–∞ —ç—Ç—É –¥–∞—Ç—É');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
    console.log('\nüìã –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤:');
    responses.forEach((resp, index) => {
      const playerInfo = teamPlayers.find(p => p.id === resp.playerId);
      const playerName = playerInfo ? `${playerInfo.lastName} ${playerInfo.firstName}` : resp.playerId;
      console.log(`  ${index + 1}. ${playerName}: RPE=${resp.rpeScore}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=${resp.durationMinutes || 'null'} –º–∏–Ω`);
    });

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–≥–∏–∫—É API
    const individualDurations: Record<string, number> = {};
    let globalDuration: number | null = null;

    const durations = responses
      .map(r => r.durationMinutes)
      .filter(d => d !== null && d !== undefined);

    console.log(`\nüî¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: [${durations.join(', ')}]`);

    if (durations.length > 0) {
      const uniqueDurations = [...new Set(durations)];
      console.log(`üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: [${uniqueDurations.join(', ')}]`);
      
      if (uniqueDurations.length === 1) {
        globalDuration = uniqueDurations[0];
        console.log(`‚úÖ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç: ${globalDuration} –º–∏–Ω`);
      } else {
        responses.forEach(response => {
          if (response.durationMinutes) {
            individualDurations[response.playerId] = response.durationMinutes;
          }
        });
        console.log(`üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ${Object.keys(individualDurations).length} –∏–≥—Ä–æ–∫–æ–≤`);
      }
    } else {
      console.log('‚ö†Ô∏è  –ù–∏ —É –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç API
    const apiResult = {
      globalDuration,
      individualDurations
    };

    console.log('\nüîå API /api/surveys/rpe/duration –≤–µ—Ä–Ω–µ—Ç:');
    console.log(`   globalDuration: ${apiResult.globalDuration}`);
    console.log(`   individualDurations: ${JSON.stringify(apiResult.individualDurations, null, 2)}`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    console.log('\nüñ•Ô∏è  –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:');
    teamPlayers.forEach(player => {
      const resp = responses.find(r => r.playerId === player.id);
      if (resp) {
        const playerDuration = apiResult.individualDurations[player.id] || apiResult.globalDuration;
        console.log(`   ${player.lastName} ${player.firstName}: ${playerDuration || '–ù–µ –∑–∞–¥–∞–Ω–æ'} –º–∏–Ω`);
      } else {
        console.log(`   ${player.lastName} ${player.firstName}: –ù–µ –ø—Ä–æ—à–µ–ª –æ–ø—Ä–æ—Å`);
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
testExactDate()
  .then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
