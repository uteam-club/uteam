#!/usr/bin/env tsx

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (70 –º–∏–Ω—É—Ç)
 * —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
 */

import { db } from '../src/lib/db';
import { rpeSurveyResponse } from '../src/db/schema';
import { eq } from 'drizzle-orm';
import fs from 'fs/promises';
import path from 'path';

async function createBackup(records: any[]) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = path.join(process.cwd(), 'backups');
  const backupFile = path.join(backupDir, `rpe-durations-backup-${timestamp}.json`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(backupDir, { recursive: true });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    await fs.writeFile(backupFile, JSON.stringify(records, null, 2));
    
    console.log(`üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupFile}`);
    return backupFile;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
    throw error;
  }
}

async function clearTrainingDurationsSafe() {
  console.log('üõ°Ô∏è  –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç
    const recordsWithDefault70 = await db
      .select()
      .from(rpeSurveyResponse)
      .where(eq(rpeSurveyResponse.durationMinutes, 70));

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${recordsWithDefault70.length} –∑–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç`);

    if (recordsWithDefault70.length === 0) {
      console.log('‚úÖ –ó–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    console.log('\nüíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö...');
    const backupFile = await createBackup(recordsWithDefault70);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
    const groupedByDate = recordsWithDefault70.reduce((acc, record) => {
      const date = record.createdAt.toISOString().split('T')[0];
      acc[date] = (acc[date] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    Object.entries(groupedByDate)
      .sort(([a], [b]) => b.localeCompare(a))
      .slice(0, 10)
      .forEach(([date, count]) => {
        console.log(`  ${date}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∏–≥—Ä–æ–∫–æ–≤
    const uniquePlayers = new Set(recordsWithDefault70.map(r => r.playerId));
    console.log(`üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –∏–≥—Ä–æ–∫–æ–≤: ${uniquePlayers.size}`);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!');
    console.log(`   üìÅ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${backupFile}`);
    console.log('   üîÑ –ë—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ –ø–æ–ª–µ durationMinutes –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
    
    const autoConfirm = process.env.AUTO_CONFIRM === 'true';
    
    if (!autoConfirm) {
      console.log('\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π AUTO_CONFIRM=true');
      console.log('   –ü—Ä–∏–º–µ—Ä: AUTO_CONFIRM=true npm run clear-durations-safe');
      return;
    }

    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const batchSize = 100;
    let processedCount = 0;

    for (let i = 0; i < recordsWithDefault70.length; i += batchSize) {
      const batch = recordsWithDefault70.slice(i, i + batchSize);
      const batchIds = batch.map(r => r.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
      for (const id of batchIds) {
        await db
          .update(rpeSurveyResponse)
          .set({ durationMinutes: null })
          .where(eq(rpeSurveyResponse.id, id));
      }

      processedCount += batch.length;
      console.log(`   ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}/${recordsWithDefault70.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const remainingRecords = await db
      .select({ id: rpeSurveyResponse.id })
      .from(rpeSurveyResponse)
      .where(eq(rpeSurveyResponse.durationMinutes, 70));

    if (remainingRecords.length === 0) {
      console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å ${remainingRecords.length} –∑–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç`);
    }

    console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
    console.log('   1. –¢—Ä–µ–Ω–µ—Ä–∞–º –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    console.log('   2. –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
    console.log(`   3. –§–∞–π–ª –±—ç–∫–∞–ø–∞: ${backupFile}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
clearTrainingDurationsSafe()
  .then(() => {
    console.log('\nüèÅ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
