const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testRealGpsFunctions() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ GPS —Ñ—É–Ω–∫—Ü–∏–∏...\n');

    // 1. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ hasGpsPermission (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ hasGpsPermission');
    
    async function hasGpsPermission(userId, clubId, teamId, permissionCode) {
      try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É
        const permissions = await client.query(`
          SELECT id, code, name, category
          FROM "GpsPermission"
          WHERE code = $1
          LIMIT 1
        `, [permissionCode]);
        
        const permission = permissions.rows[0];
        
        if (!permission) {
          return {
            hasPermission: false,
            source: 'none',
            details: `Permission ${permissionCode} not found`
          };
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–µ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è COACH)
        const rolePermissions = await client.query(`
          SELECT rp.allowed
          FROM "GpsRolePermission" rp
          WHERE rp.role = $1 AND rp."permissionId" = $2
        `, ['COACH', permission.id]);
        
        const rolePermission = rolePermissions.rows[0];
        
        if (rolePermission && rolePermission.allowed) {
          return {
            hasPermission: true,
            source: 'role',
            details: 'Role-based permission'
          };
        }

        return {
          hasPermission: false,
          source: 'none',
          details: 'No permission found'
        };

      } catch (error) {
        console.error('Error checking GPS permission:', error);
        return {
          hasPermission: false,
          source: 'none',
          details: 'Error checking permission'
        };
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const testCases = [
      { permission: 'gps.reports.view', expected: true, description: 'COACH –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã' },
      { permission: 'gps.reports.create', expected: true, description: 'COACH –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã' },
      { permission: 'gps.reports.delete', expected: false, description: 'COACH –ù–ï –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã' },
      { permission: 'gps.profiles.view', expected: true, description: 'COACH –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏' },
      { permission: 'gps.profiles.create', expected: true, description: 'COACH –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏' },
      { permission: 'gps.data.edit', expected: true, description: 'COACH –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ' },
      { permission: 'gps.admin.manage', expected: false, description: 'COACH –ù–ï –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π' },
      { permission: 'gps.nonexistent.permission', expected: false, description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ' }
    ];

    for (const testCase of testCases) {
      const result = await hasGpsPermission('test-user', 'test-club', 'test-team', testCase.permission);
      const status = result.hasPermission === testCase.expected ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${testCase.description}: ${result.hasPermission} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected})`);
    }

    // 2. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π');
    const iterations = 20;
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
      await hasGpsPermission('test-user', 'test-club', 'test-team', 'gps.reports.view');
    }
    
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / iterations;
    
    console.log(`   ‚úÖ ${iterations} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ ${endTime - startTime}ms`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
    
    if (avgTime > 100) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${avgTime.toFixed(2)}ms > 100ms`);
    } else {
      console.log(`   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ`);
    }

    // 3. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π');
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'DOCTOR', 'DIRECTOR', 'SCOUT', 'MEMBER'];
    
    for (const role of roles) {
      const result = await client.query(`
        SELECT COUNT(*) as count
        FROM "GpsRolePermission" rp
        WHERE rp.role = $1 AND rp.allowed = true
      `, [role]);
      
      const permissionCount = parseInt(result.rows[0].count);
      console.log(`   ‚úÖ ${role}: ${permissionCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
    }

    // 4. –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const complexResult = await client.query(`
      SELECT p.code, p.name, p.category
      FROM "GpsRolePermission" rp
      JOIN "GpsPermission" p ON rp."permissionId" = p.id
      WHERE rp.role = $1 AND p.category = $2 AND rp.allowed = true
      ORDER BY p.code
    `, ['COACH', 'reports']);
    
    console.log(`   ‚úÖ COACH + reports: ${complexResult.rows.length} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
    complexResult.rows.forEach(row => {
      console.log(`      - ${row.code}: ${row.name}`);
    });

    // 5. –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
    
    const edgeCases = [
      { permission: '', description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
      { permission: 'gps.', description: '–ù–µ–ø–æ–ª–Ω—ã–π –∫–æ–¥' },
      { permission: '.reports.view', description: '–ö–æ–¥ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞' },
      { permission: 'gps.reports.', description: '–ö–æ–¥ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞' }
    ];

    for (const testCase of edgeCases) {
      const result = await hasGpsPermission('test-user', 'test-club', 'test-team', testCase.permission);
      const status = !result.hasPermission ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${testCase.description}: ${result.hasPermission} (–æ–∂–∏–¥–∞–ª–æ—Å—å: false)`);
    }

    // 6. –¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã
    const invalidCodes = await client.query(`
      SELECT code FROM "GpsPermission" 
      WHERE code NOT LIKE 'gps.%' OR code = 'gps.' OR code LIKE 'gps..%'
    `);
    
    if (invalidCodes.rows.length > 0) {
      console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã: ${invalidCodes.rows.length}`);
      invalidCodes.rows.forEach(row => {
        console.log(`      - ${row.code}`);
      });
    } else {
      console.log(`   ‚úÖ –í—Å–µ –∫–æ–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–æ–≤
    const duplicateCodes = await client.query(`
      SELECT code, COUNT(*) as count
      FROM "GpsPermission"
      GROUP BY code
      HAVING COUNT(*) > 1
    `);
    
    if (duplicateCodes.rows.length > 0) {
      console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–æ–≤: ${duplicateCodes.rows.length}`);
    } else {
      console.log(`   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–¥–æ–≤ –Ω–µ—Ç`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö GPS —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

testRealGpsFunctions();
