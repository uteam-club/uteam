const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testEdgeCases() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ edge cases...\n');

    // 1. –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π');
    
    const extremeValues = [
      { value: '', description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
      { value: 'a'.repeat(1000), description: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (1000 —Å–∏–º–≤–æ–ª–æ–≤)' },
      { value: 'a'.repeat(10000), description: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (10000 —Å–∏–º–≤–æ–ª–æ–≤)' },
      { value: '!@#$%^&*()_+-=[]{}|;:\'",./<>?', description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã' },
      { value: 'üöÄüéØüíªüî•', description: '–≠–º–æ–¥–∑–∏' },
      { value: 'gps.reports.view\n\r\t', description: '–°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏' },
      { value: 'gps.reports.view  ', description: '–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ' },
      { value: '  gps.reports.view', description: '–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ' }
    ];

    for (const testCase of extremeValues) {
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count
          FROM "GpsPermission"
          WHERE code = $1
        `, [testCase.value]);
        
        const count = parseInt(result.rows[0].count);
        console.log(`   ‚úÖ ${testCase.description}: ${count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: 0)`);
        
      } catch (error) {
        console.log(`   ‚úÖ ${testCase.description}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }

    // 2. –¢–µ—Å—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π');
    
    const sqlInjectionTests = [
      { value: "'; DROP TABLE \"GpsPermission\"; --", description: 'DROP TABLE –∏–Ω—ä–µ–∫—Ü–∏—è' },
      { value: "'; DELETE FROM \"GpsPermission\"; --", description: 'DELETE –∏–Ω—ä–µ–∫—Ü–∏—è' },
      { value: "'; UPDATE \"GpsPermission\" SET code = 'hacked'; --", description: 'UPDATE –∏–Ω—ä–µ–∫—Ü–∏—è' },
      { value: "' OR '1'='1", description: 'OR –∏–Ω—ä–µ–∫—Ü–∏—è' },
      { value: "' UNION SELECT * FROM \"GpsPermission\" --", description: 'UNION –∏–Ω—ä–µ–∫—Ü–∏—è' },
      { value: "'; INSERT INTO \"GpsPermission\" VALUES ('hacked', 'hacked', 'hacked', 'hacked'); --", description: 'INSERT –∏–Ω—ä–µ–∫—Ü–∏—è' }
    ];

    for (const testCase of sqlInjectionTests) {
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count
          FROM "GpsPermission"
          WHERE code = $1
        `, [testCase.value]);
        
        const count = parseInt(result.rows[0].count);
        console.log(`   ‚úÖ ${testCase.description}: ${count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: 0)`);
        
      } catch (error) {
        console.log(`   ‚úÖ ${testCase.description}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }

    // 3. –¢–µ—Å—Ç null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏–π');
    
    const nullTests = [
      { value: null, description: 'null –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { value: undefined, description: 'undefined –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { value: NaN, description: 'NaN –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { value: Infinity, description: 'Infinity –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { value: -Infinity, description: '-Infinity –∑–Ω–∞—á–µ–Ω–∏–µ' }
    ];

    for (const testCase of nullTests) {
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count
          FROM "GpsPermission"
          WHERE code = $1
        `, [testCase.value]);
        
        const count = parseInt(result.rows[0].count);
        console.log(`   ‚úÖ ${testCase.description}: ${count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: 0)`);
        
      } catch (error) {
        console.log(`   ‚úÖ ${testCase.description}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }

    // 4. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    
    const concurrentOperations = 10;
    const promises = [];
    
    for (let i = 0; i < concurrentOperations; i++) {
      promises.push(
        client.query(`
          SELECT rp.allowed
          FROM "GpsRolePermission" rp
          JOIN "GpsPermission" p ON rp."permissionId" = p.id
          WHERE rp.role = $1 AND p.code = $2
        `, ['COACH', 'gps.reports.view'])
      );
    }
    
    const startTime = Date.now();
    const results = await Promise.all(promises);
    const endTime = Date.now();
    
    const successCount = results.filter(r => r.rows.length > 0).length;
    console.log(`   ‚úÖ ${concurrentOperations} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${endTime - startTime}ms`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}/${concurrentOperations}`);

    // 5. –¢–µ—Å—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
    await client.query(`
      CREATE TEMP TABLE test_large_data AS
      SELECT 
        generate_series(1, 1000) as id,
        'test_role_' || generate_series(1, 1000) as role,
        'test_permission_' || generate_series(1, 1000) as permission_code
    `);
    
    const largeDataStartTime = Date.now();
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
    const largeDataResult = await client.query(`
      SELECT COUNT(*) as count
      FROM test_large_data
      WHERE role LIKE 'test_role_%'
    `);
    
    const largeDataEndTime = Date.now();
    const largeDataTime = largeDataEndTime - largeDataStartTime;
    
    console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å –∫ 1000 –∑–∞–ø–∏—Å—è–º –∑–∞ ${largeDataTime}ms`);
    
    if (largeDataTime > 1000) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${largeDataTime}ms > 1000ms`);
    } else {
      console.log(`   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –Ω–æ—Ä–º–µ`);
    }

    // 6. –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    try {
      await client.query('BEGIN');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await client.query(`
        INSERT INTO "GpsPermission" (code, name, description, category)
        VALUES ($1, $2, $3, $4)
      `, ['test.transaction', 'Test Transaction', 'Test Description', 'test']);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
      const checkResult = await client.query(`
        SELECT COUNT(*) as count
        FROM "GpsPermission"
        WHERE code = 'test.transaction'
      `);
      
      if (parseInt(checkResult.rows[0].count) === 1) {
        console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
      } else {
        console.log(`   ‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
      }
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('ROLLBACK');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å
      const rollbackResult = await client.query(`
        SELECT COUNT(*) as count
        FROM "GpsPermission"
        WHERE code = 'test.transaction'
      `);
      
      if (parseInt(rollbackResult.rows[0].count) === 0) {
        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      } else {
        console.log(`   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
    }

    // 7. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏');
    
    const indexTests = [
      { query: 'SELECT * FROM "GpsPermission" WHERE code = $1', params: ['gps.reports.view'], description: '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É' },
      { query: 'SELECT * FROM "GpsPermission" WHERE category = $1', params: ['reports'], description: '–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
      { query: 'SELECT * FROM "GpsRolePermission" WHERE role = $1', params: ['COACH'], description: '–ü–æ–∏—Å–∫ –ø–æ —Ä–æ–ª–∏' }
    ];

    for (const testCase of indexTests) {
      const iterations = 100;
      const startTime = Date.now();
      
      for (let i = 0; i < iterations; i++) {
        await client.query(testCase.query, testCase.params);
      }
      
      const endTime = Date.now();
      const avgTime = (endTime - startTime) / iterations;
      
      console.log(`   ‚úÖ ${testCase.description}: ${avgTime.toFixed(2)}ms (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);
      
      if (avgTime > 50) {
        console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${avgTime.toFixed(2)}ms > 50ms`);
      }
    }

    // 8. –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å —Ä–æ–ª—è–º–∏
    console.log('\n8Ô∏è‚É£ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å —Ä–æ–ª—è–º–∏');
    
    const roleEdgeCases = [
      { role: '', description: '–ü—É—Å—Ç–∞—è —Ä–æ–ª—å' },
      { role: 'NONEXISTENT_ROLE', description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å' },
      { role: 'coach', description: '–†–æ–ª—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ' },
      { role: 'COACH ', description: '–†–æ–ª—å —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –∫–æ–Ω—Ü–µ' },
      { role: ' COACH', description: '–†–æ–ª—å —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –Ω–∞—á–∞–ª–µ' },
      { role: 'C√ìACH', description: '–†–æ–ª—å —Å –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏' }
    ];

    for (const testCase of roleEdgeCases) {
      try {
        const result = await client.query(`
          SELECT COUNT(*) as count
          FROM "GpsRolePermission"
          WHERE role = $1
        `, [testCase.role]);
        
        const count = parseInt(result.rows[0].count);
        console.log(`   ‚úÖ ${testCase.description}: ${count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        
      } catch (error) {
        console.log(`   ‚úÖ ${testCase.description}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è edge cases:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

testEdgeCases();
