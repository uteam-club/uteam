const { Pool } = require('pg');
const fs = require('fs');

const pool = new Pool({
  host: 'rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net',
  port: 6432,
  database: 'uteam',
  user: 'uteam-admin',
  password: 'Mell567234!',
  ssl: {
    rejectUnauthorized: false,
    ca: fs.readFileSync('./yandex_root.crt').toString()
  }
});

async function reprocessGpsReport() {
  try {
    console.log('üîç –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π GPS –æ—Ç—á–µ—Ç FDC Vista...\n');

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç (–ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç FDC Vista —Å –∏–º–µ–Ω–µ–º "2")
    const problemReportQuery = `
      SELECT 
        gr.id,
        gr.name,
        gr."processedData",
        gr."rawData",
        gr."profileId",
        gr."teamId",
        gr."clubId"
      FROM "GpsReport" gr
      JOIN "Club" c ON gr."clubId" = c.id
      WHERE c.name = 'FDC Vista'
        AND gr.name = '2'
        AND gr."processedData" IS NOT NULL 
        AND jsonb_array_length(gr."processedData") > 0
      ORDER BY gr."createdAt" DESC
      LIMIT 1;
    `;

    const problemReportResult = await pool.query(problemReportQuery);
    
    if (problemReportResult.rows.length === 0) {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const problemReport = problemReportResult.rows[0];
    console.log('üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç:');
    console.log(`   ID: ${problemReport.id}`);
    console.log(`   Name: ${problemReport.name}`);
    console.log(`   Team ID: ${problemReport.teamId}`);
    console.log(`   Profile ID: ${problemReport.profileId}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${problemReport.processedData.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîç –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:');
    problemReport.processedData.forEach((record, index) => {
      console.log(`   ${index + 1}. ${JSON.stringify(record)}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîç –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):');
    if (problemReport.rawData && Array.isArray(problemReport.rawData)) {
      problemReport.rawData.slice(0, 3).forEach((row, index) => {
        console.log(`   ${index + 1}. ${JSON.stringify(row)}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileQuery = `
      SELECT 
        gp.id,
        gp.name,
        gp."gpsSystem",
        gp."columnMapping"
      FROM "GpsProfile" gp
      WHERE gp.id = $1;
    `;

    const profileResult = await pool.query(profileQuery, [problemReport.profileId]);
    
    if (profileResult.rows.length > 0) {
      const profile = profileResult.rows[0];
      console.log('\nüîç –ü—Ä–æ—Ñ–∏–ª—å GPS:');
      console.log(`   ID: ${profile.id}`);
      console.log(`   Name: ${profile.name}`);
      console.log(`   GPS System: ${profile.gpsSystem}`);
      console.log(`   Column Mapping: ${JSON.stringify(profile.columnMapping, null, 2)}`);
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç...');
    const deleteQuery = `
      DELETE FROM "GpsReport"
      WHERE id = $1;
    `;

    await pool.query(deleteQuery, [problemReport.id]);
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω');

    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞:', error);
  } finally {
    await pool.end();
  }
}

reprocessGpsReport(); 