import { db } from '@/lib/db';
import { sql } from 'drizzle-orm';

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è recipientsConfig –≤ —Ç–∞–±–ª–∏—Ü—É RPESchedule
 */
async function applyRPERecipientsMigration() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è recipientsConfig –≤ RPESchedule...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ recipientsConfig
    const checkColumnQuery = sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'RPESchedule' 
      AND column_name = 'recipientsConfig'
    `;
    
    const existingColumns = await db.execute(checkColumnQuery);
    
    if (existingColumns.rows.length > 0) {
      console.log('‚úÖ –ü–æ–ª–µ recipientsConfig —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ RPESchedule');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ recipientsConfig
    const addColumnQuery = sql`
      ALTER TABLE "RPESchedule" 
      ADD COLUMN "recipientsConfig" text
    `;
    
    await db.execute(addColumnQuery);
    console.log('‚úÖ –ü–æ–ª–µ recipientsConfig —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É RPESchedule');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const tableStructureQuery = sql`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'RPESchedule'
      ORDER BY ordinal_position
    `;
    
    const structure = await db.execute(tableStructureQuery);
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã RPESchedule:');
    structure.rows.forEach((row: any) => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
applyRPERecipientsMigration()
  .then(() => {
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
