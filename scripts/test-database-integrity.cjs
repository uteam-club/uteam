const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testDatabaseIntegrity() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü');
    
    const tables = ['GpsPermission', 'GpsRolePermission', 'GpsUserPermission'];
    
    for (const table of tables) {
      const result = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns
        WHERE table_name = $1 AND table_schema = 'public'
        ORDER BY ordinal_position
      `, [table]);
      
      console.log(`   ‚úÖ ${table}: ${result.rows.length} –∫–æ–ª–æ–Ω–æ–∫`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      const requiredFields = {
        'GpsPermission': ['id', 'code', 'name', 'category'],
        'GpsRolePermission': ['id', 'role', 'permissionId', 'allowed'],
        'GpsUserPermission': ['id', 'userId', 'clubId', 'canView', 'canEdit', 'canDelete', 'canExport', 'canManageProfiles']
      };
      
      const fieldNames = result.rows.map(row => row.column_name);
      const missingFields = requiredFields[table].filter(field => !fieldNames.includes(field));
      
      if (missingFields.length > 0) {
        console.log(`   ‚ùå ${table}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
      } else {
        console.log(`   ‚úÖ ${table}: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤');
    
    const indexes = await client.query(`
      SELECT indexname, tablename, indexdef
      FROM pg_indexes
      WHERE tablename LIKE 'Gps%Permission%'
      ORDER BY tablename, indexname
    `);
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexes.rows.length}`);
    indexes.rows.forEach(row => {
      console.log(`      - ${row.tablename}.${row.indexname}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π');
    
    const foreignKeys = await client.query(`
      SELECT
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_name LIKE 'Gps%Permission%'
    `);
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: ${foreignKeys.rows.length}`);
    foreignKeys.rows.forEach(row => {
      console.log(`      - ${row.table_name}.${row.column_name} -> ${row.foreign_table_name}.${row.foreign_column_name}`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const permissionCount = await client.query('SELECT COUNT(*) FROM "GpsPermission"');
    const rolePermissionCount = await client.query('SELECT COUNT(*) FROM "GpsRolePermission"');
    const userPermissionCount = await client.query('SELECT COUNT(*) FROM "GpsUserPermission"');
    
    console.log(`   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionCount.rows[0].count}`);
    console.log(`   ‚úÖ –°–≤—è–∑–µ–π —Ä–æ–ª–µ–π: ${rolePermissionCount.rows[0].count}`);
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${userPermissionCount.rows[0].count}`);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏');
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const duplicateCodes = await client.query(`
      SELECT code, COUNT(*) as count
      FROM "GpsPermission"
      GROUP BY code
      HAVING COUNT(*) > 1
    `);
    
    if (duplicateCodes.rows.length > 0) {
      console.log(`   ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${duplicateCodes.rows.length}`);
    } else {
      console.log(`   ‚úÖ –ö–æ–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã`);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ—á–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ—á–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
    
    // –í–∏—Å—è—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ GpsRolePermission
    const orphanedRolePermissions = await client.query(`
      SELECT rp.id, rp.role, rp."permissionId"
      FROM "GpsRolePermission" rp
      LEFT JOIN "GpsPermission" p ON rp."permissionId" = p.id
      WHERE p.id IS NULL
    `);
    
    if (orphanedRolePermissions.rows.length > 0) {
      console.log(`   ‚ùå –í–∏—Å—è—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ GpsRolePermission: ${orphanedRolePermissions.rows.length}`);
    } else {
      console.log(`   ‚úÖ –°—Å—ã–ª–æ—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å GpsRolePermission –≤ –ø–æ—Ä—è–¥–∫–µ`);
    }

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã
    const invalidCodes = await client.query(`
      SELECT code FROM "GpsPermission" 
      WHERE code NOT LIKE 'gps.%' OR code = 'gps.' OR code LIKE 'gps..%'
    `);
    
    if (invalidCodes.rows.length > 0) {
      console.log(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã: ${invalidCodes.rows.length}`);
      invalidCodes.rows.forEach(row => {
        console.log(`      - ${row.code}`);
      });
    } else {
      console.log(`   ‚úÖ –í—Å–µ –∫–æ–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
    }

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    
    const startTime = Date.now();
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await client.query(`
      SELECT rp.allowed
      FROM "GpsRolePermission" rp
      JOIN "GpsPermission" p ON rp."permissionId" = p.id
      WHERE rp.role = $1 AND p.code = $2
    `, ['COACH', 'gps.reports.view']);
    
    const endTime = Date.now();
    const queryTime = endTime - startTime;
    
    console.log(`   ‚úÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${queryTime}ms`);
    
    if (queryTime > 100) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${queryTime}ms > 100ms`);
    } else {
      console.log(`   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ`);
    }

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
    const roleStats = await client.query(`
      SELECT role, COUNT(*) as count
      FROM "GpsRolePermission"
      WHERE allowed = true
      GROUP BY role
      ORDER BY count DESC
    `);
    
    console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ —Ä–æ–ª—è–º:`);
    roleStats.rows.forEach(row => {
      console.log(`      ${row.role}: ${row.count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = await client.query(`
      SELECT category, COUNT(*) as count
      FROM "GpsPermission"
      GROUP BY category
      ORDER BY count DESC
    `);
    
    console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
    categoryStats.rows.forEach(row => {
      console.log(`      ${row.category}: ${row.count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
    });

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

testDatabaseIntegrity();
