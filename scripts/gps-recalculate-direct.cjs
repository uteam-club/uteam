const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function recalculateGpsReportDirect(reportId) {
  console.log(`üîÑ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Å—á—ë—Ç GPS –æ—Ç—á—ë—Ç–∞: ${reportId}\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á—ë—Ç–µ –¥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    const beforeQuery = `
      SELECT 
        id,
        name,
        "createdAt",
        "gpsSystem",
        "profileId",
        "rawData",
        "processedData",
        CASE 
          WHEN "profileSnapshot" IS NOT NULL AND "profileSnapshot"->'columns' IS NOT NULL 
          THEN jsonb_array_length("profileSnapshot"->'columns')::text
          ELSE '0'
        END as profileSnapshot_columns_length,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_before
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const beforeResult = await pool.query(beforeQuery, [reportId]);
    
    if (beforeResult.rows.length === 0) {
      console.log('‚ùå –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { success: false, reason: 'Report not found' };
    }

    const reportBefore = beforeResult.rows[0];
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø–µ—Ä–µ—Å—á—ë—Ç–∞:');
    console.log(`   ID: ${reportBefore.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${reportBefore.name}`);
    console.log(`   ProfileSnapshot –∫–æ–ª–æ–Ω–æ–∫: ${reportBefore.profilesnapshot_columns_length}`);
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${reportBefore.canonical_rows_length_before}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Å—á—ë—Ç
    if (parseInt(reportBefore.profilesnapshot_columns_length) === 0) {
      console.log('‚ö†Ô∏è  ProfileSnapshot –ø—É—Å—Ç - –ø–µ—Ä–µ—Å—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
      return { success: false, reason: 'Empty profileSnapshot' };
    }

    if (!reportBefore.rawData || reportBefore.rawData.length === 0) {
      console.log('‚ö†Ô∏è  RawData –ø—É—Å—Ç - –ø–µ—Ä–µ—Å—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
      return { success: false, reason: 'Empty rawData' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileQuery = `
      SELECT 
        id,
        name,
        "gpsSystem",
        "columnMapping",
        "metricsConfig"
      FROM public."GpsProfile"
      WHERE id = $1
    `;
    
    const profileResult = await pool.query(profileQuery, [reportBefore.profileId]);
    
    if (profileResult.rows.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return { success: false, reason: 'Profile not found' };
    }
    
    const profile = profileResult.rows[0];
    console.log(`üìã –ü—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.gpsSystem})`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç
    console.log('\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç...');
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
      const { GpsDataProcessor } = require('../src/services/gps.service.ts');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      const processor = new GpsDataProcessor(reportBefore.rawData, profile);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const processedData = await processor.processData();
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${processedData.players ? processedData.players.length : 0}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ –ë–î
      const updateQuery = `
        UPDATE public."GpsReport"
        SET 
          "processedData" = $1,
          "isProcessed" = true,
          "updatedAt" = NOW()
        WHERE id = $2
      `;
      
      await pool.query(updateQuery, [JSON.stringify(processedData), reportId]);
      console.log('‚úÖ –û—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î');

    } catch (processingError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingError.message}`);
      return { success: false, reason: `Processing error: ${processingError.message}` };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á—ë—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    const afterQuery = `
      SELECT 
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_after,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'players' IS NOT NULL 
          THEN jsonb_array_length("processedData"->'players')::text
          ELSE '0'
        END as players_count_after
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const afterResult = await pool.query(afterQuery, [reportId]);
    const reportAfter = afterResult.rows[0];

    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø–µ—Ä–µ—Å—á—ë—Ç–∞:');
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${reportAfter.canonical_rows_length_after}`);
    console.log(`   –ò–≥—Ä–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${reportAfter.players_count_after}`);

    const success = parseInt(reportAfter.players_count_after) > 0;
    
    if (success) {
      console.log('‚úÖ –ü–µ—Ä–µ—Å—á—ë—Ç —É—Å–ø–µ—à–µ–Ω!');
    } else {
      console.log('‚ùå –ü–µ—Ä–µ—Å—á—ë—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }

    return {
      success,
      before: {
        profileSnapshotColumns: parseInt(reportBefore.profilesnapshot_columns_length),
        canonicalRows: parseInt(reportBefore.canonical_rows_length_before)
      },
      after: {
        canonicalRows: parseInt(reportAfter.canonical_rows_length_after),
        playersCount: parseInt(reportAfter.players_count_after)
      }
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞:', error);
    return { success: false, reason: error.message };
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç
const reportId = process.argv[2];
if (!reportId) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞: node scripts/gps-recalculate-direct.cjs <reportId>');
  process.exit(1);
}

recalculateGpsReportDirect(reportId).then(result => {
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  console.log(JSON.stringify(result, null, 2));
  process.exit(result.success ? 0 : 1);
}).catch(console.error);
