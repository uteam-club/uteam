const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testPerformance() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...\n');

    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    
    const basicQueries = [
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π',
        query: 'SELECT * FROM "GpsPermission" ORDER BY category, code',
        iterations: 10
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏',
        query: 'SELECT * FROM "GpsRolePermission" WHERE role = $1',
        params: ['COACH'],
        iterations: 50
      },
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
        query: 'SELECT rp.allowed FROM "GpsRolePermission" rp JOIN "GpsPermission" p ON rp."permissionId" = p.id WHERE rp.role = $1 AND p.code = $2',
        params: ['COACH', 'gps.reports.view'],
        iterations: 100
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        query: 'SELECT * FROM "GpsPermission" WHERE category = $1',
        params: ['reports'],
        iterations: 50
      }
    ];

    for (const test of basicQueries) {
      const startTime = Date.now();
      
      for (let i = 0; i < test.iterations; i++) {
        await client.query(test.query, test.params || []);
      }
      
      const endTime = Date.now();
      const totalTime = endTime - startTime;
      const avgTime = totalTime / test.iterations;
      
      console.log(`   ‚úÖ ${test.name}: ${avgTime.toFixed(2)}ms (${test.iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);
      
      if (avgTime > 100) {
        console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${avgTime.toFixed(2)}ms > 100ms`);
      }
    }

    // 2. –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    
    const complexQueries = [
      {
        name: '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏',
        query: `
          SELECT rp.role, p.code, p.name, p.category, rp.allowed
          FROM "GpsRolePermission" rp
          JOIN "GpsPermission" p ON rp."permissionId" = p.id
          WHERE rp.role = $1
          ORDER BY p.category, p.code
        `,
        params: ['COACH'],
        iterations: 20
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º',
        query: `
          SELECT role, COUNT(*) as count
          FROM "GpsRolePermission"
          WHERE allowed = true
          GROUP BY role
          ORDER BY count DESC
        `,
        iterations: 10
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
        query: `
          SELECT category, COUNT(*) as count
          FROM "GpsPermission"
          GROUP BY category
          ORDER BY count DESC
        `,
        iterations: 10
      }
    ];

    for (const test of complexQueries) {
      const startTime = Date.now();
      
      for (let i = 0; i < test.iterations; i++) {
        await client.query(test.query, test.params || []);
      }
      
      const endTime = Date.now();
      const totalTime = endTime - startTime;
      const avgTime = totalTime / test.iterations;
      
      console.log(`   ‚úÖ ${test.name}: ${avgTime.toFixed(2)}ms (${test.iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);
      
      if (avgTime > 200) {
        console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${avgTime.toFixed(2)}ms > 200ms`);
      }
    }

    // 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å EXPLAIN
    console.log('\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    
    const explainQueries = [
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
        query: 'SELECT rp.allowed FROM "GpsRolePermission" rp JOIN "GpsPermission" p ON rp."permissionId" = p.id WHERE rp.role = $1 AND p.code = $2',
        params: ['COACH', 'gps.reports.view']
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏',
        query: 'SELECT * FROM "GpsRolePermission" WHERE role = $1',
        params: ['COACH']
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
        query: 'SELECT * FROM "GpsPermission" WHERE code = $1',
        params: ['gps.reports.view']
      }
    ];

    for (const test of explainQueries) {
      try {
        const result = await client.query(`EXPLAIN (ANALYZE, BUFFERS) ${test.query}`, test.params);
        const plan = result.rows[0]['QUERY PLAN'];
        
        console.log(`   üìä ${test.name}:`);
        console.log(`      ${plan}`);
        
        if (plan.includes('Index Scan')) {
          console.log(`      ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å`);
        } else if (plan.includes('Seq Scan')) {
          console.log(`      ‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå ${test.name}: –û—à–∏–±–∫–∞ EXPLAIN - ${error.message}`);
      }
    }

    // 4. –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏');
    
    const loadTests = [
      { concurrent: 5, iterations: 20, description: '–ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' },
      { concurrent: 10, iterations: 50, description: '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞' },
      { concurrent: 20, iterations: 100, description: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' }
    ];

    for (const loadTest of loadTests) {
      console.log(`   üöÄ ${loadTest.description} (${loadTest.concurrent} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö, ${loadTest.iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);
      
      const startTime = Date.now();
      const promises = [];
      
      for (let i = 0; i < loadTest.concurrent; i++) {
        const promise = (async () => {
          for (let j = 0; j < loadTest.iterations / loadTest.concurrent; j++) {
            await client.query(`
              SELECT rp.allowed
              FROM "GpsRolePermission" rp
              JOIN "GpsPermission" p ON rp."permissionId" = p.id
              WHERE rp.role = $1 AND p.code = $2
            `, ['COACH', 'gps.reports.view']);
          }
        })();
        promises.push(promise);
      }
      
      await Promise.all(promises);
      const endTime = Date.now();
      const totalTime = endTime - startTime;
      const avgTime = totalTime / loadTest.iterations;
      
      console.log(`      ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms, —Å—Ä–µ–¥–Ω–µ–µ: ${avgTime.toFixed(2)}ms`);
      
      if (avgTime > 50) {
        console.log(`      ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${avgTime.toFixed(2)}ms > 50ms`);
      }
    }

    // 5. –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏');
    
    const memoryTestIterations = 1000;
    const startTime = Date.now();
    
    for (let i = 0; i < memoryTestIterations; i++) {
      await client.query(`
        SELECT rp.role, p.code, p.name, p.category
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1
      `, ['COACH']);
    }
    
    const endTime = Date.now();
    const totalTime = endTime - startTime;
    const avgTime = totalTime / memoryTestIterations;
    
    console.log(`   ‚úÖ ${memoryTestIterations} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${totalTime}ms`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
    
    if (avgTime > 100) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é: ${avgTime.toFixed(2)}ms > 100ms`);
    }

    // 6. –¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤');
    
    const indexTests = [
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
        query: 'SELECT * FROM "GpsPermission" WHERE code = $1',
        params: ['gps.reports.view'],
        iterations: 100
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        query: 'SELECT * FROM "GpsPermission" WHERE category = $1',
        params: ['reports'],
        iterations: 100
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ —Ä–æ–ª–∏',
        query: 'SELECT * FROM "GpsRolePermission" WHERE role = $1',
        params: ['COACH'],
        iterations: 100
      }
    ];

    for (const test of indexTests) {
      const startTime = Date.now();
      
      for (let i = 0; i < test.iterations; i++) {
        await client.query(test.query, test.params);
      }
      
      const endTime = Date.now();
      const avgTime = (endTime - startTime) / test.iterations;
      
      console.log(`   ‚úÖ ${test.name}: ${avgTime.toFixed(2)}ms`);
      
      if (avgTime > 50) {
        console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: ${avgTime.toFixed(2)}ms > 50ms`);
      }
    }

    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\n7Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü
    const tableStats = await client.query(`
      SELECT 
        schemaname,
        tablename,
        n_tup_ins as inserts,
        n_tup_upd as updates,
        n_tup_del as deletes,
        n_live_tup as live_tuples,
        n_dead_tup as dead_tuples
      FROM pg_stat_user_tables
      WHERE tablename LIKE 'Gps%Permission%'
      ORDER BY tablename
    `);
    
    console.log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:`);
    tableStats.rows.forEach(row => {
      console.log(`      ${row.tablename}: ${row.live_tuples} –∂–∏–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, ${row.dead_tuples} –º–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü
    const tableSizes = await client.query(`
      SELECT 
        tablename,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
      FROM pg_tables
      WHERE tablename LIKE 'Gps%Permission%'
      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
    `);
    
    console.log(`   üìè –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:`);
    tableSizes.rows.forEach(row => {
      console.log(`      ${row.tablename}: ${row.size}`);
    });

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

testPerformance();
