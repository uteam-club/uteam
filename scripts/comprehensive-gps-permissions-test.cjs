const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

async function comprehensiveGpsPermissionsTest() {
  try {
    console.log('üîç –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const permissionsResult = await pool.query(`
      SELECT id, code, name, category, description
      FROM "GpsPermission" 
      ORDER BY category, name
    `);
    
    console.log(`   üìä –í—Å–µ–≥–æ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionsResult.rows.length}`);
    
    const expectedPermissions = [
      { code: 'gps.admin.permissions', name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏', category: 'admin' },
      { code: 'gps.admin.manage', name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPS —Å–∏—Å—Ç–µ–º–æ–π', category: 'admin' },
      { code: 'gps.data.view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä GPS –¥–∞–Ω–Ω—ã—Ö', category: 'data' },
      { code: 'gps.data.edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –¥–∞–Ω–Ω—ã—Ö', category: 'data' },
      { code: 'gps.data.export', name: '–≠–∫—Å–ø–æ—Ä—Ç GPS –¥–∞–Ω–Ω—ã—Ö', category: 'data' },
      { code: 'gps.profiles.view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä GPS –ø—Ä–æ—Ñ–∏–ª–µ–π', category: 'profiles' },
      { code: 'gps.profiles.edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –ø—Ä–æ—Ñ–∏–ª–µ–π', category: 'profiles' },
      { code: 'gps.profiles.create', name: '–°–æ–∑–¥–∞–Ω–∏–µ GPS –ø—Ä–æ—Ñ–∏–ª–µ–π', category: 'profiles' },
      { code: 'gps.profiles.delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ GPS –ø—Ä–æ—Ñ–∏–ª–µ–π', category: 'profiles' },
      { code: 'gps.reports.view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä GPS –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
      { code: 'gps.reports.edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
      { code: 'gps.reports.create', name: '–°–æ–∑–¥–∞–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
      { code: 'gps.reports.delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ GPS –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
      { code: 'gps.reports.export', name: '–≠–∫—Å–ø–æ—Ä—Ç GPS –¥–∞–Ω–Ω—ã—Ö', category: 'reports' }
    ];
    
    let missingPermissions = [];
    let extraPermissions = [];
    
    for (const expected of expectedPermissions) {
      const found = permissionsResult.rows.find(p => p.code === expected.code);
      if (!found) {
        missingPermissions.push(expected);
      } else if (found.name !== expected.name || found.category !== expected.category) {
        console.log(`   ‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${expected.code} - –æ–∂–∏–¥–∞–ª–æ—Å—å "${expected.name}" (${expected.category}), –Ω–∞–π–¥–µ–Ω–æ "${found.name}" (${found.category})`);
      }
    }
    
    for (const found of permissionsResult.rows) {
      const expected = expectedPermissions.find(p => p.code === found.code);
      if (!expected) {
        extraPermissions.push(found);
      }
    }
    
    if (missingPermissions.length > 0) {
      console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${missingPermissions.length}`);
      missingPermissions.forEach(p => console.log(`      - ${p.code}: ${p.name}`));
    }
    
    if (extraPermissions.length > 0) {
      console.log(`   ‚ö†Ô∏è  –õ–∏—à–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${extraPermissions.length}`);
      extraPermissions.forEach(p => console.log(`      - ${p.code}: ${p.name}`));
    }
    
    if (missingPermissions.length === 0 && extraPermissions.length === 0) {
      console.log('   ‚úÖ –í—Å–µ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–æ–ª–∏...');
    const roles = ['SUPER_ADMIN', 'ADMIN', 'COACH', 'MEMBER', 'SCOUT', 'DOCTOR', 'DIRECTOR'];
    console.log(`   üìä –†–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${roles.length}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏...');
    
    const expectedRolePermissions = {
      'SUPER_ADMIN': permissionsResult.rows.map(p => p.id), // –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      'ADMIN': permissionsResult.rows.filter(p => p.code !== 'gps.admin.permissions' && p.code !== 'gps.admin.manage').map(p => p.id),
      'COACH': permissionsResult.rows.filter(p => 
        p.code.startsWith('gps.data.') || 
        p.code.startsWith('gps.profiles.') || 
        p.code.startsWith('gps.reports.')
      ).map(p => p.id),
      'MEMBER': permissionsResult.rows.filter(p => 
        p.code === 'gps.data.view' || 
        p.code === 'gps.profiles.view' || 
        p.code === 'gps.reports.view'
      ).map(p => p.id),
      'SCOUT': permissionsResult.rows.filter(p => 
        p.code === 'gps.data.view' || 
        p.code === 'gps.data.export' || 
        p.code === 'gps.profiles.view' || 
        p.code === 'gps.reports.view' || 
        p.code === 'gps.reports.export'
      ).map(p => p.id),
      'DOCTOR': permissionsResult.rows.filter(p => 
        p.code === 'gps.data.view' || 
        p.code === 'gps.data.export' || 
        p.code === 'gps.profiles.view' || 
        p.code === 'gps.reports.view' || 
        p.code === 'gps.reports.export'
      ).map(p => p.id),
      'DIRECTOR': permissionsResult.rows.filter(p => 
        p.code === 'gps.data.view' || 
        p.code === 'gps.data.export' || 
        p.code === 'gps.profiles.view' || 
        p.code === 'gps.reports.view' || 
        p.code === 'gps.reports.export'
      ).map(p => p.id)
    };
    
    let totalIssues = 0;
    
    for (const role of roles) {
      console.log(`\n   üî∏ –†–æ–ª—å: ${role}`);
      
      const currentResult = await pool.query(`
        SELECT 
          rp."permissionId",
          rp.allowed,
          p.code,
          p.name,
          p.category
        FROM "GpsRolePermission" rp
        JOIN "GpsPermission" p ON rp."permissionId" = p.id
        WHERE rp.role = $1
        ORDER BY p.category, p.name
      `, [role]);
      
      const currentPermissions = currentResult.rows.map(r => r.permissionId);
      const expectedPermissions = expectedRolePermissions[role] || [];
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const missing = expectedPermissions.filter(permId => !currentPermissions.includes(permId));
      
      // –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const extra = currentPermissions.filter(permId => !expectedPermissions.includes(permId));
      
      // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å true)
      const wrongStatus = currentResult.rows.filter(r => !r.allowed);
      
      if (missing.length > 0) {
        console.log(`      ‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${missing.length}`);
        missing.forEach(permId => {
          const perm = permissionsResult.rows.find(p => p.id === permId);
          if (perm) {
            console.log(`         - ${perm.code}: ${perm.name}`);
          }
        });
        totalIssues += missing.length;
      }
      
      if (extra.length > 0) {
        console.log(`      ‚ö†Ô∏è  –õ–∏—à–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${extra.length}`);
        extra.forEach(permId => {
          const perm = currentResult.rows.find(r => r.permissionId === permId);
          if (perm) {
            console.log(`         - ${perm.code}: ${perm.name}`);
          }
        });
      }
      
      if (wrongStatus.length > 0) {
        console.log(`      ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: ${wrongStatus.length}`);
        wrongStatus.forEach(r => {
          console.log(`         - ${r.code}: ${r.name} (${r.allowed ? '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' : '–∑–∞–ø—Ä–µ—â–µ–Ω–æ'})`);
        });
        totalIssues += wrongStatus.length;
      }
      
      if (missing.length === 0 && extra.length === 0 && wrongStatus.length === 0) {
        console.log(`      ‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (${currentPermissions.length})`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–¥–µ–∫—Å—ã...');
    const indexesResult = await pool.query(`
      SELECT 
        indexname,
        tablename,
        indexdef
      FROM pg_indexes 
      WHERE tablename IN ('GpsPermission', 'GpsRolePermission', 'GpsUserPermission')
      ORDER BY tablename, indexname
    `);
    
    console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexesResult.rows.length}`);
    indexesResult.rows.forEach(idx => {
      console.log(`      - ${idx.tablename}.${idx.indexname}`);
    });
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...');
    const constraintsResult = await pool.query(`
      SELECT 
        tc.table_name,
        tc.constraint_name,
        tc.constraint_type,
        kcu.column_name
      FROM information_schema.table_constraints tc
      JOIN information_schema.key_column_usage kcu 
        ON tc.constraint_name = kcu.constraint_name
      WHERE tc.table_name IN ('GpsPermission', 'GpsRolePermission', 'GpsUserPermission')
      ORDER BY tc.table_name, tc.constraint_type, tc.constraint_name
    `);
    
    console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${constraintsResult.rows.length}`);
    constraintsResult.rows.forEach(constraint => {
      console.log(`      - ${constraint.table_name}.${constraint.constraint_name} (${constraint.constraint_type})`);
    });
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const statsResult = await pool.query(`
      SELECT 
        'GpsPermission' as table_name,
        COUNT(*) as total_permissions,
        COUNT(DISTINCT category) as categories
      FROM "GpsPermission"
      UNION ALL
      SELECT 
        'GpsRolePermission' as table_name,
        COUNT(*) as total_permissions,
        COUNT(DISTINCT role) as categories
      FROM "GpsRolePermission"
      UNION ALL
      SELECT 
        'GpsUserPermission' as table_name,
        COUNT(*) as total_permissions,
        COUNT(DISTINCT "userId") as categories
      FROM "GpsUserPermission"
    `);
    
    statsResult.rows.forEach(stat => {
      console.log(`   üìä ${stat.table_name}: ${stat.total_permissions} –∑–∞–ø–∏—Å–µ–π, ${stat.categories} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π`);
    });
    
    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log(`   üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionsResult.rows.length}`);
    console.log(`   üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–æ–ª–µ–π: ${roles.length}`);
    console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
    
    if (totalIssues === 0) {
      console.log('   ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('   üéâ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('   ‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
  } finally {
    await pool.end();
  }
}

comprehensiveGpsPermissionsTest();
