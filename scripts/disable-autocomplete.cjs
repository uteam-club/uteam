#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions = ['.tsx', '.ts', '.jsx', '.js']) {
  let files = [];
  
  try {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if (!['node_modules', 'dist', 'build', '.next', 'coverage', '__pycache__'].includes(item)) {
          files = files.concat(findFiles(fullPath, extensions));
        }
      } else if (stat.isFile()) {
        const ext = path.extname(item);
        if (extensions.includes(ext)) {
          files.push(fullPath);
        }
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}: ${error.message}`);
  }
  
  return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    let newContent = content;
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ autoComplete
    const inputRegex = /<Input\s+([^>]*?)(?<!autoComplete\s*=\s*["'][^"']*["'])([^>]*?)>/g;
    
    // –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∏—â–µ–º –≤—Å–µ <Input –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π
    const inputMatches = content.match(/<Input[^>]*>/g);
    
    if (inputMatches) {
      for (const inputMatch of inputMatches) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ autoComplete
        if (!inputMatch.includes('autoComplete') && !inputMatch.includes('autoComplete=')) {
          // –ó–∞–º–µ–Ω—è–µ–º > –Ω–∞ autoComplete="off" >
          const newInput = inputMatch.replace(/>$/, ' autoComplete="off">');
          newContent = newContent.replace(inputMatch, newInput);
          modified = true;
        }
      }
    }
    
    if (modified) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å Input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...');
  
  const srcDir = path.join(__dirname, '..', 'src');
  const files = findFiles(srcDir);
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  
  let processedCount = 0;
  let modifiedCount = 0;
  
  files.forEach(file => {
    processedCount++;
    if (processFile(file)) {
      modifiedCount++;
    }
  });
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`   –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${modifiedCount}`);
  console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount - modifiedCount}`);
  
  if (modifiedCount > 0) {
    console.log('\n‚ú® –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö Input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!');
  } else {
    console.log('\nüí° –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ Input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∏–º–µ—é—Ç autoComplete –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { processFile };