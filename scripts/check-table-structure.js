// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã RPESurveyResponse
import { config } from 'dotenv';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { rpeSurveyResponse } from '../src/db/schema/rpeSurveyResponse.ts';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

async function checkTableStructure() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã RPESurveyResponse...\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const connectionString = process.env.DATABASE_URL;
    if (!connectionString) {
      throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    
    const client = postgres(connectionString);
    const db = drizzle(client);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã RPESurveyResponse:');
    console.log('=====================================');
    
    const columns = Object.keys(rpeSurveyResponse);
    columns.forEach((column, index) => {
      const columnInfo = rpeSurveyResponse[column];
      console.log(`${index + 1}. ${column}: ${columnInfo.dataType}${columnInfo.notNull ? ' (NOT NULL)' : ' (nullable)'}`);
    });
    
    console.log(`\nüìà –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: ${columns.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ durationMinutes
    if ('durationMinutes' in rpeSurveyResponse) {
      console.log('‚úÖ –ü–æ–ª–µ durationMinutes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ!');
    } else {
      console.log('‚ùå –ü–æ–ª–µ durationMinutes –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    try {
      const result = await db.select().from(rpeSurveyResponse).limit(1);
      console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ:');
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è');
      console.log(`üìù –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:`, result.length > 0 ? '–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
    } catch (error) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
    
    await client.end();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkTableStructure();
