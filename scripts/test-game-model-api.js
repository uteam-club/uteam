// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testGameModelAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
    const playersResponse = await fetch(`${BASE_URL}/api/players`);
    
    if (!playersResponse.ok) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
      return;
    }
    
    const players = await playersResponse.json();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);
    
    if (players.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPlayer = players[0];
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–≥—Ä–æ–∫–æ–º: ${testPlayer.firstName} ${testPlayer.lastName} (ID: ${testPlayer.id})\n`);

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏...');
    const gameModelResponse = await fetch(`${BASE_URL}/api/players/${testPlayer.id}/game-model`);
    
    if (!gameModelResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏:', gameModelResponse.status);
      const errorText = await gameModelResponse.text();
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
      return;
    }
    
    const gameModelData = await gameModelResponse.json();
    console.log('‚úÖ –ò–≥—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:', {
      success: gameModelData.success,
      hasModel: !!gameModelData.model,
      hasSettings: !!gameModelData.settings,
      matchesCount: gameModelData.model?.matchesCount || 0
    });

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä–æ–≤–æ–π –º–æ–¥–µ–ª–∏...');
    const settingsResponse = await fetch(`${BASE_URL}/api/players/${testPlayer.id}/game-model/settings`);
    
    if (!settingsResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settingsResponse.status);
      return;
    }
    
    const settingsData = await settingsResponse.json();
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
      success: settingsData.success,
      selectedMetrics: settingsData.settings?.selectedMetrics?.length || 0,
      metricUnits: Object.keys(settingsData.settings?.metricUnits || {}).length
    });

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testGameModelAPI();

