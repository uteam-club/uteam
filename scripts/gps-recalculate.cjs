const { Pool } = require('pg');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function recalculateGpsReport(reportId) {
  console.log(`üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç GPS –æ—Ç—á—ë—Ç–∞: ${reportId}\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á—ë—Ç–µ –¥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    const beforeQuery = `
      SELECT 
        id,
        name,
        "createdAt",
        "gpsSystem",
        "profileId",
        CASE 
          WHEN "profileSnapshot" IS NOT NULL AND "profileSnapshot"->'columns' IS NOT NULL 
          THEN jsonb_array_length("profileSnapshot"->'columns')::text
          ELSE '0'
        END as profileSnapshot_columns_length,
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_before
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const beforeResult = await pool.query(beforeQuery, [reportId]);
    
    if (beforeResult.rows.length === 0) {
      console.log('‚ùå –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { success: false, reason: 'Report not found' };
    }

    const reportBefore = beforeResult.rows[0];
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø–µ—Ä–µ—Å—á—ë—Ç–∞:');
    console.log(`   ID: ${reportBefore.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${reportBefore.name}`);
    console.log(`   ProfileSnapshot –∫–æ–ª–æ–Ω–æ–∫: ${reportBefore.profilesnapshot_columns_length}`);
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${reportBefore.canonical_rows_length_before}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Å—á—ë—Ç
    if (parseInt(reportBefore.profilesnapshot_columns_length) === 0) {
      console.log('‚ö†Ô∏è  ProfileSnapshot –ø—É—Å—Ç - –ø–µ—Ä–µ—Å—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
      return { success: false, reason: 'Empty profileSnapshot' };
    }

    if (parseInt(reportBefore.canonical_rows_length_before) > 0) {
      console.log('‚ö†Ô∏è  Canonical –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å - –ø–µ—Ä–µ—Å—á—ë—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω');
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç —á–µ—Ä–µ–∑ API
    console.log('\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç...');
    
    // –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API
    const fetch = require('node-fetch');
    const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
    
    try {
      const response = await fetch(`${baseUrl}/api/gps-reports/${reportId}/process`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
        return { success: false, reason: `API error: ${response.status}` };
      }

      const result = await response.json();
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');

    } catch (apiError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API: ${apiError.message}`);
      
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Å—á—ë—Ç —á–µ—Ä–µ–∑ –ë–î
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Å—á—ë—Ç —á–µ—Ä–µ–∑ –ë–î...');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      return { success: false, reason: `API unavailable: ${apiError.message}` };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á—ë—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    const afterQuery = `
      SELECT 
        CASE 
          WHEN "processedData" IS NOT NULL AND "processedData"->'canonical' IS NOT NULL 
          AND "processedData"->'canonical'->'rows' IS NOT NULL
          THEN jsonb_array_length("processedData"->'canonical'->'rows')::text
          ELSE '0'
        END as canonical_rows_length_after
      FROM public."GpsReport"
      WHERE id = $1
    `;

    const afterResult = await pool.query(afterQuery, [reportId]);
    const reportAfter = afterResult.rows[0];

    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø–µ—Ä–µ—Å—á—ë—Ç–∞:');
    console.log(`   Canonical —Å—Ç—Ä–æ–∫: ${reportAfter.canonical_rows_length_after}`);

    const success = parseInt(reportAfter.canonical_rows_length_after) > 0;
    
    if (success) {
      console.log('‚úÖ –ü–µ—Ä–µ—Å—á—ë—Ç —É—Å–ø–µ—à–µ–Ω!');
    } else {
      console.log('‚ùå –ü–µ—Ä–µ—Å—á—ë—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }

    return {
      success,
      before: {
        profileSnapshotColumns: parseInt(reportBefore.profilesnapshot_columns_length),
        canonicalRows: parseInt(reportBefore.canonical_rows_length_before)
      },
      after: {
        canonicalRows: parseInt(reportAfter.canonical_rows_length_after)
      }
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞:', error);
    return { success: false, reason: error.message };
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç
const reportId = process.argv[2];
if (!reportId) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞: node scripts/gps-recalculate.cjs <reportId>');
  process.exit(1);
}

recalculateGpsReport(reportId).then(result => {
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  console.log(JSON.stringify(result, null, 2));
  process.exit(result.success ? 0 : 1);
}).catch(console.error);
