import 'dotenv/config';

async function testApiTrainings() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API /api/trainings...');
    
    const response = await fetch('http://localhost:3000/api/trainings', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
      return;
    }
    
    const data = await response.json();
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${data.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const typeGroups = data.reduce((acc: Record<string, number>, t: any) => {
      acc[t.type] = (acc[t.type] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∏–∑ API:');
    Object.entries(typeGroups).forEach(([type, count]) => {
      console.log(`  ${type}: ${count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ API:');
    const uniqueTypes = [...new Set(data.map((t: any) => t.type))];
    uniqueTypes.forEach(type => {
      const example = data.find((t: any) => t.type === type);
      if (example) {
        console.log(`  ${type}: "${example.title}" (${example.id})`);
      }
    });
    
    // –ò—â–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "Gym"
    const gymTrainings = data.filter((t: any) => 
      t.title.toLowerCase().includes('gym')
    );
    
    console.log('\nüèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å "Gym" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:');
    gymTrainings.forEach((t: any) => {
      console.log(`  "${t.title}" - —Ç–∏–ø: ${t.type}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  } finally {
    process.exit(0);
  }
}

testApiTrainings();
