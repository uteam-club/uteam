#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ RPE –æ–ø—Ä–æ—Å–∞—Ö
 */

import { db } from '../src/lib/db';
import { rpeSurveyResponse, player } from '../src/db/schema';
import { eq, desc, isNotNull } from 'drizzle-orm';

async function checkRPEDurations() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ RPE –æ–ø—Ä–æ—Å–∞—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const allRecordsWithDuration = await db
      .select({
        id: rpeSurveyResponse.id,
        playerId: rpeSurveyResponse.playerId,
        durationMinutes: rpeSurveyResponse.durationMinutes,
        rpeScore: rpeSurveyResponse.rpeScore,
        createdAt: rpeSurveyResponse.createdAt,
        playerFirstName: player.firstName,
        playerLastName: player.lastName,
      })
      .from(rpeSurveyResponse)
      .leftJoin(player, eq(rpeSurveyResponse.playerId, player.id))
      .where(isNotNull(rpeSurveyResponse.durationMinutes))
      .orderBy(desc(rpeSurveyResponse.createdAt))
      .limit(50);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allRecordsWithDuration.length} –∑–∞–ø–∏—Å–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é`);

    if (allRecordsWithDuration.length === 0) {
      console.log('‚ùå –ó–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ RPE –∑–∞–ø–∏—Å–µ–π
      const totalRecords = await db
        .select({ count: rpeSurveyResponse.id })
        .from(rpeSurveyResponse);
      
      console.log(`üìà –í—Å–µ–≥–æ RPE –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${totalRecords.length}`);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const durationGroups = allRecordsWithDuration.reduce((acc, record) => {
      const duration = record.durationMinutes || 0;
      acc[duration] = (acc[duration] || 0) + 1;
      return acc;
    }, {} as Record<number, number>);

    console.log('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º:');
    Object.entries(durationGroups)
      .sort(([, a], [, b]) => b - a)
      .forEach(([duration, count]) => {
        const percentage = ((count / allRecordsWithDuration.length) * 100).toFixed(1);
        console.log(`  ${duration} –º–∏–Ω: ${count} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
      });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å 70 –º–∏–Ω—É—Ç–∞–º–∏
    const records70 = allRecordsWithDuration.filter(r => r.durationMinutes === 70);
    if (records70.length > 0) {
      console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ ${records70.length} –∑–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 70 –º–∏–Ω—É—Ç:`);
      records70.slice(0, 10).forEach(record => {
        const date = record.createdAt.toISOString().split('T')[0];
        const time = record.createdAt.toISOString().split('T')[1].substr(0, 5);
        console.log(`  ${date} ${time} - ${record.playerLastName} ${record.playerFirstName} (RPE: ${record.rpeScore})`);
      });
      
      if (records70.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${records70.length - 10} –∑–∞–ø–∏—Å–µ–π`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    
    const recentRecords = allRecordsWithDuration.filter(r => r.createdAt > weekAgo);
    console.log(`\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: ${recentRecords.length} –∑–∞–ø–∏—Å–µ–π —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é`);
    
    const recent70 = recentRecords.filter(r => r.durationMinutes === 70);
    if (recent70.length > 0) {
      console.log(`   –ò–∑ –Ω–∏—Ö —Å 70 –º–∏–Ω—É—Ç–∞–º–∏: ${recent70.length} –∑–∞–ø–∏—Å–µ–π`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkRPEDurations()
  .then(() => {
    console.log('\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
