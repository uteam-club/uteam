const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://uteam-admin:Mell567234!@rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net:6432/uteam?sslmode=verify-full&sslrootcert=./yandex_root.crt'
});

async function testConcurrentAccess() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º...\n');

    // 1. –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
    
    const connectionCount = 10;
    const connections = [];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    for (let i = 0; i < connectionCount; i++) {
      const client = await pool.connect();
      connections.push(client);
    }
    
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${connectionCount} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);

    // 2. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á—Ç–µ–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á—Ç–µ–Ω–∏–π');
    
    const readPromises = connections.map(async (client, index) => {
      const startTime = Date.now();
      
      try {
        const result = await client.query(`
          SELECT rp.role, p.code, p.name, p.category
          FROM "GpsRolePermission" rp
          JOIN "GpsPermission" p ON rp."permissionId" = p.id
          WHERE rp.role = $1
          ORDER BY p.category, p.code
        `, ['COACH']);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: true,
          rowCount: result.rows.length
        };
        
      } catch (error) {
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: false,
          error: error.message
        };
      }
    });
    
    const readResults = await Promise.all(readPromises);
    const successfulReads = readResults.filter(r => r.success).length;
    const avgReadTime = readResults.reduce((sum, r) => sum + r.duration, 0) / readResults.length;
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π: ${successfulReads}/${connectionCount}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: ${avgReadTime.toFixed(2)}ms`);
    
    if (avgReadTime > 100) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —á—Ç–µ–Ω–∏—è: ${avgReadTime.toFixed(2)}ms > 100ms`);
    }

    // 3. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
    
    const writePromises = connections.map(async (client, index) => {
      const startTime = Date.now();
      
      try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
        const testCode = `test.concurrent.${index}.${Date.now()}`;
        
        await client.query(`
          INSERT INTO "GpsPermission" (code, name, description, category)
          VALUES ($1, $2, $3, $4)
        `, [testCode, `Test ${index}`, `Test Description ${index}`, 'test']);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await client.query(`
          DELETE FROM "GpsPermission" WHERE code = $1
        `, [testCode]);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: true
        };
        
      } catch (error) {
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: false,
          error: error.message
        };
      }
    });
    
    const writeResults = await Promise.all(writePromises);
    const successfulWrites = writeResults.filter(r => r.success).length;
    const avgWriteTime = writeResults.reduce((sum, r) => sum + r.duration, 0) / writeResults.length;
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${successfulWrites}/${connectionCount}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: ${avgWriteTime.toFixed(2)}ms`);
    
    if (avgWriteTime > 200) {
      console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${avgWriteTime.toFixed(2)}ms > 200ms`);
    }

    // 4. –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
    
    const lockTestPromises = connections.map(async (client, index) => {
      const startTime = Date.now();
      
      try {
        await client.query('BEGIN');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á—Ç–µ–Ω–∏—è
        await client.query('LOCK TABLE "GpsPermission" IN SHARE MODE');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const result = await client.query('SELECT COUNT(*) FROM "GpsPermission"');
        
        await client.query('COMMIT');
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: true,
          rowCount: result.rows[0].count
        };
        
      } catch (error) {
        await client.query('ROLLBACK');
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: false,
          error: error.message
        };
      }
    });
    
    const lockResults = await Promise.all(lockTestPromises);
    const successfulLocks = lockResults.filter(r => r.success).length;
    const avgLockTime = lockResults.reduce((sum, r) => sum + r.duration, 0) / lockResults.length;
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ${successfulLocks}/${connectionCount}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${avgLockTime.toFixed(2)}ms`);

    // 5. –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    const transactionPromises = connections.map(async (client, index) => {
      const startTime = Date.now();
      
      try {
        await client.query('BEGIN');
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const testCode = `test.transaction.${index}.${Date.now()}`;
        await client.query(`
          INSERT INTO "GpsPermission" (code, name, description, category)
          VALUES ($1, $2, $3, $4)
        `, [testCode, `Transaction Test ${index}`, `Transaction Description ${index}`, 'test']);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
        await new Promise(resolve => setTimeout(resolve, 10));
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('ROLLBACK');
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: true
        };
        
      } catch (error) {
        await client.query('ROLLBACK');
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: false,
          error: error.message
        };
      }
    });
    
    const transactionResults = await Promise.all(transactionPromises);
    const successfulTransactions = transactionResults.filter(r => r.success).length;
    const avgTransactionTime = transactionResults.reduce((sum, r) => sum + r.duration, 0) / transactionResults.length;
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${successfulTransactions}/${connectionCount}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${avgTransactionTime.toFixed(2)}ms`);

    // 6. –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏');
    
    const loadTestConnections = 20;
    const loadTestIterations = 50;
    
    const loadTestPromises = Array.from({ length: loadTestConnections }, async (_, index) => {
      const client = await pool.connect();
      
      try {
        const startTime = Date.now();
        
        for (let i = 0; i < loadTestIterations; i++) {
          await client.query(`
            SELECT rp.allowed
            FROM "GpsRolePermission" rp
            JOIN "GpsPermission" p ON rp."permissionId" = p.id
            WHERE rp.role = $1 AND p.code = $2
          `, ['COACH', 'gps.reports.view']);
        }
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: true,
          iterations: loadTestIterations
        };
        
      } catch (error) {
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        return {
          connection: index,
          duration,
          success: false,
          error: error.message,
          iterations: loadTestIterations
        };
      } finally {
        client.release();
      }
    });
    
    const loadResults = await Promise.all(loadTestPromises);
    const successfulLoads = loadResults.filter(r => r.success).length;
    const totalIterations = loadResults.reduce((sum, r) => sum + (r.iterations || 0), 0);
    const avgLoadTime = loadResults.reduce((sum, r) => sum + r.duration, 0) / loadResults.length;
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${successfulLoads}/${loadTestConnections}`);
    console.log(`   ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${totalIterations}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgLoadTime.toFixed(2)}ms`);

    // 7. –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    
    const errorTestPromises = connections.map(async (client, index) => {
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await client.query('SELECT * FROM nonexistent_table');
        
        return {
          connection: index,
          success: false,
          error: 'Expected error not thrown'
        };
        
      } catch (error) {
        return {
          connection: index,
          success: true,
          error: error.message
        };
      }
    });
    
    const errorResults = await Promise.all(errorTestPromises);
    const successfulErrors = errorResults.filter(r => r.success).length;
    
    console.log(`   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫: ${successfulErrors}/${connectionCount}`);

    // 8. –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    console.log('\n8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
    
    for (const client of connections) {
      client.release();
    }
    
    console.log(`   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${connections.length} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);

    // 9. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n9Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    
    const totalTests = readResults.length + writeResults.length + lockResults.length + transactionResults.length;
    const totalSuccessful = successfulReads + successfulWrites + successfulLocks + successfulTransactions;
    const successRate = (totalSuccessful / totalTests) * 100;
    
    console.log(`   üìä –û–±—â–∏–π —É—Å–ø–µ—Ö: ${totalSuccessful}/${totalTests} (${successRate.toFixed(1)}%)`);
    console.log(`   üìä –ß—Ç–µ–Ω–∏—è: ${successfulReads}/${readResults.length} (${(successfulReads/readResults.length*100).toFixed(1)}%)`);
    console.log(`   üìä –ó–∞–ø–∏—Å–∏: ${successfulWrites}/${writeResults.length} (${(successfulWrites/writeResults.length*100).toFixed(1)}%)`);
    console.log(`   üìä –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${successfulLocks}/${lockResults.length} (${(successfulLocks/lockResults.length*100).toFixed(1)}%)`);
    console.log(`   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${successfulTransactions}/${transactionResults.length} (${(successfulTransactions/transactionResults.length*100).toFixed(1)}%)`);

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', error);
  } finally {
    await pool.end();
  }
}

testConcurrentAccess();
