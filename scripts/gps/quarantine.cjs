const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
const reportDir = 'artifacts/purge-quarantine';
if (!fs.existsSync(reportDir)) {
  fs.mkdirSync(reportDir, { recursive: true });
}

// –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é
const purgeCandidatesPath = 'artifacts/gps-audit/PURGE_CANDIDATES.json';
if (!fs.existsSync(purgeCandidatesPath)) {
  console.error('‚ùå –§–∞–π–ª PURGE_CANDIDATES.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

const purgeCandidates = JSON.parse(fs.readFileSync(purgeCandidatesPath, 'utf8'));
console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${purgeCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫ –∫–∞—Ä–∞–Ω—Ç–∏–Ω—É`);

const moved = [];
const missing = [];

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É legacy/gps-v1/
const legacyDir = 'legacy/gps-v1';
if (!fs.existsSync(legacyDir)) {
  fs.mkdirSync(legacyDir, { recursive: true });
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
for (const candidate of purgeCandidates) {
  const sourcePath = candidate.path;
  const targetPath = path.join(legacyDir, sourcePath);
  const targetDir = path.dirname(targetPath);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(sourcePath)) {
      missing.push({
        path: sourcePath,
        reason: 'file not found',
        timestamp: new Date().toISOString()
      });
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω): ${sourcePath}`);
      continue;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ git mv
    try {
      execSync(`git mv "${sourcePath}" "${targetPath}"`, { stdio: 'pipe' });
      
      moved.push({
        path: sourcePath,
        target: targetPath,
        size: candidate.size || 0,
        kind: candidate.kind || 'unknown',
        timestamp: new Date().toISOString()
      });
      
      console.log(`‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: ${sourcePath} ‚Üí ${targetPath}`);
    } catch (error) {
      // –ï—Å–ª–∏ git mv –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      try {
        fs.renameSync(sourcePath, targetPath);
        
        moved.push({
          path: sourcePath,
          target: targetPath,
          size: candidate.size || 0,
          kind: candidate.kind || 'unknown',
          method: 'fs.renameSync',
          timestamp: new Date().toISOString()
        });
        
        console.log(`‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω (fs): ${sourcePath} ‚Üí ${targetPath}`);
      } catch (fsError) {
        missing.push({
          path: sourcePath,
          reason: `git mv failed: ${error.message}, fs.renameSync failed: ${fsError.message}`,
          timestamp: new Date().toISOString()
        });
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${sourcePath} - ${fsError.message}`);
      }
    }
  } catch (error) {
    missing.push({
      path: sourcePath,
      reason: error.message,
      timestamp: new Date().toISOString()
    });
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${sourcePath} - ${error.message}`);
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã
fs.writeFileSync(
  path.join(reportDir, 'MOVED.json'),
  JSON.stringify(moved, null, 2)
);

fs.writeFileSync(
  path.join(reportDir, 'MISSING.json'),
  JSON.stringify(missing, null, 2)
);

// –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
const summary = `# GPS v1 Quarantine Summary

## Statistics
- **Total candidates:** ${purgeCandidates.length}
- **Successfully moved:** ${moved.length}
- **Missing/failed:** ${missing.length}
- **Success rate:** ${((moved.length / purgeCandidates.length) * 100).toFixed(1)}%

## Moved Files
${moved.map(item => `- ${item.path} ‚Üí ${item.target}`).join('\n')}

## Missing/Failed Files
${missing.map(item => `- ${item.path} (${item.reason})`).join('\n')}

## Timestamp
Generated: ${new Date().toISOString()}
`;

fs.writeFileSync(path.join(reportDir, 'SUMMARY.md'), summary);

console.log('\nüìä –°–≤–æ–¥–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞:');
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: ${moved.length}`);
console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ/–æ—à–∏–±–æ–∫: ${missing.length}`);
console.log(`üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${reportDir}/`);
