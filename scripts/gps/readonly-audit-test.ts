#!/usr/bin/env tsx
// scripts/gps/readonly-audit-test.ts

import { config } from 'dotenv';
import { Client } from 'pg';
import fs from 'fs';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

interface ProfileSnapshotColumn {
  sourceHeader: string;
  canonicalKey: string;
  displayName: string;
  isVisible?: boolean;
  order?: number;
  displayUnit?: string;
}

async function readonlyAuditTest() {
  console.log('üîç Read-only –∞—É–¥–∏—Ç –ø—Ä–æ—Ñ–∏–ª—è "Test" –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞...\n');
  
  const lines: string[] = [];
  lines.push('# GPS Profile "Test" - Read-only Audit');
  lines.push('');
  lines.push(`**–î–∞—Ç–∞:** ${new Date().toISOString()}`);
  lines.push('');

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // 1) –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å "Test"
    console.log('üîç –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å "Test"...');
    const profileResult = await client.query(`
      SELECT id, name, "gpsSystem", "createdAt"
      FROM public."GpsProfile"
      WHERE name = 'Test'
      ORDER BY "createdAt" DESC
      LIMIT 1
    `);

    if (profileResult.rows.length === 0) {
      lines.push('## ‚ùå –ü—Ä–æ—Ñ–∏–ª—å "Test" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å "Test" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const profile = profileResult.rows[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.id})`);

    lines.push('## 1. –ü—Ä–æ—Ñ–∏–ª—å "Test"');
    lines.push(`- **ID:** ${profile.id}`);
    lines.push(`- **Name:** ${profile.name}`);
    lines.push(`- **GPS System:** ${profile.gpsSystem}`);
    lines.push(`- **Created:** ${profile.createdAt}`);
    lines.push('');

    // 2) –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π GpsReport —Å —ç—Ç–∏–º profileId
    console.log('üîç –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è...');
    const reportResult = await client.query(`
      SELECT id, "fileName", "createdAt", "processedData"
      FROM public."GpsReport"
      WHERE "profileId" = $1
      ORDER BY "createdAt" DESC
      LIMIT 1
    `, [profile.id]);

    if (reportResult.rows.length === 0) {
      lines.push('## ‚ùå –û—Ç—á—ë—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è "Test" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('‚ùå –û—Ç—á—ë—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è "Test" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const report = reportResult.rows[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç: ${report.fileName} (${report.id})`);

    lines.push('## 2. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç');
    lines.push(`- **ID:** ${report.id}`);
    lines.push(`- **File:** ${report.fileName}`);
    lines.push(`- **Created:** ${report.createdAt}`);
    lines.push('');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const processedData = report.processedData;
    const rawData = processedData?.rawData || [];
    const headers = processedData?.headers || [];
    const profileSnapshot = processedData?.profileSnapshot || {};
    const profileSnapshotColumns = profileSnapshot?.columns || [];

    lines.push('### Raw Data (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):');
    lines.push('```');
    rawData.slice(0, 20).forEach((row: any[], index: number) => {
      lines.push(`${index + 1}: ${row.join(', ')}`);
    });
    lines.push('```');
    lines.push('');

    if (headers.length > 0) {
      lines.push('### Headers:');
      lines.push('```');
      lines.push(headers.join(', '));
      lines.push('```');
      lines.push('');
    }

    lines.push('### Profile Snapshot Columns:');
    lines.push('| sourceHeader | canonicalKey | displayName | isVisible | order | displayUnit |');
    lines.push('|--------------|--------------|-------------|-----------|-------|-------------|');
    profileSnapshotColumns.forEach((col: ProfileSnapshotColumn) => {
      lines.push(`| ${col.sourceHeader || ''} | ${col.canonicalKey || ''} | ${col.displayName || ''} | ${col.isVisible || false} | ${col.order || 0} | ${col.displayUnit || ''} |`);
    });
    lines.push('');

    // 3) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏–∑ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–∏ –±–µ—Ä—ë—Ç—Å—è athlete_name
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ athlete_name...');
    const athleteNameColumn = profileSnapshotColumns.find(col => col.canonicalKey === 'athlete_name');
    
    if (athleteNameColumn) {
      lines.push('## 3. Athlete Name Mapping');
      lines.push(`- **Current sourceHeader:** ${athleteNameColumn.sourceHeader}`);
      lines.push(`- **Canonical Key:** ${athleteNameColumn.canonicalKey}`);
      lines.push('');

      // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –≤ raw –¥–∞–Ω–Ω—ã—Ö
      const sourceHeaderIndex = headers.indexOf(athleteNameColumn.sourceHeader);
      if (sourceHeaderIndex >= 0) {
        const athleteNameValues = rawData.slice(0, 20).map(row => row[sourceHeaderIndex]).filter(Boolean);
        lines.push('### –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π athlete_name:');
        lines.push('```');
        athleteNameValues.slice(0, 10).forEach((value: any, index: number) => {
          lines.push(`${index + 1}: ${value}`);
        });
        lines.push('```');
        lines.push('');
      }
    }

    // 4) –ù–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û
    console.log('üîç –ò—â–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û...');
    
    const positionCodes = new Set([
      'MF', 'W', 'S', 'CB', 'GK', 'ST', 'CM', 'DM', 'AM', 'RM', 'LM', 'RW', 'LW', 'CF', 'SS',
      '–í–†', '–¶–ó', '–õ–ó', '–ü–ó', '–ù', '–ü–§', '–õ–§', '–¶–ü', '–û–ü', '–ê–ü', '–ü–ü', '–õ–ü', '–§'
    ]);

    function isNameLike(value: any): boolean {
      if (!value || typeof value !== 'string') return false;
      const trimmed = value.trim();
      if (trimmed.length < 8) return false;
      if (positionCodes.has(trimmed.toUpperCase())) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ >= 2 —Å–ª–æ–≤–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
      const words = trimmed.split(/\s+/);
      if (words.length < 2) return false;
      
      return words.every(word => /^[A-Za-z–ê-–Ø–Å–∞-—è—ë\-']+$/.test(word));
    }

    let bestCandidate = { header: '', score: 0, values: [] as any[] };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
    for (let colIndex = 0; colIndex < headers.length; colIndex++) {
      const header = headers[colIndex];
      const values = rawData.slice(0, 20).map(row => row[colIndex]).filter(Boolean);
      
      if (values.length === 0) continue;
      
      const nameLikeCount = values.filter(isNameLike).length;
      const score = nameLikeCount / values.length;
      
      if (score > bestCandidate.score) {
        bestCandidate = {
          header,
          score,
          values: values.slice(0, 10)
        };
      }
    }

    lines.push('## 4. –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û');
    if (bestCandidate.score > 0) {
      lines.push(`- **Header:** ${bestCandidate.header}`);
      lines.push(`- **Score:** ${(bestCandidate.score * 100).toFixed(1)}% (–¥–æ–ª—è –∏–º—ë–Ω)`);
      lines.push('');
      lines.push('### –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:');
      lines.push('```');
      bestCandidate.values.forEach((value: any, index: number) => {
        lines.push(`${index + 1}: ${value}`);
      });
      lines.push('```');
      lines.push('');
    } else {
      lines.push('- **–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω** (–Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–º—ë–Ω)');
      lines.push('');
    }

    // 5) HSR –∞–Ω–∞–ª–∏–∑
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HSR...');
    const hsrColumn = profileSnapshotColumns.find(col => col.canonicalKey === 'hsr_ratio');
    
    if (hsrColumn) {
      lines.push('## 5. HSR Analysis');
      lines.push(`- **Source Header:** ${hsrColumn.sourceHeader}`);
      lines.push(`- **Canonical Key:** ${hsrColumn.canonicalKey}`);
      lines.push('');

      const hsrHeaderIndex = headers.indexOf(hsrColumn.sourceHeader);
      if (hsrHeaderIndex >= 0) {
        const hsrValues = rawData.slice(0, 20)
          .map(row => parseFloat(row[hsrHeaderIndex]))
          .filter(val => !isNaN(val));
        
        if (hsrValues.length > 0) {
          const min = Math.min(...hsrValues);
          const max = Math.max(...hsrValues);
          const mean = hsrValues.reduce((sum, val) => sum + val, 0) / hsrValues.length;
          
          lines.push('### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HSR (–ø–µ—Ä–≤—ã–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π):');
          lines.push(`- **Min:** ${min}`);
          lines.push(`- **Max:** ${max}`);
          lines.push(`- **Mean:** ${mean.toFixed(2)}`);
          lines.push('');
          
          const looksLikePercent = mean > 1;
          lines.push(`### –ê–Ω–∞–ª–∏–∑: ${looksLikePercent ? '‚ùå –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (>1)' : '‚úÖ –ü–æ—Ö–æ–∂–µ –Ω–∞ ratio (0-1)'}`);
          lines.push('');
        }
      }
    }

    // 6) Max Speed –∞–Ω–∞–ª–∏–∑
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Max Speed...');
    const speedColumn = profileSnapshotColumns.find(col => 
      col.canonicalKey === 'max_speed_ms' || col.canonicalKey === 'max_speed_kmh'
    );
    
    if (speedColumn) {
      lines.push('## 6. Max Speed Analysis');
      lines.push(`- **Source Header:** ${speedColumn.sourceHeader}`);
      lines.push(`- **Canonical Key:** ${speedColumn.canonicalKey}`);
      lines.push('');

      const speedHeaderIndex = headers.indexOf(speedColumn.sourceHeader);
      if (speedHeaderIndex >= 0) {
        const speedValues = rawData.slice(0, 20)
          .map(row => parseFloat(row[speedHeaderIndex]))
          .filter(val => !isNaN(val));
        
        if (speedValues.length > 0) {
          const min = Math.min(...speedValues);
          const max = Math.max(...speedValues);
          const mean = speedValues.reduce((sum, val) => sum + val, 0) / speedValues.length;
          
          lines.push('### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Max Speed (–ø–µ—Ä–≤—ã–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π):');
          lines.push(`- **Min:** ${min}`);
          lines.push(`- **Max:** ${max}`);
          lines.push(`- **Mean:** ${mean.toFixed(2)}`);
          lines.push('');
          
          let unitGuess = '';
          if (mean > 50) {
            unitGuess = '‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ m/s (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)';
          } else if (mean >= 15 && mean <= 45) {
            unitGuess = '‚úÖ –ü–æ—Ö–æ–∂–µ –Ω–∞ km/h (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)';
          } else {
            unitGuess = '‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã';
          }
          
          lines.push(`### –ê–Ω–∞–ª–∏–∑ –µ–¥–∏–Ω–∏—Ü: ${unitGuess}`);
          lines.push('');
        }
      }
    }

    // 7) –°–≤–æ–¥–∫–∞
    lines.push('## 7. –°–≤–æ–¥–∫–∞');
    lines.push('');
    
    if (athleteNameColumn) {
      const sourceHeaderIndex = headers.indexOf(athleteNameColumn.sourceHeader);
      const athleteNameValues = sourceHeaderIndex >= 0 ? 
        rawData.slice(0, 10).map(row => row[sourceHeaderIndex]).filter(Boolean) : [];
      
      lines.push('### Athlete Name:');
      lines.push(`- **Current sourceHeader:** ${athleteNameColumn.sourceHeader}`);
      lines.push(`- **–ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:** ${athleteNameValues.join(', ')}`);
      lines.push('');
    }
    
    if (bestCandidate.score > 0) {
      lines.push('### Best Name Candidate:');
      lines.push(`- **Header:** ${bestCandidate.header}`);
      lines.push(`- **–ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:** ${bestCandidate.values.join(', ')}`);
      lines.push('');
    }
    
    if (hsrColumn) {
      const hsrHeaderIndex = headers.indexOf(hsrColumn.sourceHeader);
      const hsrValues = hsrHeaderIndex >= 0 ? 
        rawData.slice(0, 20).map(row => parseFloat(row[hsrHeaderIndex])).filter(val => !isNaN(val)) : [];
      
      if (hsrValues.length > 0) {
        const mean = hsrValues.reduce((sum, val) => sum + val, 0) / hsrValues.length;
        lines.push('### HSR:');
        lines.push(`- **Header:** ${hsrColumn.sourceHeader}`);
        lines.push(`- **Min/Max/Mean:** ${Math.min(...hsrValues)}/${Math.max(...hsrValues)}/${mean.toFixed(2)}`);
        lines.push(`- **–ê–Ω–∞–ª–∏–∑:** ${mean > 1 ? '–ü–æ—Ö–æ–∂–µ –Ω–∞ %' : '–ü–æ—Ö–æ–∂–µ –Ω–∞ ratio'}`);
        lines.push('');
      }
    }
    
    if (speedColumn) {
      const speedHeaderIndex = headers.indexOf(speedColumn.sourceHeader);
      const speedValues = speedHeaderIndex >= 0 ? 
        rawData.slice(0, 20).map(row => parseFloat(row[speedHeaderIndex])).filter(val => !isNaN(val)) : [];
      
      if (speedValues.length > 0) {
        const mean = speedValues.reduce((sum, val) => sum + val, 0) / speedValues.length;
        lines.push('### Max Speed:');
        lines.push(`- **Header:** ${speedColumn.sourceHeader}`);
        lines.push(`- **Min/Max/Mean:** ${Math.min(...speedValues)}/${Math.max(...speedValues)}/${mean.toFixed(2)}`);
        lines.push(`- **–ê–Ω–∞–ª–∏–∑:** ${mean > 50 ? '–ü–æ—Ö–æ–∂–µ –Ω–∞ m/s (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ)' : mean >= 15 && mean <= 45 ? '–ü–æ—Ö–æ–∂–µ –Ω–∞ km/h' : '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã'}`);
        lines.push('');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    lines.push('## ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ');
    lines.push(`\`\`\`\n${error}\n\`\`\``);
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const reportPath = path.resolve('artifacts/gps_profile_TEST_readonly_audit.md');
  fs.writeFileSync(reportPath, lines.join('\n'), 'utf8');
  console.log(`\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
readonlyAuditTest();
