#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
"""

import os
import psycopg2
import psycopg2.extras
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'rc1d-40uv9fbi8p02b5c0.mdb.yandexcloud.net',
    'port': 6432,
    'database': 'uteam',
    'user': 'uteam_bot_reader',
    'password': 'uteambot567234!',
    'sslmode': 'verify-ca',
    'sslrootcert': './CA.pem'
}

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        connection = psycopg2.connect(**DB_CONFIG)
        return connection
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_player_data(pin_code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ PIN-–∫–æ–¥—É"""
    connection = get_db_connection()
    if not connection:
        return None
    
    try:
        with connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
            query = """
            SELECT 
                p."id",
                p."firstName",
                p."lastName",
                p."telegramId",
                p."pinCode",
                p."language",
                p."teamId",
                t."name" as "teamName",
                t."clubId",
                t."timezone"
            FROM "Player" p
            LEFT JOIN "Team" t ON p."teamId" = t."id"
            WHERE p."pinCode" = %s
            """
            cursor.execute(query, (pin_code,))
            player = cursor.fetchone()
            return dict(player) if player else None
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: {e}")
        return None
    finally:
        connection.close()

def check_survey_schedules(team_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
    connection = get_db_connection()
    if not connection:
        return []
    
    try:
        with connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø—Ä–æ—Å—ã
            query_morning = """
            SELECT 
                ss."id",
                ss."teamId",
                ss."sendTime",
                ss."enabled",
                ss."surveyType",
                ss."recipientsConfig",
                t."timezone"
            FROM "SurveySchedule" ss
            LEFT JOIN "Team" t ON ss."teamId" = t."id"
            WHERE ss."teamId" = %s AND ss."surveyType" = 'morning'
            """
            cursor.execute(query_morning, (team_id,))
            schedules = cursor.fetchall()
            return [dict(schedule) for schedule in schedules]
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
        return []
    finally:
        connection.close()

def check_team_players(team_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å telegramId"""
    connection = get_db_connection()
    if not connection:
        return []
    
    try:
        with connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
            query = """
            SELECT 
                p."id",
                p."firstName",
                p."lastName",
                p."telegramId",
                p."pinCode",
                p."language"
            FROM "Player" p
            WHERE p."teamId" = %s AND p."telegramId" IS NOT NULL
            ORDER BY p."firstName", p."lastName"
            """
            cursor.execute(query, (team_id,))
            players = cursor.fetchall()
            return [dict(player) for player in players]
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return []
    finally:
        connection.close()

def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π Telegram —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PIN-–∫–æ–¥ –∏–≥—Ä–æ–∫–∞
    pin_code = input("–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –∏–≥—Ä–æ–∫–∞: ").strip()
    
    if not pin_code:
        print("‚ùå PIN-–∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å PIN-–∫–æ–¥–æ–º: {pin_code}")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    player = check_player_data(pin_code)
    if not player:
        print("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º PIN-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω—ã:")
    print(f"   ID: {player['id']}")
    print(f"   –ò–º—è: {player['firstName']} {player['lastName']}")
    print(f"   Telegram ID: {player['telegramId']}")
    print(f"   –Ø–∑—ã–∫: {player['language']}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {player['teamName']} (ID: {player['teamId']})")
    print(f"   –ö–ª—É–±: {player['clubId']}")
    print(f"   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {player['timezone']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    print(f"\nüìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {player['teamName']}")
    print("-" * 40)
    
    schedules = check_survey_schedules(player['teamId'])
    if not schedules:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        print("   2. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return
    
    for schedule in schedules:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print(f"   –¢–∏–ø: {schedule['surveyType']}")
        print(f"   –í—Ä–µ–º—è: {schedule['sendTime']}")
        print(f"   –í–∫–ª—é—á–µ–Ω–æ: {schedule['enabled']}")
        print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {schedule['recipientsConfig']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if schedule['recipientsConfig']:
            import json
            try:
                config = json.loads(schedule['recipientsConfig'])
                if config.get('isIndividualMode'):
                    selected_ids = config.get('selectedPlayerIds', [])
                    print(f"   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –≤—ã–±—Ä–∞–Ω–æ {len(selected_ids)} –∏–≥—Ä–æ–∫–æ–≤")
                    if player['id'] not in selected_ids:
                        print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò–≥—Ä–æ–∫ –ù–ï –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!")
                        print(f"      ID –∏–≥—Ä–æ–∫–∞: {player['id']}")
                        print(f"      –í—ã–±—Ä–∞–Ω–Ω—ã–µ ID: {selected_ids}")
                    else:
                        print(f"   ‚úÖ –ò–≥—Ä–æ–∫ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                else:
                    print(f"   ‚úÖ –û–±—â–∏–π —Ä–µ–∂–∏–º: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        else:
            print(f"   ‚úÖ –û–±—â–∏–π —Ä–µ–∂–∏–º: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    print(f"\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å Telegram ID")
    print("-" * 40)
    
    team_players = check_team_players(player['teamId'])
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(team_players)} –∏–≥—Ä–æ–∫–æ–≤ —Å Telegram ID:")
    
    for p in team_players:
        status = "‚úÖ" if p['id'] == player['id'] else "  "
        print(f"{status} {p['firstName']} {p['lastName']} (ID: {p['id']}, Telegram: {p['telegramId']})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("-" * 40)
    
    if not player['telegramId']:
        print("‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç Telegram ID")
        print("   –†–µ—à–µ–Ω–∏–µ: –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É –∏ –≤–≤–µ—Å—Ç–∏ PIN-–∫–æ–¥")
    elif not schedules:
        print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏")
        print("   –†–µ—à–µ–Ω–∏–µ: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    elif not any(s['enabled'] for s in schedules):
        print("‚ùå –í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        print("   –†–µ—à–µ–Ω–∏–µ: –í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        for schedule in schedules:
            if schedule['recipientsConfig']:
                import json
                try:
                    config = json.loads(schedule['recipientsConfig'])
                    if config.get('isIndividualMode') and player['id'] not in config.get('selectedPlayerIds', []):
                        print("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                        print("   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
                        break
                except:
                    pass
        else:
            print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:")
            print("   1. –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ")
            print("   2. –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏)")
            print("   3. –ò–≥—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

if __name__ == "__main__":
    main()
