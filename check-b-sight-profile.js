const { db } = require('./src/lib/db');
const { gpsProfile, gpsReport } = require('./src/db/schema');
const { eq, and, sql } = require('drizzle-orm');

async function checkB_SightProfile() {
  try {
    console.log('=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–§–ò–õ–Ø B-SIGHT ===');
    
    // –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å B-SIGHT
    const profiles = await db
      .select()
      .from(gpsProfile)
      .where(sql`LOWER(${gpsProfile.name}) LIKE '%b-sight%' OR LOWER(${gpsProfile.name}) LIKE '%bsight%'`);
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π B-SIGHT:', profiles.length);
    
    if (profiles.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å B-SIGHT –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    for (const profile of profiles) {
      console.log('\nüìã –ü—Ä–æ—Ñ–∏–ª—å:', profile.name);
      console.log('   ID:', profile.id);
      console.log('   –ö–ª—É–±:', profile.clubId);
      console.log('   –ê–∫—Ç–∏–≤–µ–Ω:', profile.isActive);
      
      // –ò—â–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      const reports = await db
        .select({
          id: gpsReport.id,
          name: gpsReport.name,
          eventType: gpsReport.eventType,
          eventId: gpsReport.eventId,
          profileId: gpsReport.profileId,
          gpsProfileId: gpsReport.gpsProfileId,
          createdAt: gpsReport.createdAt
        })
        .from(gpsReport)
        .where(
          and(
            eq(gpsReport.clubId, profile.clubId),
            sql`(${gpsReport.profileId} = ${profile.id} OR ${gpsReport.gpsProfileId} = ${profile.id})`
          )
        );
      
      console.log('   –û—Ç—á–µ—Ç–æ–≤:', reports.length);
      
      if (reports.length > 0) {
        console.log('   üìä –î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–æ–≤:');
        reports.forEach((report, index) => {
          console.log(`     ${index + 1}. ${report.name}`);
          console.log(`        ID: ${report.id}`);
          console.log(`        –¢–∏–ø: ${report.eventType}`);
          console.log(`        Event ID: ${report.eventId}`);
          console.log(`        Profile ID: ${report.profileId}`);
          console.log(`        GPS Profile ID: ${report.gpsProfileId}`);
          console.log(`        –°–æ–∑–¥–∞–Ω: ${report.createdAt}`);
        });
      } else {
        console.log('   ‚úÖ –û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    process.exit(0);
  }
}

checkB_SightProfile();
