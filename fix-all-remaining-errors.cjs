#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫
function fixAllRemainingErrors() {
  const errorFiles = [
    'src/app/dashboard/coaching/matches/[id]/page.tsx',
    'src/app/dashboard/coaching/matches/page.tsx',
    'src/app/dashboard/coaching/trainings/[id]/page.tsx',
    'src/app/dashboard/documents/page.tsx',
    'src/app/dashboard/training/exercises/page.tsx',
    'src/components/fitness-tests/EditFitnessTestModal.tsx',
    'src/components/gps/CanonicalMetricSelectionModal.tsx',
    'src/components/gps/GpsDataTable.tsx',
    'src/components/gps/PlayerMappingModal.tsx',
    'src/components/matches/AddMatchModal.tsx',
    'src/components/surveys/DateBasedTrainingDurationModal.tsx',
    'src/components/surveys/RPESchedulingModal.tsx',
    'src/components/surveys/TrainingDurationManager.tsx',
    'src/components/surveys/TrainingDurationModal.tsx',
    'src/components/training/CreateTrainingModal.tsx',
    'src/components/training/ExerciseTimingModal.tsx',
    'src/components/training/SelectExercisesModal.tsx',
    'src/components/ui/timezone-select.tsx'
  ];

  let fixedCount = 0;

  errorFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      const originalContent = content;

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={e =  autoComplete="off"> function(e.target.value)}
      content = content.replace(
        /onChange=\{e\s*=\s*autoComplete="off">\s*([^(]+)\(e\.target\.value\)\}/g,
        'onChange={e => $1(e.target.value)} autoComplete="off"'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={e =  autoComplete="off"> function(e.target.value)}
      content = content.replace(
        /onChange=\{e\s*=\s*autoComplete="off">\s*([^(]+)\(([^)]+)\)\}/g,
        'onChange={e => $1($2)} autoComplete="off"'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (—Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(setFunction(e.target.value))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(e\.target\.value\)\)\}/g,
        'onChange={e => $1(e.target.value)}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(setFunction(parseInt(e.target.value)))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(parseInt\(e\.target\.value\)\)\)\}/g,
        'onChange={e => $1(parseInt(e.target.value))}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–ø—è—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(setFunction(Number(e.target.value)))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(Number\(e\.target\.value\)\)\)\}/g,
        'onChange={e => $1(Number(e.target.value))}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 6: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (—à–µ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(handleFunction(e.target.value))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(e\.target\.value\)\)\}/g,
        'onChange={e => $1(e.target.value)}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 7: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (—Å–µ–¥—å–º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(handleFunction(player.id, e.target.value))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(([^,]+),\s*e\.target\.value\)\)\}/g,
        'onChange={e => $1($2, e.target.value)}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 8: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–≤–æ—Å—å–º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(handleFunction(training.id, e.target.value))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(([^,]+),\s*e\.target\.value\)\)\}/g,
        'onChange={e => $1($2, e.target.value)}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 9: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–¥–µ–≤—è—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(handleFunction('field', e.target.value))}
      content = content.replace(
        /onChange=\{\(([^(]+)\('([^']+)',\s*e\.target\.value\)\)\}/g,
        'onChange={e => $1(\'$2\', e.target.value)}'
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 10: onChange —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–¥–µ—Å—è—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
      // –ü–∞—Ç—Ç–µ—Ä–Ω: onChange={(handleFunction(e.target.value, setFunction, 1, 20))}
      content = content.replace(
        /onChange=\{\(([^(]+)\(e\.target\.value,\s*([^,]+),\s*([^,]+),\s*([^)]+)\)\)\}/g,
        'onChange={e => $1(e.target.value, $2, $3, $4)}'
      );

      if (content !== originalContent) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
        fixedCount++;
      } else {
        console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filePath}`);
      }
    } else {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
  });

  return fixedCount;
}

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫...');
const fixedCount = fixAllRemainingErrors();
console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
console.log('‚ú® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π: npm run typecheck:ci');
