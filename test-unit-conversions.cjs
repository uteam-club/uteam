const { convertUnit, isConversionSupported, formatValue, getPrecision } = require('./src/lib/unit-converter');

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 */
function testAllConversions() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è...\n');

  const testCases = [
    // === –î–ò–°–¢–ê–ù–¶–ò–Ø ===
    {
      category: 'Distance (–î–∏—Å—Ç–∞–Ω—Ü–∏—è)',
      tests: [
        { from: 'm', to: 'km', value: 1000, expected: 1 },
        { from: 'm', to: 'miles', value: 1609.34, expected: 1 },
        { from: 'm', to: 'yards', value: 1, expected: 1.09361 },
        { from: 'm', to: 'feet', value: 1, expected: 3.28084 },
        { from: 'km', to: 'm', value: 1, expected: 1000 },
        { from: 'km', to: 'miles', value: 1, expected: 0.621371 },
        { from: 'miles', to: 'm', value: 1, expected: 1609.34 },
        { from: 'yards', to: 'm', value: 1, expected: 0.9144 },
        { from: 'feet', to: 'm', value: 1, expected: 0.3048 },
        { from: 'yd', to: 'm', value: 1, expected: 0.9144 },
      ]
    },

    // === –°–ö–û–†–û–°–¢–¨ ===
    {
      category: 'Speed (–°–∫–æ—Ä–æ—Å—Ç—å)',
      tests: [
        { from: 'm/s', to: 'km/h', value: 1, expected: 3.6 },
        { from: 'm/s', to: 'mph', value: 1, expected: 2.23694 },
        { from: 'm/s', to: 'knots', value: 1, expected: 1.94384 },
        { from: 'm/s', to: 'm/min', value: 1, expected: 60 },
        { from: 'km/h', to: 'm/s', value: 3.6, expected: 1 },
        { from: 'km/h', to: 'mph', value: 1, expected: 0.621371 },
        { from: 'mph', to: 'm/s', value: 1, expected: 0.44704 },
        { from: 'knots', to: 'm/s', value: 1, expected: 0.514444 },
        { from: 'm/min', to: 'm/s', value: 60, expected: 1 },
      ]
    },

    // === –í–†–ï–ú–Ø ===
    {
      category: 'Time (–í—Ä–µ–º—è)',
      tests: [
        { from: 's', to: 'min', value: 60, expected: 1 },
        { from: 's', to: 'h', value: 3600, expected: 1 },
        { from: 's', to: 'ms', value: 1, expected: 1000 },
        { from: 'min', to: 's', value: 1, expected: 60 },
        { from: 'min', to: 'h', value: 60, expected: 1 },
        { from: 'h', to: 's', value: 1, expected: 3600 },
        { from: 'h', to: 'min', value: 1, expected: 60 },
        { from: 'ms', to: 's', value: 1000, expected: 1 },
        { from: 'ms', to: 'min', value: 60000, expected: 1 },
        { from: 'ms', to: 'h', value: 3600000, expected: 1 },
      ]
    },

    // === –í–†–ï–ú–Ø –í –§–û–†–ú–ê–¢–ê–• ===
    {
      category: 'Time Formats (–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏)',
      tests: [
        { from: 'hh:mm:ss', to: 's', value: '01:19:22', expected: 4752 },
        { from: 'hh:mm', to: 's', value: '01:19', expected: 4740 },
        { from: 'mm:ss', to: 's', value: '19:22', expected: 1162 },
        { from: 'ss', to: 's', value: '22', expected: 22 },
        { from: 'hh.mm.ss', to: 's', value: '01.19.22', expected: 4752 },
        { from: 'hh,mm,ss', to: 's', value: '01,19,22', expected: 4752 },
        { from: 'hh mm ss', to: 's', value: '01 19 22', expected: 4752 },
        { from: 'hh.mm', to: 's', value: '01.19', expected: 4740 },
        { from: 'mm.ss', to: 's', value: '19.22', expected: 1162 },
        { from: 'hh:mm:ss.fff', to: 's', value: '01:19:22.500', expected: 4752.5 },
        { from: 'hh:mm:ss,fff', to: 's', value: '01:19:22,500', expected: 4752.5 },
      ]
    },

    // === –£–°–ö–û–†–ï–ù–ò–ï ===
    {
      category: 'Acceleration (–£—Å–∫–æ—Ä–µ–Ω–∏–µ)',
      tests: [
        { from: 'm/s^2', to: 'g', value: 1, expected: 0.101972 },
        { from: 'g', to: 'm/s^2', value: 1, expected: 9.80665 },
      ]
    },

    // === –ü–†–û–¶–ï–ù–¢–´ ===
    {
      category: 'Percentages (–ü—Ä–æ—Ü–µ–Ω—Ç—ã)',
      tests: [
        { from: '%', to: 'ratio', value: 50, expected: 0.5 },
        { from: 'ratio', to: '%', value: 0.5, expected: 50 },
      ]
    },

    // === –ö–û–õ–ò–ß–ï–°–¢–í–û ===
    {
      category: 'Count (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ)',
      tests: [
        { from: 'count', to: 'count', value: 10, expected: 10 },
        { from: 'times', to: 'times', value: 5, expected: 5 },
        { from: 'sprints', to: 'sprints', value: 3, expected: 3 },
      ]
    },

    // === –ü–£–õ–¨–° ===
    {
      category: 'Heart Rate (–ü—É–ª—å—Å)',
      tests: [
        { from: 'bpm', to: 'bpm', value: 150, expected: 150 },
        { from: '%HRmax', to: '%HRmax', value: 80, expected: 80 },
      ]
    },

    // === –ù–ê–ì–†–£–ó–ö–ê ===
    {
      category: 'Load (–ù–∞–≥—Ä—É–∑–∫–∞)',
      tests: [
        { from: 'AU', to: 'AU', value: 100, expected: 100 },
      ]
    },

    // === –ú–û–©–ù–û–°–¢–¨ ===
    {
      category: 'Power (–ú–æ—â–Ω–æ—Å—Ç—å)',
      tests: [
        { from: 'W/kg', to: 'W/kg', value: 5.5, expected: 5.5 },
      ]
    },

    // === –ò–î–ï–ù–¢–ò–ß–ù–û–°–¢–¨ ===
    {
      category: 'Identity (–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å)',
      tests: [
        { from: 'string', to: 'string', value: 'test', expected: 'test' },
      ]
    },
  ];

  let totalTests = 0;
  let passedTests = 0;
  let failedTests = 0;

  for (const category of testCases) {
    console.log(`\nüìä ${category.category}:`);
    console.log('‚îÄ'.repeat(50));

    for (const test of category.tests) {
      totalTests++;
      
      try {
        const result = convertUnit(test.value, test.from, test.to);
        const isPassed = Math.abs(result - test.expected) < 0.001;
        
        if (isPassed) {
          passedTests++;
          console.log(`‚úÖ ${test.value} ${test.from} ‚Üí ${result.toFixed(6)} ${test.to} (expected: ${test.expected})`);
        } else {
          failedTests++;
          console.log(`‚ùå ${test.value} ${test.from} ‚Üí ${result.toFixed(6)} ${test.to} (expected: ${test.expected})`);
        }
      } catch (error) {
        failedTests++;
        console.log(`üí• ${test.value} ${test.from} ‚Üí ERROR: ${error.message}`);
      }
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log(`üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
  console.log(`   ‚úÖ –ü—Ä–æ—à–ª–æ: ${passedTests}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);
  console.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  console.log('='.repeat(60));

  return { totalTests, passedTests, failedTests };
}

/**
 * –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
 */
function testConversionSupport() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π...\n');

  const testPairs = [
    // –î–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
    { from: 'm', to: 'km', shouldSupport: true },
    { from: 'm/s', to: 'km/h', shouldSupport: true },
    { from: 's', to: 'min', shouldSupport: true },
    { from: 'hh:mm:ss', to: 's', shouldSupport: true },
    { from: 'm/s^2', to: 'g', shouldSupport: true },
    { from: '%', to: 'ratio', shouldSupport: true },
    
    // –ù–µ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
    { from: 'm', to: 'invalid', shouldSupport: false },
    { from: 'invalid', to: 'm', shouldSupport: false },
    { from: 'm', to: 'bpm', shouldSupport: false },
  ];

  let supportTests = 0;
  let supportPassed = 0;

  for (const test of testPairs) {
    supportTests++;
    const isSupported = isConversionSupported(test.from, test.to);
    const isCorrect = isSupported === test.shouldSupport;
    
    if (isCorrect) {
      supportPassed++;
      console.log(`‚úÖ ${test.from} ‚Üí ${test.to}: ${isSupported ? '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.shouldSupport ? '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})`);
    } else {
      console.log(`‚ùå ${test.from} ‚Üí ${test.to}: ${isSupported ? '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.shouldSupport ? '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})`);
    }
  }

  console.log(`\nüìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π: ${supportPassed}/${supportTests} (${((supportPassed / supportTests) * 100).toFixed(1)}%)`);
  
  return { supportTests, supportPassed };
}

/**
 * –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
 */
function testValueFormatting() {
  console.log('\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π...\n');

  const formatTests = [
    { value: 1234.5678, unit: 'm', precision: 0, expected: '1235 m' },
    { value: 1234.5678, unit: 'km', precision: 2, expected: '1234.57 km' },
    { value: 1234.5678, unit: 'm/s', precision: 1, expected: '1234.6 m/s' },
    { value: 1234.5678, unit: 's', precision: 0, expected: '1235 s' },
    { value: 1234.5678, unit: 'bpm', precision: 0, expected: '1235 bpm' },
  ];

  let formatPassed = 0;
  for (const test of formatTests) {
    const result = formatValue(test.value, test.unit, test.precision);
    const isPassed = result === test.expected;
    
    if (isPassed) {
      formatPassed++;
      console.log(`‚úÖ ${test.value} ${test.unit} (precision: ${test.precision}) ‚Üí "${result}"`);
    } else {
      console.log(`‚ùå ${test.value} ${test.unit} (precision: ${test.precision}) ‚Üí "${result}" (expected: "${test.expected}")`);
    }
  }

  console.log(`\nüìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${formatPassed}/${formatTests.length} (${((formatPassed / formatTests.length) * 100).toFixed(1)}%)`);
  
  return { formatTests: formatTests.length, formatPassed };
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è...\n');

const conversionResults = testAllConversions();
const supportResults = testConversionSupport();
const formatResults = testValueFormatting();

console.log('\n' + '='.repeat(60));
console.log('üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
console.log(`   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${conversionResults.passedTests}/${conversionResults.totalTests} (${((conversionResults.passedTests / conversionResults.totalTests) * 100).toFixed(1)}%)`);
console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${supportResults.supportPassed}/${supportResults.supportTests} (${((supportResults.supportPassed / supportResults.supportTests) * 100).toFixed(1)}%)`);
console.log(`   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${formatResults.formatPassed}/${formatResults.formatTests} (${((formatResults.formatPassed / formatResults.formatTests) * 100).toFixed(1)}%)`);

const totalPassed = conversionResults.passedTests + supportResults.supportPassed + formatResults.formatPassed;
const totalTests = conversionResults.totalTests + supportResults.supportTests + formatResults.formatTests;
console.log(`   –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${totalPassed}/${totalTests} (${((totalPassed / totalTests) * 100).toFixed(1)}%)`);
console.log('='.repeat(60));
