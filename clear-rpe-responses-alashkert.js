const { db } = require('./src/lib/db');
const { rpeSurveyResponse, player, team } = require('./src/db/schema');
const { eq, and } = require('drizzle-orm');

async function clearRpeResponsesForAlashkert() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã FC Alashkert...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É FC Alashkert
    const alashkertTeam = await db
      .select()
      .from(team)
      .where(eq(team.name, 'FC Alashkert'))
      .limit(1);

    if (alashkertTeam.length === 0) {
      console.log('‚ùå –ö–æ–º–∞–Ω–¥–∞ FC Alashkert –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const teamId = alashkertTeam[0].id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ FC Alashkert —Å ID: ${teamId}`);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const players = await db
      .select({ id: player.id, firstName: player.firstName, lastName: player.lastName })
      .from(player)
      .where(eq(player.teamId, teamId));

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: ${players.length}`);
    
    if (players.length === 0) {
      console.log('‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤');
      return;
    }

    const playerIds = players.map(p => p.id);
    console.log('–ò–≥—Ä–æ–∫–∏:', players.map(p => `${p.firstName} ${p.lastName}`).join(', '));

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ RPE –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const existingResponses = await db
      .select()
      .from(rpeSurveyResponse)
      .where(and(
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º inArray –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Å—Å–∏–≤—É playerId
        require('drizzle-orm').inArray(rpeSurveyResponse.playerId, playerIds)
      ));

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ RPE –æ—Ç–≤–µ—Ç–æ–≤: ${existingResponses.length}`);

    if (existingResponses.length === 0) {
      console.log('‚úÖ RPE –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
    console.log('\nüìã –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:');
    existingResponses.forEach((response, index) => {
      const player = players.find(p => p.id === response.playerId);
      console.log(`${index + 1}. ${player?.firstName} ${player?.lastName} - RPE: ${response.rpeScore}, –î–∞—Ç–∞: ${response.createdAt}`);
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ RPE –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ RPE –æ—Ç–≤–µ—Ç–æ–≤...');
    
    const deleteResult = await db
      .delete(rpeSurveyResponse)
      .where(and(
        require('drizzle-orm').inArray(rpeSurveyResponse.playerId, playerIds)
      ));

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ RPE –æ—Ç–≤–µ—Ç–æ–≤: ${existingResponses.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
    const remainingResponses = await db
      .select()
      .from(rpeSurveyResponse)
      .where(and(
        require('drizzle-orm').inArray(rpeSurveyResponse.playerId, playerIds)
      ));

    if (remainingResponses.length === 0) {
      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –≤—Å–µ RPE –æ—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥—ã FC Alashkert —É–¥–∞–ª–µ–Ω—ã');
    } else {
      console.log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å ${remainingResponses.length} –æ—Ç–≤–µ—Ç–æ–≤`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ RPE –æ—Ç–≤–µ—Ç–æ–≤:', error);
  } finally {
    process.exit(0);
  }
}

clearRpeResponsesForAlashkert();
