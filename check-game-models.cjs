// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

const { db } = require('./src/lib/db');
const { playerGameModel, player } = require('./src/db/schema');

async function checkGameModels() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    const gameModels = await db.select().from(playerGameModel);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: ${gameModels.length}`);

    if (gameModels.length > 0) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π:');
      for (const model of gameModels) {
        console.log(`  - –ò–≥—Ä–æ–∫: ${model.playerId}`);
        console.log(`    –ö–ª—É–±: ${model.clubId}`);
        console.log(`    –ú–∞—Ç—á–µ–π: ${model.matchesCount}`);
        console.log(`    –ú–∏–Ω—É—Ç: ${model.totalMinutes}`);
        console.log(`    –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ: ${model.calculatedAt}`);
        console.log(`    –í–µ—Ä—Å–∏—è: ${model.version}`);
        console.log(`    –ú–µ—Ç—Ä–∏–∫–∏: ${Object.keys(model.metrics || {}).length} —à—Ç.`);
        console.log('    ---');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const players = await db.select().from(player);
    console.log(`\nüë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${players.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É –∫–∞–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    const playersWithModels = new Set(gameModels.map(m => m.playerId));
    const playersWithoutModels = players.filter(p => !playersWithModels.has(p.id));
    
    console.log(`\n‚úÖ –ò–≥—Ä–æ–∫–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏: ${playersWithModels.size}`);
    console.log(`‚ùå –ò–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –º–æ–¥–µ–ª–µ–π: ${playersWithoutModels.length}`);

    if (playersWithoutModels.length > 0) {
      console.log('\nüë• –ò–≥—Ä–æ–∫–∏ –±–µ–∑ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π:');
      for (const player of playersWithoutModels) {
        console.log(`  - ${player.firstName} ${player.lastName} (${player.id})`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    process.exit(0);
  }
}

checkGameModels();
