// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ canonical –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
const fs = require('fs');
const FormData = require('form-data');
const fetch = require('node-fetch');

async function testCanonicalAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º canonical –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API...');
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
    const excelBuffer = fs.readFileSync('test-gps-report.xlsx');
    console.log('üìä Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', excelBuffer.length, '–±–∞–π—Ç');
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const formData = new FormData();
    formData.append('file', excelBuffer, {
      filename: 'test-gps-report.xlsx',
      contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });
    formData.append('teamId', '1d83ba7f-362b-487c-8277-1ab4c30c3793'); // Vista team
    formData.append('eventType', 'TRAINING');
    formData.append('eventId', 'test-event-' + Date.now());
    formData.append('profileId', 'test-profile-id'); // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É GPS-–æ—Ç—á—ë—Ç–∞...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
    const response = await fetch('http://localhost:3000/api/gps-reports', {
      method: 'POST',
      body: formData
    });
    
    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ GPS-–æ—Ç—á—ë—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä ID –æ—Ç—á—ë—Ç–∞:', result.id);
      console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω:', result.isProcessed);
      console.log('üìä Canonical –¥–∞–Ω–Ω—ã–µ:', !!result.processedData?.canonical);
      
      if (result.processedData?.canonical) {
        console.log('üìä Canonical rows:', result.processedData.canonical.rows?.length);
        console.log('üìä –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:', result.processedData.canonical.rows?.[0]);
        console.log('üìä –ö–ª—é—á–∏ canonical:', Object.keys(result.processedData.canonical.rows?.[0] || {}));
      } else {
        console.log('‚ùå Canonical –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testCanonicalAPI();
