
> uteam-multi@1.0.0 test
> jest

PASS src/services/gps/__tests__/profileSnapshot.service.test.ts
PASS src/canon/__tests__/units.test.ts
PASS src/__tests__/edit-modal-static-guard.test.ts
FAIL src/services/__tests__/canon.mapper.test.ts
  ● canon.mapper › maps and converts to canonical

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      15 |
      16 |   test('maps and converts to canonical', () => {
    > 17 |     const cols = buildCanonColumns(profileColumns as any);
         |                                   ^
      18 |     const { rows: out, meta } = mapRowsToCanonical(rows, cols);
      19 |     
      20 |     expect(out.length).toBe(2);

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:17:35)

  ● canon.mapper › buildCanonColumns filters out invalid columns

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      36 |     ];
      37 |
    > 38 |     const cols = buildCanonColumns(mixedColumns as any);
         |                                   ^
      39 |     expect(cols.length).toBe(1);
      40 |     expect(cols[0].canonicalKey).toBe('total_distance_m');
      41 |   });

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:38:35)

  ● canon.mapper › handles identity fields correctly

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      51 |     ];
      52 |
    > 53 |     const cols = buildCanonColumns(identityColumns as any);
         |                                   ^
      54 |     const { rows: out } = mapRowsToCanonical(identityRows, cols);
      55 |     
      56 |     expect(out.length).toBe(2);

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:53:35)

  ● canon.mapper › handles empty rows gracefully

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      60 |
      61 |   test('handles empty rows gracefully', () => {
    > 62 |     const cols = buildCanonColumns(profileColumns as any);
         |                                   ^
      63 |     const { rows: out } = mapRowsToCanonical([], cols);
      64 |     
      65 |     expect(out.length).toBe(0);

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:62:35)

  ● canon.mapper › handles null/undefined values

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      67 |
      68 |   test('handles null/undefined values', () => {
    > 69 |     const cols = buildCanonColumns(profileColumns as any);
         |                                   ^
      70 |     const rowsWithNulls = [
      71 |       { 'Player Name': 'Игрок 1', TD: null, 'Max Speed (km/h)': undefined, 'HSR%': '' },
      72 |     ];

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:69:35)

  ● canon.mapper › converts units correctly

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      90 |     ];
      91 |
    > 92 |     const cols = buildCanonColumns(speedColumns as any);
         |                                   ^
      93 |     const { rows: out } = mapRowsToCanonical(speedRows, cols);
      94 |     
      95 |     expect(out.length).toBe(1);

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:92:35)

  ● canon.mapper › handles comma decimal separator

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

       98 |
       99 |   test('handles comma decimal separator', () => {
    > 100 |     const cols = buildCanonColumns(profileColumns as any);
          |                                   ^
      101 |     const rowsWithCommas = [
      102 |       { 'Player Name': 'Игрок 1', TD: '12345,67', 'Max Speed (km/h)': '32,4', 'HSR%': '8,5' },
      103 |     ];

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:100:35)

  ● canon.mapper › ratio from percent sign header (HSR%) -> ratio 0..1

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      116 |     ];
      117 |     const rows = [{ 'HSR%': '8.5' }, { 'HSR%': '12,0' }]; // запятая тоже поддерживается
    > 118 |     const cols = buildCanonColumns(profileColumns as any);
          |                                   ^
      119 |     const { rows: out } = mapRowsToCanonical(rows as any, cols);
      120 |     expect(out[0].hsr_ratio).toBeCloseTo(0.085, 6);
      121 |     expect(out[1].hsr_ratio).toBeCloseTo(0.12, 6);

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:118:35)

  ● canon.mapper › ratio fallback without unit: values >1 and <=100 treated as %

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      127 |     ];
      128 |     const rows = [{ 'Some Ratio': 7 }, { 'Some Ratio': 0.42 }];
    > 129 |     const cols = buildCanonColumns(profileColumns as any);
          |                                   ^
      130 |     const { rows: out } = mapRowsToCanonical(rows as any, cols);
      131 |     expect(out[0].hsr_ratio).toBeCloseTo(0.07, 6);  // 7% -> 0.07
      132 |     expect(out[1].hsr_ratio).toBe(0.42); // 0.42 уже доля, остается как есть

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:129:35)

  ● canon.mapper › generates warnings for values below minimum

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      134 |
      135 |   test('generates warnings for values below minimum', () => {
    > 136 |     const cols = buildCanonColumns(profileColumns as any);
          |                                   ^
      137 |     const rowsWithLowValue = [
      138 |       { 'Player Name': 'Игрок 1', TD: '-100', 'Max Speed (km/h)': '32.4', 'HSR%': '8.5' }, // TD = -100м (отрицательное значение)
      139 |     ];

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:136:35)

  ● canon.mapper › generates warnings for values above maximum

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      145 |
      146 |   test('generates warnings for values above maximum', () => {
    > 147 |     const cols = buildCanonColumns(profileColumns as any);
          |                                   ^
      148 |     const rowsWithHighValue = [
      149 |       { 'Player Name': 'Игрок 1', TD: '12345', 'Max Speed (km/h)': '150', 'HSR%': '8.5' }, // Max Speed = 150 km/h (очень много)
      150 |     ];

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:147:35)

  ● canon.mapper › ratio double-conversion guard: sourceUnit % and value 0.85 → remains 0.85

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      157 |
      158 |   test('ratio double-conversion guard: sourceUnit % and value 0.85 → remains 0.85', () => {
    > 159 |     const cols = buildCanonColumns([
          |                                   ^
      160 |       {
      161 |         type: 'column',
      162 |         canonicalKey: 'hsr_ratio',

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:159:35)

  ● canon.mapper › ratio double-conversion guard: sourceUnit % and value 8.5 → 0.085

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      180 |
      181 |   test('ratio double-conversion guard: sourceUnit % and value 8.5 → 0.085', () => {
    > 182 |     const cols = buildCanonColumns([
          |                                   ^
      183 |       {
      184 |         type: 'column',
      185 |         canonicalKey: 'hsr_ratio',

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:182:35)

  ● canon.mapper › ratio double-conversion guard: no sourceUnit, value 0.85 → remains 0.85

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      203 |
      204 |   test('ratio double-conversion guard: no sourceUnit, value 0.85 → remains 0.85', () => {
    > 205 |     const cols = buildCanonColumns([
          |                                   ^
      206 |       {
      207 |         type: 'column',
      208 |         canonicalKey: 'hsr_ratio',

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:205:35)

  ● canon.mapper › ratio double-conversion guard: no sourceUnit, value 8.5 → 0.085

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      223 |
      224 |   test('ratio double-conversion guard: no sourceUnit, value 8.5 → 0.085', () => {
    > 225 |     const cols = buildCanonColumns([
          |                                   ^
      226 |       {
      227 |         type: 'column',
      228 |         canonicalKey: 'hsr_ratio',

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:225:35)

  ● canon.mapper › athlete_name is added from various name fields

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      243 |
      244 |   test('athlete_name is added from various name fields', () => {
    > 245 |     const cols = buildCanonColumns([
          |                                   ^
      246 |       { type: 'column', mappedColumn: 'TD', canonicalKey: 'total_distance_m', name: 'Дистанция' },
      247 |     ] as any);
      248 |

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:245:35)

  ● canon.mapper › athlete_name fallback when no name field found

    TypeError: (0 , _canonmapper.buildCanonColumns) is not a function

      263 |
      264 |   test('athlete_name fallback when no name field found', () => {
    > 265 |     const cols = buildCanonColumns([
          |                                   ^
      266 |       { type: 'column', mappedColumn: 'TD', canonicalKey: 'total_distance_m', name: 'Дистанция' },
      267 |     ] as any);
      268 |

      at Object.<anonymous> (src/services/__tests__/canon.mapper.test.ts:265:35)

  ● canon.mapper › filtering unmapped rows › should include all rows when all are mapped

    TypeError: Cannot read properties of undefined (reading 'length')

      296 |       const { rows: result, meta } = mapRowsToCanonical(rows, cols, { processedRows });
      297 |       
    > 298 |       expect(result.length).toBe(2);
          |                     ^
      299 |       expect(meta.counts).toEqual({
      300 |         input: 2,
      301 |         filtered: 0,

      at Object.length (src/services/__tests__/canon.mapper.test.ts:298:21)

  ● canon.mapper › filtering unmapped rows › should filter out unmapped rows and return counts

    TypeError: Cannot read properties of undefined (reading 'length')

      325 |       const { rows: result, meta } = mapRowsToCanonical(rows, cols, { processedRows });
      326 |       
    > 327 |       expect(result.length).toBe(2);
          |                     ^
      328 |       expect(meta.counts).toEqual({
      329 |         input: 3,
      330 |         filtered: 1,

      at Object.length (src/services/__tests__/canon.mapper.test.ts:327:21)

  ● canon.mapper › filtering unmapped rows › should filter all rows when none are mapped

    TypeError: Cannot read properties of undefined (reading 'length')

      352 |       const { rows: result, meta } = mapRowsToCanonical(rows, cols, { processedRows });
      353 |       
    > 354 |       expect(result.length).toBe(0);
          |                     ^
      355 |       expect(meta.counts).toEqual({
      356 |         input: 2,
      357 |         filtered: 2,

      at Object.length (src/services/__tests__/canon.mapper.test.ts:354:21)

PASS src/app/api/gps-profiles/__tests__/profiles.canonical.test.ts
FAIL src/services/gps/__tests__/ingest.service.test.ts
  ● GPS Ingest Service › normalizeHeaders › should trim and filter empty headers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Array [
    -   "Name",
    -   "Distance",
    -   "Speed",
    +   "name",
    +   "distance",
    +   "speed",
      ]

      14 |       const headers = ['  Name  ', '', '  Distance  ', '  ', 'Speed'];
      15 |       const result = normalizeHeaders(headers);
    > 16 |       expect(result).toEqual(['Name', 'Distance', 'Speed']);
         |                      ^
      17 |     });
      18 |
      19 |     it('should handle empty array', () => {

      at Object.toEqual (src/services/gps/__tests__/ingest.service.test.ts:16:22)

  ● GPS Ingest Service › applyProfile › should map columns correctly by header names

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      64 |       const result = applyProfile(parsed, mockProfile);
      65 |
    > 66 |       expect(result.mappedColumns).toHaveLength(2);
         |                                    ^
      67 |       expect(result.mappedColumns[0]).toEqual({
      68 |         sourceHeader: 'Name',
      69 |         canonicalKey: 'athlete_name',

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:66:36)

  ● GPS Ingest Service › applyProfile › should handle case-insensitive header matching

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      89 |       const result = applyProfile(parsed, mockProfile);
      90 |
    > 91 |       expect(result.mappedColumns).toHaveLength(2);
         |                                    ^
      92 |       expect(result.dataRows.athlete_name).toEqual(['Player 1']);
      93 |       expect(result.dataRows.total_distance_m).toEqual(['1000']);
      94 |     });

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:91:36)

  ● GPS Ingest Service › applyProfile › should generate warnings for missing columns

    expect(received).toContain(expected) // indexOf

    Expected value: "Column \"Distance\" not found in file headers"
    Received array: []

      104 |       const result = applyProfile(parsed, mockProfile);
      105 |
    > 106 |       expect(result.warnings).toContain('Column "Distance" not found in file headers');
          |                               ^
      107 |       expect(result.mappedColumns).toHaveLength(1); // Only 'Name' mapped
      108 |     });
      109 |

      at Object.toContain (src/services/gps/__tests__/ingest.service.test.ts:106:31)

  ● GPS Ingest Service › applyProfile › should sort columns by order

    TypeError: Cannot read properties of undefined (reading 'canonicalKey')

      136 |       const result = applyProfile(parsed, profileWithOrder);
      137 |
    > 138 |       expect(result.mappedColumns[0].canonicalKey).toBe('first_field');
          |                                      ^
      139 |       expect(result.mappedColumns[1].canonicalKey).toBe('second_field');
      140 |     });
      141 |

      at Object.canonicalKey (src/services/gps/__tests__/ingest.service.test.ts:138:38)

  ● GPS Ingest Service › applyProfile › should skip formula columns

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      148 |       const result = applyProfile(parsed, mockProfile);
      149 |
    > 150 |       expect(result.mappedColumns).toHaveLength(2);
          |                                    ^
      151 |       expect(result.mappedColumns.every(col => col.canonicalKey !== 'calculated_field')).toBe(true);
      152 |     });
      153 |   });

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:150:36)

  ● GPS Ingest Service › parseSpreadsheet › should parse CSV files

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   "Name",
    -   "Distance",
    +   "name",
    +   "distance",
      ]

      170 |       const result = await parseSpreadsheet(buffer, 'test.csv');
      171 |
    > 172 |       expect(result.headers).toEqual(['Name', 'Distance']);
          |                              ^
      173 |       expect(result.rows).toEqual([['Player 1', '1000']]);
      174 |     });
      175 |

      at Object.toEqual (src/services/gps/__tests__/ingest.service.test.ts:172:30)

PASS src/canon/__tests__/suggest.test.ts
PASS src/services/__tests__/playerMapping.service.test.ts
  ● Console

    console.log
      🔍 Fuzzy matches for Duffour Kofi : []

      at Function.log [as autoMatchPlayer] (src/services/playerMapping.service.ts:101:13)

    console.log
      🔍 No matches found for Duffour Kofi

      at Function.log [as autoMatchPlayer] (src/services/playerMapping.service.ts:104:15)

PASS src/services/gps/__tests__/ingest.fixtures.e2e.test.ts
A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.

Test Suites: 2 failed, 7 passed, 9 total
Tests:       27 failed, 63 passed, 90 total
Snapshots:   0 total
Time:        2.918 s, estimated 3 s
Ran all test suites.
