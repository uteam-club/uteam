PASS src/services/gps/__tests__/profileSnapshot.service.test.ts
PASS src/canon/__tests__/units.test.ts
PASS src/canon/__tests__/suggest.test.ts
FAIL src/services/gps/__tests__/ingest.service.test.ts
  ● GPS Ingest Service › normalizeHeaders › should trim and filter empty headers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Array [
    -   "Name",
    -   "Distance",
    -   "Speed",
    +   "name",
    +   "distance",
    +   "speed",
      ]

      14 |       const headers = ['  Name  ', '', '  Distance  ', '  ', 'Speed'];
      15 |       const result = normalizeHeaders(headers);
    > 16 |       expect(result).toEqual(['Name', 'Distance', 'Speed']);
         |                      ^
      17 |     });
      18 |
      19 |     it('should handle empty array', () => {

      at Object.toEqual (src/services/gps/__tests__/ingest.service.test.ts:16:22)

  ● GPS Ingest Service › applyProfile › should map columns correctly by header names

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      64 |       const result = applyProfile(parsed, mockProfile);
      65 |
    > 66 |       expect(result.mappedColumns).toHaveLength(2);
         |                                    ^
      67 |       expect(result.mappedColumns[0]).toEqual({
      68 |         sourceHeader: 'Name',
      69 |         canonicalKey: 'athlete_name',

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:66:36)

  ● GPS Ingest Service › applyProfile › should handle case-insensitive header matching

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      89 |       const result = applyProfile(parsed, mockProfile);
      90 |
    > 91 |       expect(result.mappedColumns).toHaveLength(2);
         |                                    ^
      92 |       expect(result.dataRows.athlete_name).toEqual(['Player 1']);
      93 |       expect(result.dataRows.total_distance_m).toEqual(['1000']);
      94 |     });

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:91:36)

  ● GPS Ingest Service › applyProfile › should generate warnings for missing columns

    expect(received).toContain(expected) // indexOf

    Expected value: "Column \"Distance\" not found in file headers"
    Received array: []

      104 |       const result = applyProfile(parsed, mockProfile);
      105 |
    > 106 |       expect(result.warnings).toContain('Column "Distance" not found in file headers');
          |                               ^
      107 |       expect(result.mappedColumns).toHaveLength(1); // Only 'Name' mapped
      108 |     });
      109 |

      at Object.toContain (src/services/gps/__tests__/ingest.service.test.ts:106:31)

  ● GPS Ingest Service › applyProfile › should sort columns by order

    TypeError: Cannot read properties of undefined (reading 'canonicalKey')

      136 |       const result = applyProfile(parsed, profileWithOrder);
      137 |
    > 138 |       expect(result.mappedColumns[0].canonicalKey).toBe('first_field');
          |                                      ^
      139 |       expect(result.mappedColumns[1].canonicalKey).toBe('second_field');
      140 |     });
      141 |

      at Object.canonicalKey (src/services/gps/__tests__/ingest.service.test.ts:138:38)

  ● GPS Ingest Service › applyProfile › should skip formula columns

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 0
    Received array:  []

      148 |       const result = applyProfile(parsed, mockProfile);
      149 |
    > 150 |       expect(result.mappedColumns).toHaveLength(2);
          |                                    ^
      151 |       expect(result.mappedColumns.every(col => col.canonicalKey !== 'calculated_field')).toBe(true);
      152 |     });
      153 |   });

      at Object.toHaveLength (src/services/gps/__tests__/ingest.service.test.ts:150:36)

  ● GPS Ingest Service › parseSpreadsheet › should parse CSV files

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   "Name",
    -   "Distance",
    +   "name",
    +   "distance",
      ]

      170 |       const result = await parseSpreadsheet(buffer, 'test.csv');
      171 |
    > 172 |       expect(result.headers).toEqual(['Name', 'Distance']);
          |                              ^
      173 |       expect(result.rows).toEqual([['Player 1', '1000']]);
      174 |     });
      175 |

      at Object.toEqual (src/services/gps/__tests__/ingest.service.test.ts:172:30)

FAIL src/services/gps/__tests__/ingest.fixtures.e2e.test.ts
  ● GPS Ingest Fixtures E2E › Polar demo CSV should be processed correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      34 |     `);
      35 |     
    > 36 |     expect(profileResult.rows.length).toBe(1);
         |                                       ^
      37 |     const profile = {
      38 |       id: profileResult.rows[0].id,
      39 |       gpsSystem: profileResult.rows[0].gpsSystem,

      at Object.toBe (src/services/gps/__tests__/ingest.fixtures.e2e.test.ts:36:39)

  ● GPS Ingest Fixtures E2E › STATSports demo CSV should be processed correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      78 |     `);
      79 |     
    > 80 |     expect(profileResult.rows.length).toBe(1);
         |                                       ^
      81 |     const profile = {
      82 |       id: profileResult.rows[0].id,
      83 |       gpsSystem: profileResult.rows[0].gpsSystem,

      at Object.toBe (src/services/gps/__tests__/ingest.fixtures.e2e.test.ts:80:39)

Test Suites: 2 failed, 3 passed, 5 total
Tests:       9 failed, 31 passed, 40 total
Snapshots:   0 total
Time:        1.967 s, estimated 2 s
Ran all test suites matching src/services/gps/__tests__|src/canon.
