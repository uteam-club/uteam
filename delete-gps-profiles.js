const { drizzle } = require('drizzle-orm/postgres-js');
const postgres = require('postgres');
const { eq } = require('drizzle-orm');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
const { gpsProfile, gpsColumnMapping, gpsReport, gpsPlayerMapping } = require('./src/db/schema/index.ts');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectionString = process.env.DATABASE_URL;
if (!connectionString) {
  console.error('DATABASE_URL environment variable is required');
  process.exit(1);
}

const sql = postgres(connectionString);
const db = drizzle(sql);

async function deleteGpsProfiles() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ GPS –ø—Ä–æ—Ñ–∏–ª–µ–π...');
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ GPS –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles = await db.select().from(gpsProfile);
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}`);
    
    for (const profile of profiles) {
      console.log(`\nüìã –ü—Ä–æ—Ñ–∏–ª—å: ${profile.name} (${profile.gpsSystem})`);
      console.log(`   ID: ${profile.id}`);
      console.log(`   –ö–ª—É–±: ${profile.clubId}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${profile.isActive}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç—á–µ—Ç–∞—Ö
      const reports = await db.select().from(gpsReport).where(eq(gpsReport.profileId, profile.id));
      console.log(`   –û—Ç—á–µ—Ç–æ–≤ —Å —ç—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º: ${reports.length}`);
      
      if (reports.length > 0) {
        console.log(`   ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${reports.length} –æ—Ç—á–µ—Ç–∞—Ö. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –æ—Ç—á–µ—Ç—ã...`);
        
        // –£–¥–∞–ª–∏–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        for (const report of reports) {
          await db.delete(gpsPlayerMapping).where(eq(gpsPlayerMapping.gpsReportId, report.id));
          console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã –º–∞–ø–ø–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ ${report.id}`);
        }
        
        // –£–¥–∞–ª–∏–º –æ—Ç—á–µ—Ç—ã
        await db.delete(gpsReport).where(eq(gpsReport.profileId, profile.id));
        console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã ${reports.length} –æ—Ç—á–µ—Ç–æ–≤`);
      }
      
      // –£–¥–∞–ª–∏–º –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ–ª–æ–Ω–æ–∫
      const columnMappings = await db.select().from(gpsColumnMapping).where(eq(gpsColumnMapping.gpsProfileId, profile.id));
      if (columnMappings.length > 0) {
        await db.delete(gpsColumnMapping).where(eq(gpsColumnMapping.gpsProfileId, profile.id));
        console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã ${columnMappings.length} –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∫–æ–ª–æ–Ω–æ–∫`);
      }
      
      // –£–¥–∞–ª–∏–º —Å–∞–º –ø—Ä–æ—Ñ–∏–ª—å
      await db.delete(gpsProfile).where(eq(gpsProfile.id, profile.id));
      console.log(`   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å "${profile.name}" —É–¥–∞–ª–µ–Ω`);
    }
    
    console.log('\nüéâ –í—Å–µ GPS –ø—Ä–æ—Ñ–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
  } finally {
    await sql.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
deleteGpsProfiles();
